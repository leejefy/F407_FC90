---- SMI Read Failed Matches (3 in 2 files) ----
madDrvConfig.c (user\phy\src\driver):        MAD_DBG_ERROR(("SMI Read Failed\n"));
madDrvConfig.c (user\phy\src\driver):        MAD_DBG_ERROR(("SMI Read Failed\n"));
madSysConfig.c (user\phy\src\madapi):        MAD_DBG_ERROR(("SMI Read Failed\n"));
---- \n" Matches (5950 in 106 files) ----
802_1q.c (user\switch\sample\802.1q):        MSG_PRINT(("gvtuFlush returned fail.\n"));
802_1q.c (user\switch\sample\802.1q):        MSG_PRINT(("gvtuAddEntry returned fail.\n"));
802_1q.c (user\switch\sample\802.1q):        MSG_PRINT(("gvtuAddEntry returned fail.\n"));
802_1q.c (user\switch\sample\802.1q):            MSG_PRINT(("gvlnSetPortVid returned fail.\n"));
802_1q.c (user\switch\sample\802.1q):            MSG_PRINT(("Done.\n"));
802_1q.c (user\switch\sample\802.1q):            MSG_PRINT(("Try other method.\n"));
802_1q.c (user\switch\sample\802.1q):            MSG_PRINT(("Failure accessing device.\n"));
802_1q.c (user\switch\sample\802.1q):        MSG_PRINT(("gvtuAddEntry returned fail.\n"));
802_1q.c (user\switch\sample\802.1q):        MSG_PRINT(("gvlnSetPortVid returned fail.\n"));
802_1q.c (user\switch\sample\802.1q):        MSG_PRINT(("gvtuGetEntryCount returned fail.\n"));
802_1q.c (user\switch\sample\802.1q):    MSG_PRINT(("DBNum:%i, VID:%i \n",vtuEntry.DBNum,vtuEntry.vid));
802_1q.c (user\switch\sample\802.1q):    MSG_PRINT(("\n"));
802_1q.c (user\switch\sample\802.1q):        MSG_PRINT(("DBNum:%i, VID:%i \n",vtuEntry.DBNum,vtuEntry.vid));
802_1q.c (user\switch\sample\802.1q):        MSG_PRINT(("\n"));
advCableTest.c (user\switch\sample\cabletest):            MSG_PRINT(("Cable Test Passed. No problem found.\n"));
advCableTest.c (user\switch\sample\cabletest):            MSG_PRINT(("Cable Test Passed. Impedance is greater than 115 Ohms.\n"));
advCableTest.c (user\switch\sample\cabletest):            MSG_PRINT(("Approximatly %i meters from the tested port.\n",cableStatus->u[channel].dist2fault));
advCableTest.c (user\switch\sample\cabletest):            MSG_PRINT(("Cable Test Passed. Impedance is less than 85 Ohms.\n"));
advCableTest.c (user\switch\sample\cabletest):            MSG_PRINT(("Approximatly %i meters from the tested port.\n",cableStatus->u[channel].dist2fault));
advCableTest.c (user\switch\sample\cabletest):            MSG_PRINT(("Cable Test Passed. Open Cable.\n"));
advCableTest.c (user\switch\sample\cabletest):            MSG_PRINT(("Approximatly %i meters from the tested port.\n",cableStatus->u[channel].dist2fault));
advCableTest.c (user\switch\sample\cabletest):            MSG_PRINT(("Cable Test Passed. Shorted Cable.\n"));
advCableTest.c (user\switch\sample\cabletest):            MSG_PRINT(("Approximatly %i meters from the tested port.\n",cableStatus->u[channel].dist2fault));
advCableTest.c (user\switch\sample\cabletest):            MSG_PRINT(("Cable Test Passed.\n"));
advCableTest.c (user\switch\sample\cabletest):                    MSG_PRINT(("\tCross pair short with channel %i.\n",i));
advCableTest.c (user\switch\sample\cabletest):                    MSG_PRINT(("\tApproximatly %i meters from the tested port.\n",
advCableTest.c (user\switch\sample\cabletest):            MSG_PRINT(("Unknown Test Result.\n"));
advCableTest.c (user\switch\sample\cabletest):            MSG_PRINT(("MDI PAIR %i:\n",i));
advCableTest.c (user\switch\sample\cabletest):        MSG_PRINT(("Not able to get Extended Status.\n"));
advCableTest.c (user\switch\sample\cabletest):        MSG_PRINT(("Please check if 1000B-T Link is established on Port %i.\n",(int)port));
advCableTest.c (user\switch\sample\cabletest):    MSG_PRINT(("Pair Polarity:\n"));
advCableTest.c (user\switch\sample\cabletest):    MSG_PRINT(("Pair Swap:\n"));
advCableTest.c (user\switch\sample\cabletest):    MSG_PRINT(("Pair Skew:\n"));
advCableTest.c (user\switch\sample\cabletest):    MSG_PRINT(("Cable Len:\n"));
Api_lib.c (lwip-1.4.1\src\api):  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));
Auth.c (lwip-1.4.1\src\netif\ppp):  AUTHDEBUG(LOG_NOTICE, ("Connection terminated.\n"));
Auth.c (lwip-1.4.1\src\netif\ppp):  AUTHDEBUG(LOG_INFO, ("link_established: unit %d; Lowering up all protocols...\n", unit));
Auth.c (lwip-1.4.1\src\netif\ppp):    AUTHDEBUG(LOG_INFO, ("Terminating connection due to lack of activity.\n"));
Autoip.c (lwip-1.4.1\src\core\ipv4):    ("autoip_create_addr(): tried_llipaddr=%"U16_F", %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
Autoip.c (lwip-1.4.1\src\core\ipv4):    ("autoip_bind(netif=%p) %c%c%"U16_F" %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
Autoip.c (lwip-1.4.1\src\core\ipv4):    ("autoip_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0],
Autoip.c (lwip-1.4.1\src\core\ipv4):     ("autoip_start_probing(): changing state to PROBING: %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
Autoip.c (lwip-1.4.1\src\core\ipv4):        ("autoip_tmr() AutoIP-State: %"U16_F", ttw=%"U16_F"\n",
Autoip.c (lwip-1.4.1\src\core\ipv4):                 ("autoip_tmr(): changing state to ANNOUNCING: %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
Autoip.c (lwip-1.4.1\src\core\ipv4):                    ("autoip_tmr(): changing state to BOUND: %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
Autoip.c (lwip-1.4.1\src\core\ipv4):  LWIP_DEBUGF(AUTOIP_DEBUG | LWIP_DBG_TRACE, ("autoip_arp_reply()\n"));
cableTest.c (user\switch\sample\cabletest):            MSG_PRINT(("Cable Test Passed. No problem found.\n"));
cableTest.c (user\switch\sample\cabletest):                    MSG_PRINT(("Cable Length is less than 50M.\n"));
cableTest.c (user\switch\sample\cabletest):                    MSG_PRINT(("Cable Length is between 50M and 80M.\n"));
cableTest.c (user\switch\sample\cabletest):                    MSG_PRINT(("Cable Length is between 80M and 110M.\n"));
cableTest.c (user\switch\sample\cabletest):                    MSG_PRINT(("Cable Length is between 110M and 140M.\n"));
cableTest.c (user\switch\sample\cabletest):                    MSG_PRINT(("Cable Length is over 140M.\n"));
cableTest.c (user\switch\sample\cabletest):                    MSG_PRINT(("Cable Length is unknown.\n"));
cableTest.c (user\switch\sample\cabletest):            MSG_PRINT(("Cable Test Passed. Cable has Impedance Mismatch .\n"));
cableTest.c (user\switch\sample\cabletest):            MSG_PRINT(("Approximatly %i meters from the tested port.\n",cableLen->errCableLen));
cableTest.c (user\switch\sample\cabletest):            MSG_PRINT(("Cable Test Passed. Cable is open.\n"));
cableTest.c (user\switch\sample\cabletest):            MSG_PRINT(("Approximatly %i meters from the tested port.\n",cableLen->errCableLen));
cableTest.c (user\switch\sample\cabletest):            MSG_PRINT(("Cable Test Passed. Cable is short.\n"));
cableTest.c (user\switch\sample\cabletest):            MSG_PRINT(("Approximatly %i meters from the tested port.\n",cableLen->errCableLen));
cableTest.c (user\switch\sample\cabletest):            MSG_PRINT(("Unknown Test Result.\n"));
cableTest.c (user\switch\sample\cabletest):        MSG_PRINT(("RX PAIR :\n"));
cableTest.c (user\switch\sample\cabletest):        MSG_PRINT(("TX PAIR :\n"));
cableTest.c (user\switch\sample\cabletest):            MSG_PRINT(("MDI PAIR %i:\n",i));
Chap.c (lwip-1.4.1\src\netif\ppp):    CHAPDEBUG(LOG_INFO, ("ChapInput: rcvd short header.\n"));
Chap.c (lwip-1.4.1\src\netif\ppp):    CHAPDEBUG(LOG_INFO, ("ChapInput: rcvd illegal length.\n"));
Chap.c (lwip-1.4.1\src\netif\ppp):    CHAPDEBUG(LOG_INFO, ("ChapInput: rcvd short packet.\n"));
Chap.c (lwip-1.4.1\src\netif\ppp):      CHAPDEBUG(LOG_WARNING, ("Unknown CHAP code (%d) received.\n", code));
Chap.c (lwip-1.4.1\src\netif\ppp):  CHAPDEBUG(LOG_INFO, ("ChapReceiveChallenge: Rcvd id %d.\n", id));
Chap.c (lwip-1.4.1\src\netif\ppp):    CHAPDEBUG(LOG_INFO, ("ChapReceiveChallenge: rcvd short packet.\n"));
Chap.c (lwip-1.4.1\src\netif\ppp):    CHAPDEBUG(LOG_INFO, ("ChapReceiveChallenge: rcvd short packet.\n"));
Chap.c (lwip-1.4.1\src\netif\ppp):  CHAPDEBUG(LOG_INFO, ("ChapReceiveChallenge: received name field '%s'\n",
Chap.c (lwip-1.4.1\src\netif\ppp):  CHAPDEBUG(LOG_INFO, ("ChapReceiveResponse: Rcvd id %d.\n", id));
Chap.c (lwip-1.4.1\src\netif\ppp):    CHAPDEBUG(LOG_INFO, ("ChapReceiveResponse: rcvd short packet.\n"));
Chap.c (lwip-1.4.1\src\netif\ppp):    CHAPDEBUG(LOG_INFO, ("ChapReceiveResponse: rcvd short packet.\n"));
Chap.c (lwip-1.4.1\src\netif\ppp):  CHAPDEBUG(LOG_INFO, ("ChapReceiveSuccess: Rcvd id %d.\n", id));
Chap.c (lwip-1.4.1\src\netif\ppp):  CHAPDEBUG(LOG_INFO, ("ChapReceiveFailure: Rcvd id %d.\n", id));
Chap.c (lwip-1.4.1\src\netif\ppp):  CHAPDEBUG(LOG_INFO, ("ChapSendChallenge: Sent id %d.\n", cstate->chal_id));
Chap.c (lwip-1.4.1\src\netif\ppp):  CHAPDEBUG(LOG_INFO, ("ChapSendStatus: Sent code %d, id %d.\n", code,
Chpms.c (lwip-1.4.1\src\netif\ppp):  CHAPDEBUG(LOG_INFO, ("ChapMS: secret is '%.*s'\n", secret_len, secret));
crossChipTrunk.c (user\switch\sample\crosschiptrunk):    printf("Enabling TRUNK for each member port.\n");
Dhcp.c (lwip-1.4.1\src\core):  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n", 
Dhcp.c (lwip-1.4.1\src\core):  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
Dhcp.c (lwip-1.4.1\src\core):    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
Dhcp.c (lwip-1.4.1\src\core):    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
Dhcp.c (lwip-1.4.1\src\core):      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
Dhcp.c (lwip-1.4.1\src\core):  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
Dhcp.c (lwip-1.4.1\src\core):  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
Dhcp.c (lwip-1.4.1\src\core):  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
Dhcp.c (lwip-1.4.1\src\core):  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
Dhcp.c (lwip-1.4.1\src\core):  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
Dhcp.c (lwip-1.4.1\src\core):  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
Dhcp.c (lwip-1.4.1\src\core):  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
Dhcp.c (lwip-1.4.1\src\core):    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
Dhcp.c (lwip-1.4.1\src\core):  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
Dhcp.c (lwip-1.4.1\src\core):  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
Dhcp.c (lwip-1.4.1\src\core):    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
Dhcp.c (lwip-1.4.1\src\core):  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
Dhcp.c (lwip-1.4.1\src\core):  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F"\n",
Dhcp.c (lwip-1.4.1\src\core):  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): SN: 0x%08"X32_F"\n",
Dhcp.c (lwip-1.4.1\src\core):  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): GW: 0x%08"X32_F"\n",
Dhcp.c (lwip-1.4.1\src\core):  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
Dhcp.c (lwip-1.4.1\src\core):  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
Dhcp.c (lwip-1.4.1\src\core):  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
Dhcp.c (lwip-1.4.1\src\core):  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
Dhcp.c (lwip-1.4.1\src\core):  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
Dhcp.c (lwip-1.4.1\src\core):  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_recv(pbuf = %p) from DHCP server %"U16_F".%"U16_F".%"U16_F".%"U16_F" port %"U16_F"\n", (void*)p,
Dhcp.c (lwip-1.4.1\src\core):  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->len = %"U16_F"\n", p->len));
Dhcp.c (lwip-1.4.1\src\core):  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->tot_len = %"U16_F"\n", p->tot_len));
Dhcp.c (lwip-1.4.1\src\core):    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
Dhcp.c (lwip-1.4.1\src\core):        ("netif->hwaddr[%"U16_F"]==%02"X16_F" != reply_msg->chaddr[%"U16_F"]==%02"X16_F"\n",
Dhcp.c (lwip-1.4.1\src\core):      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",ntohl(reply_msg->xid),dhcp->xid));
Dhcp.c (lwip-1.4.1\src\core):      ("problem unfolding DHCP message - too short on memory?\n"));
Dhcp.c (lwip-1.4.1\src\core):              ("transaction id xid(%"X32_F")\n", xid));
Dns.c (lwip-1.4.1\src\core):      LWIP_DEBUGF(DNS_DEBUG, ("\n"));
Dns.c (lwip-1.4.1\src\core):            LWIP_DEBUGF(DNS_DEBUG, ("\n"));
Dns.c (lwip-1.4.1\src\core):  LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": use DNS entry %"U16_F"\n", name, (u16_t)(i)));
Etharp.c (lwip-1.4.1\src\netif):    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
Etharp.c (lwip-1.4.1\src\netif):        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
Etharp.c (lwip-1.4.1\src\netif):      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
Etharp.c (lwip-1.4.1\src\netif):        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
Etharp.c (lwip-1.4.1\src\netif):    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
Etharp.c (lwip-1.4.1\src\netif):      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
Etharp.c (lwip-1.4.1\src\netif):      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
Etharp.c (lwip-1.4.1\src\netif):  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
Etharp.c (lwip-1.4.1\src\netif):  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
Etharp.c (lwip-1.4.1\src\netif):  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_add_static_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
Etharp.c (lwip-1.4.1\src\netif):  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_remove_static_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
Etharp.c (lwip-1.4.1\src\netif):  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_ip_input: updating ETHARP table.\n"));
Etharp.c (lwip-1.4.1\src\netif):      ("etharp_arp_input: packet dropped, too short (%"S16_F"/%"S16_F")\n", p->tot_len,
Etharp.c (lwip-1.4.1\src\netif):      ("etharp_arp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
Etharp.c (lwip-1.4.1\src\netif):      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: we are unconfigured, ARP request ignored.\n"));
Etharp.c (lwip-1.4.1\src\netif):      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP request was not for us.\n"));
Etharp.c (lwip-1.4.1\src\netif):    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP unknown opcode type %"S16_F"\n", htons(hdr->opcode)));
Etharp.c (lwip-1.4.1\src\netif):      ("etharp_output: could not allocate room for header.\n"));
Etharp.c (lwip-1.4.1\src\netif):        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
Etharp.c (lwip-1.4.1\src\netif):        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
Etharp.c (lwip-1.4.1\src\netif):        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
Etharp.c (lwip-1.4.1\src\netif):      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
Etharp.c (lwip-1.4.1\src\netif):      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
Etharp.c (lwip-1.4.1\src\netif):      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
Etharp.c (lwip-1.4.1\src\netif):  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
Etharp.c (lwip-1.4.1\src\netif):  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
Etharp.c (lwip-1.4.1\src\netif):    ("ethernet_input: dest:%"X8_F":%"X8_F":%"X8_F":%"X8_F":%"X8_F":%"X8_F", src:%"X8_F":%"X8_F":%"X8_F":%"X8_F":%"X8_F":%"X8_F", type:%"X16_F"\n",
Fsm.c (lwip-1.4.1\src\netif\ppp):      FSMDEBUG(LOG_INFO, ("%s: Up event in state %d (%s)!\n",
Fsm.c (lwip-1.4.1\src\netif\ppp):  FSMDEBUG(LOG_INFO, ("%s: lowerup state %d (%s) -> %d (%s)\n",
Fsm.c (lwip-1.4.1\src\netif\ppp):      FSMDEBUG(LOG_INFO, ("%s: Down event in state %d (%s)!\n",
Fsm.c (lwip-1.4.1\src\netif\ppp):  FSMDEBUG(LOG_INFO, ("%s: lowerdown state %d (%s) -> %d (%s)\n",
Fsm.c (lwip-1.4.1\src\netif\ppp):  FSMDEBUG(LOG_INFO, ("%s: open state %d (%s) -> %d (%s)\n",
Fsm.c (lwip-1.4.1\src\netif\ppp):  FSMDEBUG(LOG_INFO, ("%s: close reason=%s state %d (%s) -> %d (%s)\n",
Fsm.c (lwip-1.4.1\src\netif\ppp):        FSMDEBUG(LOG_WARNING, ("%s: timeout sending Terminate-Request state=%d (%s)\n",
Fsm.c (lwip-1.4.1\src\netif\ppp):        FSMDEBUG(LOG_WARNING, ("%s: timeout resending Terminate-Requests state=%d (%s)\n",
Fsm.c (lwip-1.4.1\src\netif\ppp):        FSMDEBUG(LOG_WARNING, ("%s: timeout sending Config-Requests state=%d (%s)\n",
Fsm.c (lwip-1.4.1\src\netif\ppp):        FSMDEBUG(LOG_WARNING, ("%s: timeout resending Config-Request state=%d (%s)\n",
Fsm.c (lwip-1.4.1\src\netif\ppp):      FSMDEBUG(LOG_INFO, ("%s: UNHANDLED timeout event in state %d (%s)!\n",
Fsm.c (lwip-1.4.1\src\netif\ppp):    FSMDEBUG(LOG_WARNING, ("fsm_input(%x): Rcvd short header.\n",
Fsm.c (lwip-1.4.1\src\netif\ppp):    FSMDEBUG(LOG_INFO, ("fsm_input(%x): Rcvd illegal length.\n",
Fsm.c (lwip-1.4.1\src\netif\ppp):    FSMDEBUG(LOG_INFO, ("fsm_input(%x): Rcvd short packet.\n",
Fsm.c (lwip-1.4.1\src\netif\ppp):    FSMDEBUG(LOG_INFO, ("fsm_input(%x): Rcvd packet in state %d (%s).\n",
Fsm.c (lwip-1.4.1\src\netif\ppp):      FSMDEBUG(LOG_INFO, ("fsm_input(%s): default: \n", PROTO_NAME(f)));
Fsm.c (lwip-1.4.1\src\netif\ppp):  FSMDEBUG(LOG_INFO, ("fsm_rconfreq(%s): Rcvd id %d state=%d (%s)\n", 
Fsm.c (lwip-1.4.1\src\netif\ppp):  FSMDEBUG(LOG_INFO, ("fsm_rconfack(%s): Rcvd id %d state=%d (%s)\n",
Fsm.c (lwip-1.4.1\src\netif\ppp):    FSMDEBUG(LOG_INFO, ("%s: received bad Ack (length %d)\n",
Fsm.c (lwip-1.4.1\src\netif\ppp):  FSMDEBUG(LOG_INFO, ("fsm_rconfnakrej(%s): Rcvd id %d state=%d (%s)\n",
Fsm.c (lwip-1.4.1\src\netif\ppp):    FSMDEBUG(LOG_INFO, ("%s: received bad %s (length %d)\n",
Fsm.c (lwip-1.4.1\src\netif\ppp):  FSMDEBUG(LOG_INFO, ("fsm_rtermreq(%s): Rcvd id %d state=%d (%s)\n",
Fsm.c (lwip-1.4.1\src\netif\ppp):        FSMDEBUG(LOG_INFO, ("%s terminated by peer (%p)\n", PROTO_NAME(f), p));
Fsm.c (lwip-1.4.1\src\netif\ppp):  FSMDEBUG(LOG_INFO, ("fsm_rtermack(%s): state=%d (%s)\n", 
Fsm.c (lwip-1.4.1\src\netif\ppp):      FSMDEBUG(LOG_INFO, ("fsm_rtermack(%s): UNHANDLED state=%d (%s)!!!\n", 
Fsm.c (lwip-1.4.1\src\netif\ppp):  FSMDEBUG(LOG_INFO, ("fsm_rcoderej(%s): state=%d (%s)\n", 
Fsm.c (lwip-1.4.1\src\netif\ppp):    FSMDEBUG(LOG_INFO, ("fsm_rcoderej: Rcvd short Code-Reject packet!\n"));
Fsm.c (lwip-1.4.1\src\netif\ppp):      FSMDEBUG(LOG_INFO, ("%s: Protocol-reject event in state %d (%s)!\n",
Fsm.c (lwip-1.4.1\src\netif\ppp):  FSMDEBUG(LOG_INFO, ("fsm_sdata(%s): Sent code %d,%d,%d.\n",
gtAdvVct.c (user\switch\src\msapi):    DBG_INFO(("getDetailedAdvVCTResult Called.\n"));
gtAdvVct.c (user\switch\src\msapi):    DBG_INFO(("analizeAdvVCTNoCrosspairResult Called.\n"));
gtAdvVct.c (user\switch\src\msapi):    DBG_INFO(("analizeAdvVCTResult Called.\n"));
gtAdvVct.c (user\switch\src\msapi):    DBG_INFO(("runAdvCableTest_1181 Called.\n"));
gtAdvVct.c (user\switch\src\msapi):        DBG_INFO(("Writing to paged phy reg failed.\n"));
gtAdvVct.c (user\switch\src\msapi):            DBG_INFO(("Reading from paged phy reg failed.\n"));
gtAdvVct.c (user\switch\src\msapi):    DBG_INFO(("Page 8 of Reg20 after test : %0#x.\n", u16Data));
gtAdvVct.c (user\switch\src\msapi):                DBG_INFO(("Reading from paged phy reg failed.\n"));
gtAdvVct.c (user\switch\src\msapi):            DBG_INFO(("Unknown Advanced VCT Mode.\n"));
gtAdvVct.c (user\switch\src\msapi):        DBG_INFO(("Writing to paged phy reg failed.\n"));
gtAdvVct.c (user\switch\src\msapi):            DBG_INFO(("Reading paged phy reg failed.\n"));
gtAdvVct.c (user\switch\src\msapi):                DBG_INFO(("Writing to paged phy reg failed.\n"));
gtAdvVct.c (user\switch\src\msapi):        DBG_INFO(("Running advanced VCT failed.\n"));
gtAdvVct.c (user\switch\src\msapi):                DBG_INFO(("Writing to paged phy reg failed.\n"));
gtAdvVct.c (user\switch\src\msapi):                DBG_INFO(("Running advanced VCT failed.\n"));
gtAdvVct.c (user\switch\src\msapi):            DBG_INFO(("Writing to paged phy reg failed.\n"));
gtAdvVct.c (user\switch\src\msapi):    DBG_INFO(("runAdvCableTest_1116_set Called.\n"));
gtAdvVct.c (user\switch\src\msapi):        DBG_INFO(("Writing to paged phy reg failed.\n"));
gtAdvVct.c (user\switch\src\msapi):            DBG_INFO(("Reading from paged phy reg failed.\n"));
gtAdvVct.c (user\switch\src\msapi):    DBG_INFO(("runAdvCableTest_1116_get Called.\n"));
gtAdvVct.c (user\switch\src\msapi):        DBG_INFO(("Reading from paged phy reg failed.\n"));
gtAdvVct.c (user\switch\src\msapi):    DBG_INFO(("Page 5 of Reg23 after test : %0#x.\n", u16Data));
gtAdvVct.c (user\switch\src\msapi):            DBG_INFO(("Reading from paged phy reg failed.\n"));
gtAdvVct.c (user\switch\src\msapi):        DBG_INFO(("@@@@@ reg channel %d is %x \n", j, crossChannelReg[j]));
gtAdvVct.c (user\switch\src\msapi):    DBG_INFO(("runAdvCableTest_1116 Called.\n"));
gtAdvVct.c (user\switch\src\msapi):        DBG_INFO(("Running advanced VCT failed.\n"));
gtAdvVct.c (user\switch\src\msapi):        DBG_INFO(("Running advanced VCT failed.\n"));
gtAdvVct.c (user\switch\src\msapi):        DBG_INFO(("Running advanced VCT get failed.\n"));
gtAdvVct.c (user\switch\src\msapi):                DBG_INFO(("Unknown ADV VCT Mode.\n"));
gtAdvVct.c (user\switch\src\msapi):        DBG_INFO(("Reading paged phy reg failed.\n"));
gtAdvVct.c (user\switch\src\msapi):        DBG_INFO(("Writing to paged phy reg failed.\n"));
gtAdvVct.c (user\switch\src\msapi):            DBG_INFO(("Reading paged phy reg failed.\n"));
gtAdvVct.c (user\switch\src\msapi):                DBG_INFO(("Writing to paged phy reg failed.\n"));
gtAdvVct.c (user\switch\src\msapi):        DBG_INFO(("Running advanced VCT failed.\n"));
gtAdvVct.c (user\switch\src\msapi):                DBG_INFO(("Writing to paged phy reg failed.\n"));
gtAdvVct.c (user\switch\src\msapi):                DBG_INFO(("Running advanced VCT failed.\n"));
gtAdvVct.c (user\switch\src\msapi):            DBG_INFO(("Writing to paged phy reg failed.\n"));
gtAdvVct.c (user\switch\src\msapi):    DBG_INFO(("gvctGetCableDiag Called.\n"));
gtAdvVct.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtAdvVct.c (user\switch\src\msapi):            DBG_INFO(("Not able to disable PPUEn.\n"));
gtAdvVct.c (user\switch\src\msapi):        DBG_INFO(("Not able to reset the Phy.\n"));
gtAdvVct.c (user\switch\src\msapi):            DBG_INFO(("Not able to reset the Phy.\n"));
gtAdvVct.c (user\switch\src\msapi):                DBG_INFO(("Not able to reset the Phy.\n"));
gtAdvVct.c (user\switch\src\msapi):                DBG_INFO(("Not able to reset the Phy.\n"));
gtAdvVct.c (user\switch\src\msapi):            DBG_INFO(("Not able to reset the Phy.\n"));
gtAdvVct.c (user\switch\src\msapi):            DBG_INFO(("Not able to enable PPUEn.\n"));
gtAdvVct.c (user\switch\src\msapi):    DBG_INFO(("getDSPDistance Called.\n"));
gtAdvVct.c (user\switch\src\msapi):        DBG_INFO(("Reading length of MDI pair failed.\n"));
gtAdvVct.c (user\switch\src\msapi):    DBG_INFO(("getDSPDistance Called.\n"));
gtAdvVct.c (user\switch\src\msapi):        DBG_INFO(("Writing to paged phy reg failed.\n"));
gtAdvVct.c (user\switch\src\msapi):            DBG_INFO(("Ready bit of Cable length resiter is not set.\n"));
gtAdvVct.c (user\switch\src\msapi):            DBG_INFO(("Writing to paged phy reg failed.\n"));
gtAdvVct.c (user\switch\src\msapi):        DBG_INFO(("Reading length of MDI pair failed.\n"));
gtAdvVct.c (user\switch\src\msapi):    DBG_INFO(("getDSPDistance Called.\n"));
gtAdvVct.c (user\switch\src\msapi):        DBG_INFO(("Writing to paged phy reg failed.\n"));
gtAdvVct.c (user\switch\src\msapi):            DBG_INFO(("Ready bit of Cable length resiter is not set.\n"));
gtAdvVct.c (user\switch\src\msapi):            DBG_INFO(("Writing to paged phy reg failed.\n"));
gtAdvVct.c (user\switch\src\msapi):        DBG_INFO(("Reading length of MDI pair failed.\n"));
gtAdvVct.c (user\switch\src\msapi):            DBG_INFO(("getDSPDistance failed.\n"));
gtAdvVct.c (user\switch\src\msapi):        DBG_INFO(("Reading from paged phy reg failed.\n"));
gtAdvVct.c (user\switch\src\msapi):        DBG_INFO(("Valid Bit is not set (%0#x).\n", u16Data));
gtAdvVct.c (user\switch\src\msapi):        DBG_INFO(("Reading from paged phy reg failed.\n"));
gtAdvVct.c (user\switch\src\msapi):                    DBG_INFO(("getDSPDistance failed.\n"));
gtAdvVct.c (user\switch\src\msapi):                    DBG_INFO(("getDSPDistance failed.\n"));
gtAdvVct.c (user\switch\src\msapi):                    DBG_INFO(("getDSPDistance failed.\n"));
gtAdvVct.c (user\switch\src\msapi):        DBG_INFO(("Reading from paged phy reg failed.\n"));
gtAdvVct.c (user\switch\src\msapi):        DBG_INFO(("Valid Bit is not set (%0#x).\n", u16Data));
gtAdvVct.c (user\switch\src\msapi):        DBG_INFO(("Reading from paged phy reg failed.\n"));
gtAdvVct.c (user\switch\src\msapi):    DBG_INFO(("gvctGetAdvExtendedStatus Called.\n"));
gtAdvVct.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtAdvVct.c (user\switch\src\msapi):            DBG_INFO(("Not able to disable PPUEn.\n"));
gtAdvVct.c (user\switch\src\msapi):                DBG_INFO(("Getting Extanded Cable Status failed.\n"));
gtAdvVct.c (user\switch\src\msapi):                DBG_INFO(("Getting Extanded Cable Status failed.\n"));
gtAdvVct_mad.c (user\switch\src\msapi):    DBG_INFO(("gvctGetCableDiag_mad Called.\n"));
gtAdvVct_mad.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtAdvVct_mad.c (user\switch\src\msapi):            DBG_INFO(("Not able to disable PPUEn.\n"));
gtAdvVct_mad.c (user\switch\src\msapi):      DBG_INFO(("Failed to run mdDiagGetAdvCableStatus.\n"));
gtAdvVct_mad.c (user\switch\src\msapi):            DBG_INFO(("Not able to enable PPUEn.\n"));
gtAdvVct_mad.c (user\switch\src\msapi):    DBG_INFO(("gvctGetAdvExtendedStatus_mad Called.\n"));
gtAdvVct_mad.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtAdvVct_mad.c (user\switch\src\msapi):            DBG_INFO(("Not able to disable PPUEn.\n"));
gtAdvVct_mad.c (user\switch\src\msapi):      DBG_INFO(("Failed to run mdDiagGet1000BTExtendedStatus.\n"));
gtAdvVct_mad.c (user\switch\src\msapi):           DBG_INFO(("Not able to enable PPUEn.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gavbGetReg Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gavbSetReg Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gavbGetPriority Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI register.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gavbSetPriority Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI register.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed writing TAI register.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gavbGetMidPriEn Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading medium enable.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gavbSetMidPriEn Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed writing medium enable.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gavbGetAVBHiLimit Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gavbSetAVBHiLimit Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gavbGetPtpExtClk Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gavbSetPtpExtClk Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gavbGetRecClkSel Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gavbSetRecClkSel Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gavbGetAvbOuiBytes Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gavbSetAvbOuiBytes Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gavbGetAvbMode Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gavbSetAvbMode Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gavbGetAvbOverride Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed AVB operation.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gavbSetAvbOverride Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed AVB operation.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed AVB operation.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gavbGetFilterBadAvb Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed AVB operation.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gavbSetFilterBadAvb Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed AVB operation.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed AVB operation.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gavbGetAvbTunnel Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed AVB operation.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("GT_STATUS gavbGetAvbTunnel Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed AVB operation.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed AVB operation.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gavbGetAvbFramePolicy Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed AVB operation.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gavbSetAvbFramePolicy Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed AVB operation.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed AVB operation.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gavbGetAvbPolicy Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed AVB operation.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("GT_STATUS gavbSetAvbPolicy Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed AVB operation.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavSetPortQpriTimeAwareBlock Called.\n"));
gtAVB.c (user\switch\src\msapi):      DBG_INFO(("Failed reading block enable for port %d queue %d.\n",port,queue));
gtAVB.c (user\switch\src\msapi):      DBG_INFO(("Failed writing QTS block enable for port %d queue %d.\n",port,queue));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavGetPortQpriTimeAwareBlock Called.\n"));
gtAVB.c (user\switch\src\msapi):      DBG_INFO(("Failed reading block enable for port %d queue %d.\n",port,queue));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavSetPortQpriXQTSToken Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed writing QTS token for port %d queue %d.\n", port, queue));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavGetPortQpriXQTSToken Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading QTS token for port %d queue %d.\n", port, queue));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavSetPortQpriXBurstBytes Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed writing Burst bytes for port %d queue %d.\n", port, queue));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavgetPortQpriXBurstBytes Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading Burst bytes for port %d queue %d.\n", port, queue));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavSetPortQpriXRate Called.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavGetPortQpriXRate Called.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavSetPortQpriXHiLimit Called.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavGetPortQpriXHiLimit Called.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavSetPortQavEnable Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed writing QAV enable for port %d.\n", port));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavGetPortQavEnable Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading QAV enable for port %d.\n", port));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavGetPortCurXQToken Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading QTS token for port %d queue %d.\n", port, queue));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading QTS token for port %d queue %d.\n", port, queue));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavGetPortXQHeadPacket Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading QTS token for port %d queue %d.\n", port, queue));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavSetGlobalAdminMGMT Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading QAV global config admin MGMT.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed writing QAV global config admin MGMT.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavGetGlobalAdminMGMT Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading QAV global config admin MGMT.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavSetGlobalDisAvbTrans Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading QAV global config admin MGMT.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed writing QAV global config admin MGMT.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavGetGlobalDisAvbTrans Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading QAV global config admin MGMT.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavSetGlobalIsoPtrThreshold Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading QAV global config Isochronous Queue Pointer Threshold.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed writing QAV global config Isochronous Queue Pointer Threshold.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavGetGlobalIsoPtrThreshold Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading Isochronous Queue Pointer Threshold.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavSetGlobalDisQSD4MGMT Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading Disable Queue Scheduler Delay for MGMT frames.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed writing Disable Queue Scheduler Delay for MGMT frames.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavGetGlobalDisQSD4MGMT Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading Disable Queue Scheduler Delay for MGMT frames.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavSetGlobalDisQSD Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading Disable Queue Scheduler Delay for MGMT frames.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed writing Disable Queue Scheduler Delay for MGMT frames.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavGetGlobalDisQSD Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading Disable Queue Scheduler Delay for MGMT frames.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavSetGlobalDisEnQDelay Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading Disable Queue Scheduler Delay for MGMT frames.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed writing Disable Queue Scheduler Delay for MGMT frames.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavGetGlobalDisEnQDelay Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading Disable Queue Scheduler Delay for MGMT frames.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavSetGlobalInterrupt Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading Interrupt enable status.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed writing Interrupt enable status.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavGetGlobalInterrupt Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading Interrupt status.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavGetGlobalIsoInterruptPort Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading Isochronous interrupt port..\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavSetGlobalIsoDelayLmt Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading Isochronous queue delay Limit.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed writing Isochronous queue delay Limit.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavGetGlobalIsoDelayLmt Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading Isochronous queue delay Limit.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavSetGlobalIsoMonEn Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading Isochronous monitor enable.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed writing Isochronous monitor enable.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavGetGlobalIsoMonEn Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading Isochronous monitor enable.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavSetGlobalIsoMonPort Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading Isochronous monitoring port.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed writing Isochronous monitoring port.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavGetGlobalIsoMonPort Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading Isochronous monitoring port.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavSetGlobalIsoHiDisCtr Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading Isochronous hi queue discard counter..\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed writing Isochronous hi queue discard counter..\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavGetGlobalIsoHiDisCtr Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading Isochronous hi queue discard counter.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavSetGlobalIsoLoDisCtr Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading Isochronous lo queue discard counter.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed writing Isochronous lo queue discard counter.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavGetGlobalIsoLoDisCtr Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading Isochronous lo queue discard counter.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavGetReg Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqavSetReg Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqbvGetReg Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqbvSetReg Called.\n"));
gtAVB.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqbvPortPointDataSet Called.\n"));
gtAVB.c (user\switch\src\msapi):     DBG_INFO(("Failed.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqbvPortPointDataGet Called.\n"));
gtAVB.c (user\switch\src\msapi):	   DBG_INFO(("Failed.\n"));
gtAVB.c (user\switch\src\msapi):               DBG_INFO(("Failed.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqbvSetPortDelay Called.\n"));
gtAVB.c (user\switch\src\msapi):     DBG_INFO(("Failed.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqbvGetPortDelay Called.\n"));
gtAVB.c (user\switch\src\msapi):     DBG_INFO(("Failed.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqbvSetPortWindowTime Called.\n"));
gtAVB.c (user\switch\src\msapi):     DBG_INFO(("Failed.\n"));
gtAVB.c (user\switch\src\msapi):     DBG_INFO(("Failed.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqbvGetPortWindowTime Called.\n"));
gtAVB.c (user\switch\src\msapi):     DBG_INFO(("Failed.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqbvSetPortGuardBand Called.\n"));
gtAVB.c (user\switch\src\msapi):     DBG_INFO(("Failed.\n"));
gtAVB.c (user\switch\src\msapi):     DBG_INFO(("Failed.\n"));
gtAVB.c (user\switch\src\msapi):    DBG_INFO(("gqbvGetPortGuardBand Called.\n"));
gtAVB.c (user\switch\src\msapi):     DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbSetPortAtuLearnLimit Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbGetPortAtuLearnLimit Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbGetPortAtuLearnCnt Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbGetAtuAllCount Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):                DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbGetAtuAllCountInDBNum Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbGetAtuDynamicCountInDBNum Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbSetAtuSize Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbGetAgingTimeRange Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbGetAgingTimeout Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbSetAgingTimeout Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gprtGetLearn2All Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gprtSetLearn2All Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbGetMacAvb Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gprtSetMacAvb Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbGetAtuDynamicCount Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):                DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbGetAtuEntryFirst Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed (atuOperationPerform returned GT_FAIL).\n"));
gtBrgFdb.c (user\switch\src\msapi):            DBG_INFO(("Failed (Invalid Mac).\n"));
gtBrgFdb.c (user\switch\src\msapi):            DBG_INFO(("Failed (Invalid Mac).\n"));
gtBrgFdb.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbGetAtuEntryNext Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed (atuOperationPerform returned GT_FAIL).\n"));
gtBrgFdb.c (user\switch\src\msapi):            DBG_INFO(("Failed (Invalid Mac).\n"));
gtBrgFdb.c (user\switch\src\msapi):            DBG_INFO(("Failed (Invalid Mac).\n"));
gtBrgFdb.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbFindAtuMacEntry Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Address should not be all zeros.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):            DBG_INFO(("Failed (Broadcast addr is not valid).\n"));
gtBrgFdb.c (user\switch\src\msapi):            DBG_INFO(("Failed (Invalid Mac).\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbFlush Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbFlushInDB Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbFush: dev=%x, dev->atuRegsSem=%d \n",dev, dev->atuRegsSem));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbMove Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbMoveInDB Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbRemovePort Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbRemovePortInDB Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbAddMacEntry Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Entry State should not be ZERO.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbDelMacEntry Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbDelAtuEntry Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbLearnEnable Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):                DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbGetLearnEnable Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbGetLearnAVB Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbSetLearnAVB Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbSetATUTestMode Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbGetATUTestMode Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbSetMacFPri Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gfdbGetMacFPri Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("gatuGetViolation Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("ERROR to read ATU OPERATION Register.\n"));
gtBrgFdb.c (user\switch\src\msapi):        DBG_INFO(("Failed (atuOperationPerform returned GT_FAIL).\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgFdb.c (user\switch\src\msapi):    DBG_INFO(("atuGetStats Called.\n"));
gtBrgFdb.c (user\switch\src\msapi):               DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):               DBG_INFO(("Failed.\n"));
gtBrgFdb.c (user\switch\src\msapi):               DBG_INFO(("Failed.\n"));
gtBrgStp.c (user\switch\src\msapi):            DBG_INFO(("gsysGetRsvd2CpuEnables failed.\n"));
gtBrgStp.c (user\switch\src\msapi):            DBG_INFO(("gsysSetRsvd2CpuEnables failed.\n"));
gtBrgStp.c (user\switch\src\msapi):        DBG_INFO(("gsysSetMGMTPri failed.\n"));
gtBrgStp.c (user\switch\src\msapi):        DBG_INFO(("gsysGetRsvd2CpuEnables failed.\n"));
gtBrgStp.c (user\switch\src\msapi):        DBG_INFO(("gsysSetRsvd2CpuEnables failed.\n"));
gtBrgStp.c (user\switch\src\msapi):        DBG_INFO(("gsysSetRsvd2Cpu failed.\n"));
gtBrgStp.c (user\switch\src\msapi):    DBG_INFO(("gstpSetMode Called.\n"));
gtBrgStp.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgStp.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtBrgStp.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtBrgStp.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgStp.c (user\switch\src\msapi):    DBG_INFO(("gstpSetPortState Called.\n"));
gtBrgStp.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgStp.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgStp.c (user\switch\src\msapi):    DBG_INFO(("gstpGetPortState Called.\n"));
gtBrgStp.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgStp.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgStu.c (user\switch\src\msapi):    DBG_INFO(("gstuGetEntryCount Called.\n"));
gtBrgStu.c (user\switch\src\msapi):            DBG_INFO(("Failed (stuOperationPerform returned GT_FAIL).\n"));
gtBrgStu.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgStu.c (user\switch\src\msapi):    DBG_INFO(("gstuGetEntryFirst Called.\n"));
gtBrgStu.c (user\switch\src\msapi):        DBG_INFO(("Failed (stuOperationPerform returned GT_FAIL).\n"));
gtBrgStu.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgStu.c (user\switch\src\msapi):    DBG_INFO(("gstuGetEntryNext Called.\n"));
gtBrgStu.c (user\switch\src\msapi):        DBG_INFO(("Failed (stuOperationPerform returned GT_FAIL).\n"));
gtBrgStu.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgStu.c (user\switch\src\msapi):    DBG_INFO(("gstuFindSidEntry Called.\n"));
gtBrgStu.c (user\switch\src\msapi):        DBG_INFO(("Failed (stuOperationPerform returned GT_FAIL).\n"));
gtBrgStu.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgStu.c (user\switch\src\msapi):    DBG_INFO(("gstuAddEntry Called.\n"));
gtBrgStu.c (user\switch\src\msapi):        DBG_INFO(("Failed (stuOperationPerform returned GT_FAIL).\n"));
gtBrgStu.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgStu.c (user\switch\src\msapi):    DBG_INFO(("gstuDelEntry Called.\n"));
gtBrgStu.c (user\switch\src\msapi):        DBG_INFO(("Failed (stuOperationPerform returned GT_FAIL).\n"));
gtBrgStu.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("gprtSetEgressMode Called.\n"));
gtBrgVlan.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtBrgVlan.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("gprtGetEgressMode Called.\n"));
gtBrgVlan.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("gprtSetVlanTunnel Called.\n"));
gtBrgVlan.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("gprtGetVlanTunnel Called.\n"));
gtBrgVlan.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVlan.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("gvlnSetPortVlanPorts Called.\n"));
gtBrgVlan.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVlan.c (user\switch\src\msapi):        DBG_INFO(("Failed (PortsLen Too Big).\n"));
gtBrgVlan.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("gvlnGetPortVlanPorts Called.\n"));
gtBrgVlan.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVlan.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("gvlnSetPortUserPriLsb Called.\n"));
gtBrgVlan.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("gvlnGetPortUserPriLsb Called.\n"));
gtBrgVlan.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVlan.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("gvlnSetPortVid Called.\n"));
gtBrgVlan.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("gvlnGetPortVid Called.\n"));
gtBrgVlan.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVlan.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("gvlnSetPortVlanDBNum Called.\n"));
gtBrgVlan.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("gvlnGetPortVlanDBNum Called.\n"));
gtBrgVlan.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVlan.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("gvlnSetPortVlanDot1qMode Called.\n"));
gtBrgVlan.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("gvlnGetPortVlanDot1qMode Called.\n"));
gtBrgVlan.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVlan.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("gvlnSetPortForceDefaultVID Called.\n"));
gtBrgVlan.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("gvlnGetPortVlanDot1qMode Called.\n"));
gtBrgVlan.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVlan.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("gvlnSetForceMap Called.\n"));
gtBrgVlan.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("gvlnGetForceMap Called.\n"));
gtBrgVlan.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("gvlnSetNoEgrPolicy Called.\n"));
gtBrgVlan.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("gvlnGetNoEgrPolicy Called.\n"));
gtBrgVlan.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVlan.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVtu.c (user\switch\src\msapi):                DBG_INFO(("Unknown Tag (%#x) from Device !!!.\n",tag));
gtBrgVtu.c (user\switch\src\msapi):                DBG_INFO(("Unknown Tag (%#x) from App. !!!.\n",tag));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("gvtuGetEntryCount Called.\n"));
gtBrgVtu.c (user\switch\src\msapi):            DBG_INFO(("Failed (vtuOperationPerform returned GT_FAIL).\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("gvtuGetEntryFirst Called.\n"));
gtBrgVtu.c (user\switch\src\msapi):        DBG_INFO(("Failed (vtuOperationPerform returned GT_FAIL).\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("gvtuGetEntryNext Called.\n"));
gtBrgVtu.c (user\switch\src\msapi):        DBG_INFO(("Failed (vtuOperationPerform returned GT_FAIL).\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("gvtuFindVidEntry Called.\n"));
gtBrgVtu.c (user\switch\src\msapi):        DBG_INFO(("Failed (vtuOperationPerform returned GT_FAIL).\n"));
gtBrgVtu.c (user\switch\src\msapi):          DBG_INFO(("Failed.\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("gvtuFlush Called.\n"));
gtBrgVtu.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("gvtuAddEntry Called.\n"));
gtBrgVtu.c (user\switch\src\msapi):        DBG_INFO(("Failed (vtuOperationPerform returned GT_FAIL).\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("gvtuDelEntry Called.\n"));
gtBrgVtu.c (user\switch\src\msapi):        DBG_INFO(("Failed (vtuOperationPerform returned GT_FAIL).\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("gvtuGetViolation Called.\n"));
gtBrgVtu.c (user\switch\src\msapi):        DBG_INFO(("ERROR to read VTU OPERATION Register.\n"));
gtBrgVtu.c (user\switch\src\msapi):        DBG_INFO(("Failed (vtuOperationPerform returned GT_FAIL).\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("gvtuGetViolation2 Called.\n"));
gtBrgVtu.c (user\switch\src\msapi):        DBG_INFO(("ERROR to read VTU OPERATION Register.\n"));
gtBrgVtu.c (user\switch\src\msapi):        DBG_INFO(("Failed (vtuOperationPerform returned GT_FAIL).\n"));
gtBrgVtu.c (user\switch\src\msapi):        DBG_INFO(("ERROR to read VTU OPERATION Register.\n"));
gtBrgVtu.c (user\switch\src\msapi):        DBG_INFO(("ERROR to read VTU OPERATION Register.\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("gvtuGetViolation3 Called.\n"));
gtBrgVtu.c (user\switch\src\msapi):        DBG_INFO(("ERROR to read VTU OPERATION Register.\n"));
gtBrgVtu.c (user\switch\src\msapi):        DBG_INFO(("Failed (vtuOperationPerform returned GT_FAIL).\n"));
gtBrgVtu.c (user\switch\src\msapi):        DBG_INFO(("ERROR to read VTU OPERATION Register.\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("gvtuGetViolation4 Called.\n"));
gtBrgVtu.c (user\switch\src\msapi):        DBG_INFO(("ERROR to read VTU OPERATION Register.\n"));
gtBrgVtu.c (user\switch\src\msapi):        DBG_INFO(("Failed (vtuOperationPerform returned GT_FAIL).\n"));
gtBrgVtu.c (user\switch\src\msapi):        DBG_INFO(("ERROR to read VTU OPERATION Register.\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("gvtuSetVTUControl Called.\n"));
gtBrgVtu.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("gvtuGetVTUControl Called.\n"));
gtBrgVtu.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("gvtuSetVTUMode Called.\n"));
gtBrgVtu.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("gvtuGetVTUMode Called.\n"));
gtBrgVtu.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("gatuGetATUbin Called.\n"));
gtBrgVtu.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("gvtuSetVTUPage Called.\n"));
gtBrgVtu.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("gvtuGetVTUPage Called.\n"));
gtBrgVtu.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtBrgVtu.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtCCPVT.c (user\switch\src\msapi):    DBG_INFO(("gpvtInitialize Called.\n"));
gtCCPVT.c (user\switch\src\msapi):        DBG_INFO(("Failed (pvtOperationPerform returned GT_FAIL).\n"));
gtCCPVT.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtCCPVT.c (user\switch\src\msapi):    DBG_INFO(("gpvtWritePVTData Called.\n"));
gtCCPVT.c (user\switch\src\msapi):        DBG_INFO(("Failed (pvtOperationPerform returned GT_FAIL).\n"));
gtCCPVT.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtCCPVT.c (user\switch\src\msapi):    DBG_INFO(("gpvtReadPVTData Called.\n"));
gtCCPVT.c (user\switch\src\msapi):        DBG_INFO(("Failed (pvtOperationPerform returned GT_FAIL).\n"));
gtCCPVT.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtDrvConfig.c (user\switch\src\driver):        DBG_INFO(("Not able to read Phy Register.\n"));
gtDrvConfig.c (user\switch\src\driver):        DBG_INFO(("Not able to read Phy Register.\n"));
gtDrvConfig.c (user\switch\src\driver):        DBG_INFO(("cannot find Marvell Phy.\n"));
gtDrvConfig.c (user\switch\src\driver):        DBG_INFO(("cannot find Marvell Phy.\n"));
gtDrvConfig.c (user\switch\src\driver):                DBG_INFO(("Not able to read Phy Register.\n"));
gtDrvConfig.c (user\switch\src\driver):                    DBG_INFO(("Not able to write Phy Register.\n"));
gtDrvConfig.c (user\switch\src\driver):                DBG_INFO(("Not able to read Phy Register.\n"));
gtDrvConfig.c (user\switch\src\driver):                    DBG_INFO(("Not able to write Phy Register.\n"));
gtDrvConfig.c (user\switch\src\driver):        DBG_INFO(("Not able to read Phy Register.\n"));
gtDrvConfig.c (user\switch\src\driver):                    DBG_INFO(("Not able to write Phy Register.\n"));
gtDrvConfig.c (user\switch\src\driver):                    DBG_INFO(("Not able to write Phy Register.\n"));
gtDrvConfig.c (user\switch\src\driver):        DBG_INFO(("Not able to write Phy Register.\n"));
gtDrvConfig.c (user\switch\src\driver):            DBG_INFO(("Not able to read Phy Reg(port:%d,offset:%d).\n",hwPort,15));
gtEvents.c (user\switch\src\msapi):    DBG_INFO(("eventGetActive Called.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtEvents.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtEvents.c (user\switch\src\msapi):    DBG_INFO(("eventSetActive Called.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("Invalid event type.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtEvents.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtEvents.c (user\switch\src\msapi):    DBG_INFO(("gvtuGetIntStatus Called.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtEvents.c (user\switch\src\msapi):    DBG_INFO(("gatuGetIntStatus Called.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtEvents.c (user\switch\src\msapi):    DBG_INFO(("geventGetDevIntStatus Called.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtEvents.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtEvents.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtEvents.c (user\switch\src\msapi):    DBG_INFO(("geventSetAgeIntEn Called.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtEvents.c (user\switch\src\msapi):    DBG_INFO(("geventGetAgeIntEn Called.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtEvents.c (user\switch\src\msapi):    DBG_INFO(("geventSetAgeOutIntEn Called.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtEvents.c (user\switch\src\msapi):    DBG_INFO(("geventGetAgeOutIntEn Called.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtEvents.c (user\switch\src\msapi):    DBG_INFO(("geventSetOverLimitInt Called.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtEvents.c (user\switch\src\msapi):    DBG_INFO(("geventGetOverLimitInt Called.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtEvents.c (user\switch\src\msapi):    DBG_INFO(("geventGetPortAtuLimitReached Called.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtEvents.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtEvents.c (user\switch\src\msapi):    DBG_INFO(("eventSetDevInt Called.\n"));
gtEvents.c (user\switch\src\msapi):            DBG_INFO(("GT_BAD_PARAM: PHY Int not supported.\n"));
gtEvents.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtEvents.c (user\switch\src\msapi):    DBG_INFO(("gwdSetEvent Called.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtEvents.c (user\switch\src\msapi):    DBG_INFO(("gwdSetSWResetOnWD Called.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtEvents.c (user\switch\src\msapi):    DBG_INFO(("gwdGetSWResetOnWD Called.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtEvents.c (user\switch\src\msapi):    DBG_INFO(("gwdGetHistory Called.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtEvents.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtEvents.c (user\switch\src\msapi):    DBG_INFO(("gwdSetRMUTimeOut Called.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtEvents.c (user\switch\src\msapi):    DBG_INFO(("gwdGetRMUTimeOut Called.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtEvents.c (user\switch\src\msapi):    DBG_INFO(("gwdGetEgressWDEvent Called.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtEvents.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtHiddenReg.c (user\switch\src\msapi):    DBG_INFO(("hiddenRegOperationPerform Called.\n"));
gtHiddenReg.c (user\switch\src\msapi):    DBG_INFO(("gsysReadHiddenReg Called.\n"));
gtHiddenReg.c (user\switch\src\msapi):    DBG_INFO(("gsysReadHiddenReg_inc_port Called.\n"));
gtHiddenReg.c (user\switch\src\msapi):    DBG_INFO(("gsysReadHiddenReg_inc_reg Called.\n"));
gtHiddenReg.c (user\switch\src\msapi):    DBG_INFO(("gsysWriteHiddenReg Called.\n"));
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("fOff %d, fLen %d, data 0x%x.\n",fieldOffset,fieldLength,*data));
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("fieldOff %d, fieldLen %d, data 0x%x.\n",fieldOffset,
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("fOff %d, fLen %d, data 0x%x.\n",fieldOffset,fieldLength,*data));
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("fieldOff %d, fieldLen %d, data 0x%x.\n",fieldOffset,
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("data 0x%x.\n",*data));
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("data 0x%x.\n",data));
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("fOff %d, fLen %d, data 0x%x.\n",fieldOffset,fieldLength,*data));
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("fieldOff %d, fieldLen %d, data 0x%x.\n",fieldOffset,
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("mask %d, data 0x%x.\n",mask,data));
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("data 0x%x.\n",*data));
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("data 0x%x.\n",data));
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("fOff %d, fLen %d, data 0x%x.\n",fieldOffset,fieldLength,*data));
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("fieldOff %d, fieldLen %d, data 0x%x.\n",fieldOffset,
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("data 0x%x.\n",*data));
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("data 0x%x.\n",data));
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("fOff %d, fLen %d, data 0x%x.\n",fieldOffset,fieldLength,*data));
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("fieldOff %d, fieldLen %d, data 0x%x.\n",fieldOffset,
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("mask %d, data 0x%x.\n",mask,data));
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("data 0x%x.\n",*data));
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("data 0x%x.\n",data));
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("fOff %d, fLen %d, data 0x%x.\n",fieldOffset,fieldLength,*data));
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("fieldOff %d, fieldLen %d, data 0x%x.\n",fieldOffset,
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("mask %d, data 0x%x.\n",mask,data));
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("Read from phy(0x%x) register:dev=%p, regAddr 0x%x, data 0x%x.\n",
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("Write to phy(0x%x) register: regAddr 0x%x, data 0x%x.\n",
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("OK.\n"));
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("OK.\n"));
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("data 0x%x.\n",data));
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("data 0x%x.\n",data));
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("data 0x%x.\n",*data));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysSetUseIpMappingTable Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysGetUseIpMappingTable Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysSetIpMappingPrio Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysGetIpMappingPrio Called.\n"));
gtMisc.c (user\switch\src\msapi):               DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("eepromOperationPerform Called.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysReadEeprom Called.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysWriteEeprom Called.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysRestartEeprom Called.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysHaltEeprom Called.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysGetStEeprom Called.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysSetScratchMiscCtrl Called.\n"));
gtMisc.c (user\switch\src\msapi):     DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysGetScratchMiscCtrl Called.\n"));
gtMisc.c (user\switch\src\msapi):	   DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):               DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysSetScratchBits Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysGetScratchBits Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysSetGpioConfigMod Called.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("GpioConfigMod is read only now.\n"));
gtMisc.c (user\switch\src\msapi):		 DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):		 DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysGetGpioConfigMod Called.\n"));
gtMisc.c (user\switch\src\msapi):			 DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):			 DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysSetGpioPinControl Called.\n"));
gtMisc.c (user\switch\src\msapi):      DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):      DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysGetGpioPinControl Called.\n"));
gtMisc.c (user\switch\src\msapi):      DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):  DBG_INFO(("gsysSetGpioDirection Called.\n"));
gtMisc.c (user\switch\src\msapi):       DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):       DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):       DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):  DBG_INFO(("gsysGetGpioDirection Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysSetGpioSMI Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysGetGpioSMI Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):  DBG_INFO(("gsysSetGpioData Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):  DBG_INFO(("gsysGetGpioData Called.\n"));
gtMisc.c (user\switch\src\msapi):      DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):      DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):      DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysGetConfigData Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysSetSyncETai Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysGetSyncETai Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysSetP6_Clock Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysGetP6_Clock Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysSetP5_Clock Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysGetP6_Clock Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysSetEEPROM Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysGetEEPROM Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):  DBG_INFO(("gsysSetGpioxPortStallVect Called.\n"));
gtMisc.c (user\switch\src\msapi):     DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):     DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):  DBG_INFO(("gsysGetGpioxPortStallVect Called.\n"));
gtMisc.c (user\switch\src\msapi):     DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):     DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):  DBG_INFO(("gsysClearxEEERxStatusCounter Called.\n"));
gtMisc.c (user\switch\src\msapi):     DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):  DBG_INFO(("gsysGetxEEERxStatusCounter Called.\n"));
gtMisc.c (user\switch\src\msapi):     DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):  DBG_INFO(("gsysGetxEEETrStatusCounter Called.\n"));
gtMisc.c (user\switch\src\msapi):     DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):  DBG_INFO(("gsysClearxEEETrStatusCounter Called.\n"));
gtMisc.c (user\switch\src\msapi):     DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):  DBG_INFO(("gsysGetxEEERxStates Called.\n"));
gtMisc.c (user\switch\src\msapi):     DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysSetPowerCtrl Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysGetPowerCtrl Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysSetWakeTimeGE Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysGetWakeTimeGE Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysSetAsrtTime Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysGetAsrtTime Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysSetWakeTimeFE Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysGetWakeTimeFE Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysSetTxIdleTime Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysGetTxIdleTime Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysSetEEETimeRate Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysGetEEETimeRate Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysSetPowerMonitorCtrl Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysGetPowerMonitorCtrl Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysSetPowerMonitorThreshold Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysGetPowerMonitorThreshold Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysSetVoltageRegulatCtrl Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysGetVoltageRegulatCtrl Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysSetVoltageRegulatCtrl_2 Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysGetVoltageRegulatCtrl_2 Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysSetVoltageRegulatTest Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysGetVoltageRegulatTest Called.\n"));
gtMisc.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysGlobal2PointDataSet Called.\n"));
gtMisc.c (user\switch\src\msapi):     DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysGlobal2PointDataGet Called.\n"));
gtMisc.c (user\switch\src\msapi):	   DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):               DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gdevSetScratchMiscCtrl Called.\n"));
gtMisc.c (user\switch\src\msapi):	   DBG_INFO(("gsysGlobal2PointDataSet Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gdevGetScratchMiscCtrl Called.\n"));
gtMisc.c (user\switch\src\msapi):	   DBG_INFO(("gsysGlobal2PointDataGet Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gdevSetEnergeManagementCtrl Called.\n"));
gtMisc.c (user\switch\src\msapi):	   DBG_INFO(("gsysGlobal2PointDataSet Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gdevGetEnergeManagementCtrl Called.\n"));
gtMisc.c (user\switch\src\msapi):	   DBG_INFO(("gsysGlobal2PointDataGet Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gdevSetImpCommCtrl Called.\n"));
gtMisc.c (user\switch\src\msapi):	   DBG_INFO(("gsysGlobal2PointDataSet Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gdevGetImpCommCtrl Called.\n"));
gtMisc.c (user\switch\src\msapi):	   DBG_INFO(("gsysGlobal2PointDataGet Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gdevSetWatchDogCtrl Called.\n"));
gtMisc.c (user\switch\src\msapi):	   DBG_INFO(("gsysGlobal2PointDataSet Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gdevGetWatchDogCtrl Called.\n"));
gtMisc.c (user\switch\src\msapi):	   DBG_INFO(("gsysGlobal2PointDataGet Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gdevSetQosWeightCtrl Called.\n"));
gtMisc.c (user\switch\src\msapi):	   DBG_INFO(("gsysGlobal2PointDataSet Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gdevGetQosWeightCtrl Called.\n"));
gtMisc.c (user\switch\src\msapi):	   DBG_INFO(("gsysGlobal2PointDataGet Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysGlobal1PointDataSet Called.\n"));
gtMisc.c (user\switch\src\msapi):     DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysGlobal1PointDataGet Called.\n"));
gtMisc.c (user\switch\src\msapi):	   DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):               DBG_INFO(("Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysSetMonitorMgmtCtrl Called.\n"));
gtMisc.c (user\switch\src\msapi):	   DBG_INFO(("gsysGlobalPointDataSet Failed.\n"));
gtMisc.c (user\switch\src\msapi):    DBG_INFO(("gsysGetMonitorMgmtCtrl Called.\n"));
gtMisc.c (user\switch\src\msapi):	   DBG_INFO(("gsysGlobal1PointDataGet Failed.\n"));
gtPage2Access.c (user\switch\src\msapi):    DBG_INFO(("gtP2SetAccessRMUPage2 Called.\n"));
gtPage2Access.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPage2Access.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPage2Access.c (user\switch\src\msapi):    DBG_INFO(("gtP2GetAccessRMUPage2 Called.\n"));
gtPage2Access.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPage2Access.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPage2Access.c (user\switch\src\msapi):    DBG_INFO(("gstatsPg2GetPortCounter Called.\n"));
gtPage2Access.c (user\switch\src\msapi):        DBG_INFO(("Failed (gtP2SetAccessRMUPage2 returned GT_FAIL).\n"));
gtPage2Access.c (user\switch\src\msapi):        DBG_INFO(("Failed (statsOperationPerform returned GT_FAIL).\n"));
gtPage2Access.c (user\switch\src\msapi):        DBG_INFO(("Failed (gtP2SetAccessRMUPage2 returned GT_FAIL).\n"));
gtPage2Access.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPage2Access.c (user\switch\src\msapi):    DBG_INFO(("gstatsPg2GetPortCounterClear Called.\n"));
gtPage2Access.c (user\switch\src\msapi):        DBG_INFO(("Failed (gtP2SetAccessRMUPage2 returned GT_FAIL).\n"));
gtPage2Access.c (user\switch\src\msapi):        DBG_INFO(("Failed (statsOperationPerform returned GT_FAIL).\n"));
gtPage2Access.c (user\switch\src\msapi):        DBG_INFO(("Failed (gtP2SetAccessRMUPage2 returned GT_FAIL).\n"));
gtPage2Access.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPage2Access.c (user\switch\src\msapi):    DBG_INFO(("gstatsPg2GetPortAllCounters Called.\n"));
gtPage2Access.c (user\switch\src\msapi):        DBG_INFO(("Failed (gtP2SetAccessRMUPage2 returned GT_FAIL).\n"));
gtPage2Access.c (user\switch\src\msapi):        DBG_INFO(("Failed (statsOperationPerform returned GT_FAIL).\n"));
gtPage2Access.c (user\switch\src\msapi):        DBG_INFO(("Failed (gtP2SetAccessRMUPage2 returned GT_FAIL).\n"));
gtPage2Access.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPage2Access.c (user\switch\src\msapi):    DBG_INFO(("gstatsPg2GetPortAllCountersClear Called.\n"));
gtPage2Access.c (user\switch\src\msapi):        DBG_INFO(("Failed (gtP2SetAccessRMUPage2 returned GT_FAIL).\n"));
gtPage2Access.c (user\switch\src\msapi):        DBG_INFO(("Failed (statsOperationPerform returned GT_FAIL).\n"));
gtPage2Access.c (user\switch\src\msapi):        DBG_INFO(("Failed (gtP2SetAccessRMUPage2 returned GT_FAIL).\n"));
gtPage2Access.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPage2Access.c (user\switch\src\msapi):    DBG_INFO(("gstatsPg2GetRealtimePortCounter Called.\n"));
gtPage2Access.c (user\switch\src\msapi):        DBG_INFO(("Failed (gtP2SetAccessRMUPage2 returned GT_FAIL).\n"));
gtPage2Access.c (user\switch\src\msapi):        DBG_INFO(("Failed (statsOperationPerform returned GT_FAIL).\n"));
gtPage2Access.c (user\switch\src\msapi):        DBG_INFO(("Failed (gtP2SetAccessRMUPage2 returned GT_FAIL).\n"));
gtPage2Access.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsGetCommaDet Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsGetPCSLink Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsGetSyncOK Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsGetSyncFail Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsGetAnBypassed Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsGetAnBypassMode Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsSetAnBypassMode Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsGetPCSAnEn Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsSetPCSAnEn Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsSetRestartPCSAn Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsGetPCSAnDone Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsSetFCValue Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):			DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsGetFCValue Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsSetForcedFC Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):			DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsGetForcedFC Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsSetFCMode Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):		DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsGetFCMode Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):		DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetFCPath Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetFCPath Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):		DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsSetLinkValue Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsGetLinkValue Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsSetForcedLink Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsGetForcedLink Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsSetDpxValue Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsGetDpxValue Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsSetForcedDpx Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsGetForcedDpx Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsSetForceSpeed Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsGetForceSpeedMode Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsGetRGMIITimingDelay Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsSetRGMIITimingDelay Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsSetRGMIIAutoNego Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsGetRGMIIAutoNego Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsSetForceSpeedEn Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsGetForceSpeedEn Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsSetAltSpeed Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPCSCtrl.c (user\switch\src\msapi):    DBG_INFO(("gpcsGetAltSpeed Called.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPCSCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPhyCtrl.c (user\switch\src\msapi):    DBG_INFO(("feSetAutoMode Called.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Not able to read Phy Reg(port:%d,offset:%d).\n",hwPort,QD_PHY_AUTONEGO_AD_REG));
gtPhyCtrl.c (user\switch\src\msapi):                 DBG_INFO(("Unknown Auto Mode (%d)\n",mode));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Not able to write Phy Reg(port:%d,offset:%d,data:%#x).\n",hwPort,QD_PHY_AUTONEGO_AD_REG,u16Data));
gtPhyCtrl.c (user\switch\src\msapi):    DBG_INFO(("gigCopperSetAutoMode Called.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Not able to read Phy Reg(port:%d,offset:%d).\n",hwPort,QD_PHY_AUTONEGO_AD_REG));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Not able to read Phy Reg(port:%d,offset:%d).\n",hwPort,QD_PHY_AUTONEGO_AD_REG));
gtPhyCtrl.c (user\switch\src\msapi):                DBG_INFO(("Unknown Auto Mode (%d)\n",mode));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Not able to write Phy Reg(port:%d,offset:%d,data:%#x).\n",hwPort,QD_PHY_AUTONEGO_AD_REG,u16Data));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Not able to read Phy Reg(port:%d,offset:%d).\n",hwPort,QD_PHY_AUTONEGO_AD_REG));
gtPhyCtrl.c (user\switch\src\msapi):    DBG_INFO(("gigPhySetAutoMode Called.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Not able to read Phy Reg(port:%d,offset:%d).\n",hwPort,QD_PHY_AUTONEGO_AD_REG));
gtPhyCtrl.c (user\switch\src\msapi):                    DBG_INFO(("Unknown Auto Mode (%d)\n",mode));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Not able to write Phy Reg(port:%d,offset:%d,data:%#x).\n",hwPort,QD_PHY_AUTONEGO_AD_REG,u16Data));
gtPhyCtrl.c (user\switch\src\msapi):    DBG_INFO(("phySetAutoMode Called.\n"));
gtPhyCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtPhyReset Called.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPhyCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetPortLoopback Called.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Not able to read Phy Reg(port:%d,offset:%d).\n",hwPort,QD_PHY_CONTROL_REG));
gtPhyCtrl.c (user\switch\src\msapi):                    DBG_INFO(("Softreset failed.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPhyCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetPortSpeed Called.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Not able to read Phy Reg(port:%d,offset:%d).\n",hwPort,QD_PHY_CONTROL_REG));
gtPhyCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtPortAutoNegEnable Called.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Not able to read Phy Reg(port:%d,offset:%d).\n",hwPort,QD_PHY_CONTROL_REG));
gtPhyCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtPortPowerDown Called.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPhyCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtPortRestartAutoNeg Called.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Not able to read Phy Reg(port:%d,offset:%d).\n",hwPort,QD_PHY_CONTROL_REG));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPhyCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetPortDuplexMode Called.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Not able to read Phy Reg(port:%d,offset:%d).\n",hwPort,QD_PHY_CONTROL_REG));
gtPhyCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetPortAutoMode Called.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl.c (user\switch\src\msapi):    DBG_INFO(("phySetPause Called.\n"));
gtPhyCtrl.c (user\switch\src\msapi):            DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Not able to write Phy Reg(port:%d,offset:%d).\n",hwPort,QD_PHY_AUTONEGO_AD_REG));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Not able to write Phy Reg(port:%d,offset:%d,data:%#x).\n",hwPort,QD_PHY_AUTONEGO_AD_REG,u16Data));
gtPhyCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetDTEDetect Called.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetDTEStatus Called.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetDTEDetectDropWait Called.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetDTEDetectDropWait Called.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetEnergyDetect Called.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Not Supported.\n"));
gtPhyCtrl.c (user\switch\src\msapi):                DBG_INFO(("Invalid paramerter.\n"));
gtPhyCtrl.c (user\switch\src\msapi):                DBG_INFO(("Invalid paramerter.\n"));
gtPhyCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetEnergyDetect Called.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Not Supported.\n"));
gtPhyCtrl.c (user\switch\src\msapi):                DBG_INFO(("Unknown value (shouldn't happen).\n"));
gtPhyCtrl.c (user\switch\src\msapi):                DBG_INFO(("Unknown value (shouldn't happen).\n"));
gtPhyCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSet1000TMasterMode Called.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Not able to write Phy Reg(port:%d,offset:%d,data:%#x).\n",hwPort,QD_PHY_CONTROL_REG,1));
gtPhyCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGet1000TMasterMode Called.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPhyCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetPhyLinkStatus Called.\n"));
gtPhyCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetPktGenEnable Called.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Not Supported.\n"));
gtPhyCtrl.c (user\switch\src\msapi):                DBG_INFO(("Unknown PKTGEN Type.\n"));
gtPhyCtrl.c (user\switch\src\msapi):            DBG_INFO(("Link should be on to run Packet Generator.\n"));
gtPhyCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetPhyReg Called.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPhyCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetPhyReg Called.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGet45PhyReg Called.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPhyCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSet45PhyReg Called.\n"));
gtPhyCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):          DBG_INFO(("Unknown Auto Mode (%d)\n",mode));
gtPhyCtrl_mad.c (user\switch\src\msapi):    DBG_INFO(("phySetAutoMode_mad Called.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):    DBG_INFO(("gprtPhyReset Called.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):    DBG_INFO(("gprtSetPortLoopback_mad Called.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("mdDiagSetLineLoopback failed.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):    DBG_INFO(("gprtSetPortSpeed_mad Called.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("mdGetDuplexStatus failed.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("mdCopperSetSpeedDuplex failed.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):    DBG_INFO(("gprtPortAutoNegEnable_mad Called.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("mdGetSpeedStatus Failed.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):       DBG_INFO(("mdGetDuplexStatus Failed.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("mdGetAutoNegoMode Failed.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("mdCopperSetAutoNeg Failed.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):    DBG_INFO(("gprtPortPowerDown_mad Called.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("mdSysSetPhyEnable Failed.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):    DBG_INFO(("gprtPortRestartAutoNeg_mad Called.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Not able to read Phy Reg(port:%d,offset:%d).\n",hwPort,QD_PHY_CONTROL_REG));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("CallmadHwPagedSetCtrlPara failed.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):    DBG_INFO(("gprtSetPortDuplexMode_mad Called.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Not able to read Phy Reg(port:%d,offset:%d).\n",hwPort,QD_PHY_CONTROL_REG));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("CallmadHwPagedSetCtrlPara failed.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):    DBG_INFO(("gprtSetPortAutoMode_mad Called.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):    DBG_INFO(("gprtSetPause_mad Called.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):            DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("mdCopperSetAutoNeg Failed.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("mdCopperSetAutoNeg Failed.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):    DBG_INFO(("gprtSetDTEDetect_mad Called.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Call mdCopperSetDTEDetectEnable failed.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):    DBG_INFO(("gprtGetDTEStatus_mad Called.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Call mdCopperSetDTEDetectEnable failed.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):    DBG_INFO(("gprtSetDTEDetectDropWait_mad Called.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Call mdCopperSetDTEDetectEnable failed.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Call mdCopperSetDTEDetectEnable failed.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):    DBG_INFO(("gprtGetDTEDetectDropWait_mad Called.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Call mdCopperSetDTEDetectEnable failed.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):    DBG_INFO(("gprtSetEnergyDetect_mad Called.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Not Supported.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):                DBG_INFO(("Invalid paramerter.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):                DBG_INFO(("Invalid paramerter.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Call mdSysSetDetectPowerDownMode failed.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):    DBG_INFO(("gprtGetEnergyDetect_mad Called.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Call mdSysSetDetectPowerDownMode failed.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Not Supported.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):                DBG_INFO(("Unknown value (should not happen).\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):                DBG_INFO(("Unknown value (shouldn not happen).\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):    DBG_INFO(("gprtSet1000TMasterMode_mad Called.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Call mdSysSetDetectPowerDownMode failed.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):    DBG_INFO(("gprtGet1000TMasterMode_mad Called.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Call mdCopperGet1000TMasterMode failed.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):    DBG_INFO(("gprtGetPhyLinkStatus_mad Called.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Call mdCopperGetLinkStatus failed.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):    DBG_INFO(("gprtSetPktGenEnable_mad Called.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Not Supported.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Call mdSysSetDetectPowerDownMode failed.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):    DBG_INFO(("gprtGetPhyReg_mad Called.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):    DBG_INFO(("gprtSetPhyReg_mad Called.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtPhyCtrl_mad.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPhyInt.c (user\switch\src\msapi):    DBG_INFO(("gprtPhyIntEnable Called.\n"));
gtPhyInt.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPhyInt.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPhyInt.c (user\switch\src\msapi):    DBG_INFO(("gprtGetPhyIntStatus Called.\n"));
gtPhyInt.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPhyInt.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPhyInt.c (user\switch\src\msapi):    DBG_INFO(("gprtGetPhyIntPortSummary Called.\n"));
gtPhyInt.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPhyInt.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPhyInt_mad.c (user\switch\src\msapi):    DBG_INFO(("gprtPhyIntEnable_mad Called.\n"));
gtPhyInt_mad.c (user\switch\src\msapi):        DBG_INFO(("Call mdIntSetEnable failed.\n"));
gtPhyInt_mad.c (user\switch\src\msapi):    DBG_INFO(("gprtGetPhyIntStatus_mad Called.\n"));
gtPhyInt_mad.c (user\switch\src\msapi):        DBG_INFO(("Call mdIntGetStatus failed.\n"));
gtPhyInt_mad.c (user\switch\src\msapi):    DBG_INFO(("gprtGetPhyIntPortSummary_mad Called.\n"));
gtPhyInt_mad.c (user\switch\src\msapi):        DBG_INFO(("Call mdIntGetPortSummary failed.\n"));
gtPIRL.c (user\switch\src\msapi):    DBG_INFO(("gpirlActivate Called.\n"));
gtPIRL.c (user\switch\src\msapi):        DBG_INFO(("Failed (statsOperationPerform returned GT_FAIL).\n"));
gtPIRL.c (user\switch\src\msapi):        DBG_INFO(("PIRL Data to PIRL Resource conversion failed.\n"));
gtPIRL.c (user\switch\src\msapi):        DBG_INFO(("PIRL Write Resource failed.\n"));
gtPIRL.c (user\switch\src\msapi):        DBG_INFO(("PIRL Write Resource failed.\n"));
gtPIRL.c (user\switch\src\msapi):                DBG_INFO(("PIRL FC Mode set failed.\n"));
gtPIRL.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPIRL.c (user\switch\src\msapi):    DBG_INFO(("gpirlDectivate Called.\n"));
gtPIRL.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPIRL.c (user\switch\src\msapi):    DBG_INFO(("gpirlUpdateParam Called.\n"));
gtPIRL.c (user\switch\src\msapi):        DBG_INFO(("PIRL Data to PIRL Resource conversion failed.\n"));
gtPIRL.c (user\switch\src\msapi):        DBG_INFO(("PIRL Write Resource failed.\n"));
gtPIRL.c (user\switch\src\msapi):        DBG_INFO(("PIRL Write Resource failed.\n"));
gtPIRL.c (user\switch\src\msapi):                DBG_INFO(("PIRL FC Mode set failed.\n"));
gtPIRL.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPIRL.c (user\switch\src\msapi):    DBG_INFO(("gpirlReadParam Called.\n"));
gtPIRL.c (user\switch\src\msapi):        DBG_INFO(("PIRL Read Resource failed.\n"));
gtPIRL.c (user\switch\src\msapi):        DBG_INFO(("PIRL Resource to PIRL Data conversion failed.\n"));
gtPIRL.c (user\switch\src\msapi):                DBG_INFO(("PIRL FC Mode get failed.\n"));
gtPIRL.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPIRL.c (user\switch\src\msapi):    DBG_INFO(("gpirlUpdatePortVec Called.\n"));
gtPIRL.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPIRL.c (user\switch\src\msapi):    DBG_INFO(("gpirlReadPortVec Called.\n"));
gtPIRL.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPIRL.c (user\switch\src\msapi):    DBG_INFO(("grcGetPirlFcMode Called.\n"));
gtPIRL.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPIRL.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPIRL.c (user\switch\src\msapi):    DBG_INFO(("grcGetIngressRateResource Called.\n"));
gtPIRL.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPIRL.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPIRL.c (user\switch\src\msapi):    DBG_INFO(("gpirlSetCurTimeUpInt Called.\n"));
gtPIRL.c (user\switch\src\msapi):           DBG_INFO(("PIRL OP Failed.\n"));
gtPIRL.c (user\switch\src\msapi):           DBG_INFO(("PIRL OP Failed.\n"));
gtPIRL.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtPIRL.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPIRL.c (user\switch\src\msapi):           DBG_INFO(("PIRL OP Failed.\n"));
gtPIRL.c (user\switch\src\msapi):           DBG_INFO(("PIRL OP Failed.\n"));
gtPIRL.c (user\switch\src\msapi):           DBG_INFO(("PIRL OP Failed.\n"));
gtPIRL.c (user\switch\src\msapi):            DBG_INFO(("PIRL OP Failed.\n"));
gtPIRL.c (user\switch\src\msapi):            DBG_INFO(("PIRL OP Failed.\n"));
gtPIRL.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtPIRL.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPIRL.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtPIRL.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPIRL.c (user\switch\src\msapi):    DBG_INFO(("pirlSetFcMode Called.\n"));
gtPIRL.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPIRL.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPIRL.c (user\switch\src\msapi):            DBG_INFO(("PIRL OP Failed.\n"));
gtPIRL2.c (user\switch\src\msapi):    DBG_INFO(("gpirl2WriteResource Called.\n"));
gtPIRL2.c (user\switch\src\msapi):        DBG_INFO(("PIRL Write Resource failed.\n"));
gtPIRL2.c (user\switch\src\msapi):        DBG_INFO(("PIRL Data to PIRL Resource conversion failed.\n"));
gtPIRL2.c (user\switch\src\msapi):        DBG_INFO(("PIRL Write Resource failed.\n"));
gtPIRL2.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPIRL2.c (user\switch\src\msapi):    DBG_INFO(("gpirl2ReadResource Called.\n"));
gtPIRL2.c (user\switch\src\msapi):        DBG_INFO(("PIRL Read Resource failed.\n"));
gtPIRL2.c (user\switch\src\msapi):        DBG_INFO(("PIRL Resource to PIRL Data conversion failed.\n"));
gtPIRL2.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPIRL2.c (user\switch\src\msapi):    DBG_INFO(("gpirl2DisableResource Called.\n"));
gtPIRL2.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPIRL2.c (user\switch\src\msapi):           DBG_INFO(("PIRL OP Failed.\n"));
gtPIRL2.c (user\switch\src\msapi):           DBG_INFO(("PIRL OP Failed.\n"));
gtPIRL2.c (user\switch\src\msapi):    DBG_INFO(("gpirl2WriteTSMResource Called.\n"));
gtPIRL2.c (user\switch\src\msapi):        DBG_INFO(("PIRL Write Resource failed.\n"));
gtPIRL2.c (user\switch\src\msapi):        DBG_INFO(("PIRL Write Resource failed.\n"));
gtPIRL2.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPIRL2.c (user\switch\src\msapi):    DBG_INFO(("gpirl2ReadTSMResource Called.\n"));
gtPIRL2.c (user\switch\src\msapi):        DBG_INFO(("PIRL Read Resource failed.\n"));
gtPIRL2.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPIRL2.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPIRL2.c (user\switch\src\msapi):        DBG_INFO(("PIRL OP Failed.\n"));
gtPIRL2.c (user\switch\src\msapi):        DBG_INFO(("PIRL OP Failed.\n"));
gtPIRL2.c (user\switch\src\msapi):        DBG_INFO(("PIRL OP Failed.\n"));
gtPIRL2.c (user\switch\src\msapi):            DBG_INFO(("PIRL OP Failed.\n"));
gtPIRL2.c (user\switch\src\msapi):        DBG_INFO(("GT_BAD_PARAM (Boolean)\n"));
gtPIRL2.c (user\switch\src\msapi):            DBG_INFO(("GT_BAD_PARAM (sampling mode)\n"));
gtPIRL2.c (user\switch\src\msapi):            DBG_INFO(("GT_BAD_PARAM ingressRate(%i)\n",pirlData->ingressRate));
gtPIRL2.c (user\switch\src\msapi):                DBG_INFO(("GT_BAD_PARAM ingressRate(%i)\n",pirlData->ingressRate));
gtPIRL2.c (user\switch\src\msapi):                DBG_INFO(("GT_BAD_PARAM ingressRate(%i)\n",pirlData->ingressRate));
gtPIRL2.c (user\switch\src\msapi):                DBG_INFO(("GT_BAD_PARAM ingressRate(%i)\n",pirlData->ingressRate));
gtPIRL2.c (user\switch\src\msapi):                DBG_INFO(("GT_BAD_PARAM ingressRate(%i)\n",pirlData->ingressRate));
gtPIRL2.c (user\switch\src\msapi):            DBG_INFO(("GT_BAD_PARAM ingressRate(%i)\n",pirlData->ingressRate));
gtPIRL2.c (user\switch\src\msapi):                DBG_INFO(("GT_BAD_PARAM bktTypeMask(%#x)\n",pirlData->bktTypeMask));
gtPIRL2.c (user\switch\src\msapi):                DBG_INFO(("GT_BAD_PARAM priMask(%#x)\n",pirlData->priMask));
gtPIRL2.c (user\switch\src\msapi):            DBG_INFO(("GT_BAD_PARAM bktRateType(%#x)\n",pirlData->bktRateType));
gtPIRL2.c (user\switch\src\msapi):            DBG_INFO(("GT_BAD_PARAM byteTobeCounted(%#x)\n",pirlData->byteTobeCounted));
gtPIRL2.c (user\switch\src\msapi):            DBG_INFO(("PIRL OP Failed.\n"));
gtPIRL2.c (user\switch\src\msapi):            DBG_INFO(("PIRL OP Failed.\n"));
gtPIRL2.c (user\switch\src\msapi):            DBG_INFO(("PIRL OP Failed.\n"));
gtPIRL2.c (user\switch\src\msapi):            DBG_INFO(("PIRL OP Failed.\n"));
gtPIRL2.c (user\switch\src\msapi):            DBG_INFO(("PIRL OP Failed.\n"));
gtPIRL3.c (user\switch\src\msapi):    DBG_INFO(("gpirl3WriteResource Called.\n"));
gtPIRL3.c (user\switch\src\msapi):        DBG_INFO(("PIRL Write Resource failed.\n"));
gtPIRL3.c (user\switch\src\msapi):        DBG_INFO(("PIRL Data to PIRL Resource conversion failed.\n"));
gtPIRL3.c (user\switch\src\msapi):        DBG_INFO(("PIRL Write Resource failed.\n"));
gtPIRL3.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPIRL3.c (user\switch\src\msapi):    DBG_INFO(("gpirl3ReadResource Called.\n"));
gtPIRL3.c (user\switch\src\msapi):        DBG_INFO(("PIRL Read Resource failed.\n"));
gtPIRL3.c (user\switch\src\msapi):        DBG_INFO(("PIRL Resource to PIRL Data conversion failed.\n"));
gtPIRL3.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPIRL3.c (user\switch\src\msapi):    DBG_INFO(("gpirl3DisableResource Called.\n"));
gtPIRL3.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPIRL3.c (user\switch\src\msapi):           DBG_INFO(("PIRL OP Failed.\n"));
gtPIRL3.c (user\switch\src\msapi):           DBG_INFO(("PIRL OP Failed.\n"));
gtPIRL3.c (user\switch\src\msapi):    DBG_INFO(("gpirl3WriteTSMResource Called.\n"));
gtPIRL3.c (user\switch\src\msapi):        DBG_INFO(("PIRL Write Resource failed.\n"));
gtPIRL3.c (user\switch\src\msapi):        DBG_INFO(("PIRL Write Resource failed.\n"));
gtPIRL3.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPIRL3.c (user\switch\src\msapi):    DBG_INFO(("gpirl3ReadTSMResource Called.\n"));
gtPIRL3.c (user\switch\src\msapi):        DBG_INFO(("PIRL Read Resource failed.\n"));
gtPIRL3.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPIRL3.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPIRL3.c (user\switch\src\msapi):        DBG_INFO(("PIRL OP Failed.\n"));
gtPIRL3.c (user\switch\src\msapi):        DBG_INFO(("PIRL OP Failed.\n"));
gtPIRL3.c (user\switch\src\msapi):        DBG_INFO(("PIRL OP Failed.\n"));
gtPIRL3.c (user\switch\src\msapi):            DBG_INFO(("PIRL OP Failed.\n"));
gtPIRL3.c (user\switch\src\msapi):        DBG_INFO(("GT_BAD_PARAM (Boolean)\n"));
gtPIRL3.c (user\switch\src\msapi):            DBG_INFO(("GT_BAD_PARAM ingressRate(%i)\n",pirlData->ingressRate));
gtPIRL3.c (user\switch\src\msapi):                DBG_INFO(("GT_BAD_PARAM ingressRate(%i)\n",pirlData->ingressRate));
gtPIRL3.c (user\switch\src\msapi):                DBG_INFO(("GT_BAD_PARAM ingressRate(%i)\n",pirlData->ingressRate));
gtPIRL3.c (user\switch\src\msapi):                DBG_INFO(("GT_BAD_PARAM ingressRate(%i)\n",pirlData->ingressRate));
gtPIRL3.c (user\switch\src\msapi):                DBG_INFO(("GT_BAD_PARAM ingressRate(%i)\n",pirlData->ingressRate));
gtPIRL3.c (user\switch\src\msapi):            DBG_INFO(("GT_BAD_PARAM ingressRate(%i)\n",pirlData->ingressRate));
gtPIRL3.c (user\switch\src\msapi):            DBG_INFO(("GT_BAD_PARAM byteTobeCounted(%#x)\n",pirlData->byteTobeCounted));
gtPIRL3.c (user\switch\src\msapi):            DBG_INFO(("PIRL OP Failed.\n"));
gtPIRL3.c (user\switch\src\msapi):            DBG_INFO(("PIRL OP Failed.\n"));
gtPIRL3.c (user\switch\src\msapi):            DBG_INFO(("PIRL OP Failed.\n"));
gtPIRL3.c (user\switch\src\msapi):            DBG_INFO(("PIRL OP Failed.\n"));
gtPIRL3.c (user\switch\src\msapi):            DBG_INFO(("PIRL OP Failed.\n"));
gtPolicy.c (user\switch\src\msapi):    DBG_INFO(("gprtSetPolicy Called.\n"));
gtPolicy.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPolicy.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPolicy.c (user\switch\src\msapi):    DBG_INFO(("gprtGetPolicy Called.\n"));
gtPolicy.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPolicy.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetForceFc Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):				DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):				DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):				DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):            DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("gstpGetPortState failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("gstpSetPortState failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("gstpSetPortState failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetForceFc Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):				DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):				DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):            DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetUseCoreTag Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_NOT_SUPPORTED.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetUseCoreTag Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_NOT_SUPPORTED.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetTrailerMode Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_NOT_SUPPORTED.\n"));
gtPortCtrl.c (user\switch\src\msapi):            DBG_INFO(("GT_NOT_SUPPORTED.\n"));
gtPortCtrl.c (user\switch\src\msapi):            DBG_INFO(("GT_NOT_SUPPORTED.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetTrailerMode Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_NOT_SUPPORTED.\n"));
gtPortCtrl.c (user\switch\src\msapi):            DBG_INFO(("GT_NOT_SUPPORTED.\n"));
gtPortCtrl.c (user\switch\src\msapi):            DBG_INFO(("GT_NOT_SUPPORTED.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetIngressMode Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetIngressMode Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetMcRateLimit Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetMcRateLimit Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetIGMPSnoop Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetIGMPSnoop Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetHeaderMode Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_NOT_SUPPORTED.\n"));
gtPortCtrl.c (user\switch\src\msapi):            DBG_INFO(("GT_NOT_SUPPORTED.\n"));
gtPortCtrl.c (user\switch\src\msapi):            DBG_INFO(("GT_NOT_SUPPORTED.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetHeaderMode Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_NOT_SUPPORTED.\n"));
gtPortCtrl.c (user\switch\src\msapi):            DBG_INFO(("GT_NOT_SUPPORTED.\n"));
gtPortCtrl.c (user\switch\src\msapi):            DBG_INFO(("GT_NOT_SUPPORTED.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetProtectedMode Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_NOT_SUPPORTED.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetProtectedMode Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_NOT_SUPPORTED.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetForwardUnknown Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_NOT_SUPPORTED.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetForwardUnknown Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_NOT_SUPPORTED.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetDropOnLock Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetDropOnLock Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetInitialPri Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_NOT_SUPPORTED.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetInitialPri Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_NOT_SUPPORTED.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetDoubleTag Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetDoubleTag Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetInterswitchPort Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetInterswitchPort Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetLearnDisable Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetLearnDisable Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        	DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetIgnoreFCS Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetIgnoreFCS Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetAllowedBad Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetAllowedBad Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetVTUPriOverride Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetVTUPriOverride Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetSAPriOverride Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetSAPriOverride Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetDAPriOverride Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetDAPriOverride Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetCPUPort Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetCPUPort Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetLockedPort Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetLockedPort Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetIgnoreWrongData Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetIgnoreWrongData Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetDiscardTagged Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetDiscardTagged Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetDiscardUntagged Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetDiscardUnTagged Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetMapDA Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetMapDA Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetDefaultForward Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetDefaultForward Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetEgressMonitorSource Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetEgressMonitorSource Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetIngressMonitorSource Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetIngressMonitorSource Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetMessagePort Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetMessagePort Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetTrunkPort Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):               DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):                   DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetTrunkPort Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetDiscardBCastMode Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetDiscardBCastMode Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetFCOnRateLimitMode Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetFCOnRateLimitMode Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetSAFiltering Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_NOT_SUPPORTED.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetSAFiltering Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_NOT_SUPPORTED.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetARPtoCPU Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_NOT_SUPPORTED.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetARPtoCPU Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_NOT_SUPPORTED.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetEgressFlood Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_NOT_SUPPORTED.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetEgressFlood Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_NOT_SUPPORTED.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetPortSched Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):            DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):            DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetPortSched Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetProviderTag Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetProviderTag Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetPauseLimitOut Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetPauseLimitOut Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetPauseLimitIn Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetPauseLimitIn Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):	DBG_INFO(("gprtSetQtoPause Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):	DBG_INFO(("gprtGetQtoPause Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):	DBG_INFO(("gprtSetRxPFCEn Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):	DBG_INFO(("gprtGetRxPFCEn Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):	DBG_INFO(("gprtSetTxPFCEn Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):	DBG_INFO(("gprtGetTxPFCEn Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):	DBG_INFO(("gprtSetRxPFCtoQ Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):	DBG_INFO(("gprtGetRxPFCtoQ Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):	DBG_INFO(("gprtSetTxPFCtoQ Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):	DBG_INFO(("gprtGetTxPFCtoQ Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetFrameMode Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetFrameMode Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetHoldAt1 Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetHoldAt1 Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetIntOnAgeOut Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetIntOnAgeOut Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetRefreshLocked Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetRefreshLocked Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetPortEType Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetPortEType Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetJumboMode Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetJumboMode Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGet200Base Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSet200Base Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetSwitchReg Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetSwitchReg Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetGlobalReg Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetGlobalReg Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetGlobal2Reg Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetGlobal2Reg Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetGlobal3Reg Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetGlobal3Reg Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):               DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):      DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):      DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):      DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):  DBG_INFO(("gsysSetDefQpri Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):  DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetDefQpri Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):  DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetAllowVid0 Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetAllowVid0 Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gportPointDataSet Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):     DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gportPointDataGet Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):	   DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):               DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gportSetFlowCtrl Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):	   DBG_INFO(("gportPointDataSet Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gportGetFlowCtrl Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):	   DBG_INFO(("gportPointDataGet Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetPortCtrl3 Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetPortCtrl3 Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gportSetQueueCtrl Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):	   DBG_INFO(("gportPointDataSet Failed.\n"));
gtPortCtrl.c (user\switch\src\msapi):    DBG_INFO(("gportGetQueueCtrl Called.\n"));
gtPortCtrl.c (user\switch\src\msapi):	   DBG_INFO(("gportPointDataGet Failed.\n"));
gtPortLed.c (user\switch\src\msapi):    DBG_INFO(("gprtSetLED Called.\n"));
gtPortLed.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortLed.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortLed.c (user\switch\src\msapi):    DBG_INFO(("gprtGetLED Called.\n"));
gtPortLed.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortPav.c (user\switch\src\msapi):    DBG_INFO(("gpavSetPAV Called.\n"));
gtPortPav.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortPav.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortPav.c (user\switch\src\msapi):    DBG_INFO(("gpavGetPAV Called.\n"));
gtPortPav.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortPav.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortPav.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortPav.c (user\switch\src\msapi):    DBG_INFO(("gpavSetIngressMonitor Called.\n"));
gtPortPav.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortPav.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortPav.c (user\switch\src\msapi):    DBG_INFO(("grcGetIngressMonitor Called.\n"));
gtPortPav.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortPav.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortPav.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortPrioMap.c (user\switch\src\msapi):    DBG_INFO(("gprtSetIpPrioMap Called.\n"));
gtPortPrioMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortPrioMap.c (user\switch\src\msapi):    DBG_INFO(("gprtGetIpPrioMap Called.\n"));
gtPortPrioMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortPrioMap.c (user\switch\src\msapi):    DBG_INFO(("gprtSetIEEEPrioMap Called.\n"));
gtPortPrioMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortPrioMap.c (user\switch\src\msapi):    DBG_INFO(("gprtGetIpPrioMap Called.\n"));
gtPortPrioMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("grcSetLimitMode Called.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("grcGetLimitMode Called.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("grcSetPri3Rate Called.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("grcGetPri3Rate Called.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("grcSetPri2Rate Called.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("grcGetPri2Rate Called.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("grcSetPri1Rate Called.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("grcGetPri1Rate Called.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("grcSetPri0Rate Called.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("grcGetPri0Rate Called.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("grcSetBytesCount Called.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("grcGetBytesCount Called.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("grcSetEgressRate Called.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("grcGetEgressRate Called.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("grcSetBurstRate Called.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("grcGetBurstRate Called.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("grcSetTCPBurstRate Called.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("grcGetTCPBurstRate Called.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("Fail to find TCP Rate.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("grcSetVidNrlEn Called.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("grcGetVidNrlEn Called.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("grcSetSaNrlEn Called.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("grcGetSaNrlEn Called.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("grcSetDaNrlEn Called.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("grcGetDaNrlEn Called.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("grcSetELimitMode Called.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("grcGetELimitMode Called.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("grcSetRsvdNrlEn Called.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("grcGetRsvdNrlEn Called.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("grcSetFrameOverhead Called.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_BAD_PARAM \n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("grcGetFrameOverhead Called.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRateCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRmon.c (user\switch\src\msapi):    DBG_INFO(("gstatsFlushAll Called.\n"));
gtPortRmon.c (user\switch\src\msapi):        DBG_INFO(("Failed (statsOperationPerform returned GT_FAIL).\n"));
gtPortRmon.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRmon.c (user\switch\src\msapi):    DBG_INFO(("gstatsFlushPort Called.\n"));
gtPortRmon.c (user\switch\src\msapi):        DBG_INFO(("Failed (statsOperationPerform returned GT_FAIL).\n"));
gtPortRmon.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRmon.c (user\switch\src\msapi):    DBG_INFO(("gstatsGetPortCounter Called.\n"));
gtPortRmon.c (user\switch\src\msapi):        DBG_INFO(("Failed (statsOperationPerform returned GT_FAIL).\n"));
gtPortRmon.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRmon.c (user\switch\src\msapi):    DBG_INFO(("gstatsGetPortAllCounters Called.\n"));
gtPortRmon.c (user\switch\src\msapi):        DBG_INFO(("Failed (statsOperationPerform returned GT_FAIL).\n"));
gtPortRmon.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRmon.c (user\switch\src\msapi):    DBG_INFO(("gstatsGetPortCounters2 Called.\n"));
gtPortRmon.c (user\switch\src\msapi):        DBG_INFO(("Failed (statsOperationPerform returned GT_FAIL).\n"));
gtPortRmon.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRmon.c (user\switch\src\msapi):    DBG_INFO(("gstatsGetPortAllCounters2 Called.\n"));
gtPortRmon.c (user\switch\src\msapi):        DBG_INFO(("Failed (statsOperationPerform returned GT_FAIL).\n"));
gtPortRmon.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRmon.c (user\switch\src\msapi):    DBG_INFO(("gstatsGetPortCounters3 Called.\n"));
gtPortRmon.c (user\switch\src\msapi):        DBG_INFO(("Failed (statsOperationPerform returned GT_FAIL).\n"));
gtPortRmon.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRmon.c (user\switch\src\msapi):    DBG_INFO(("gstatsGetPortAllCounters3 Called.\n"));
gtPortRmon.c (user\switch\src\msapi):        DBG_INFO(("Failed (statsOperationPerform returned GT_FAIL).\n"));
gtPortRmon.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRmon.c (user\switch\src\msapi):    DBG_INFO(("gstatsGetPortCounters4 Called.\n"));
gtPortRmon.c (user\switch\src\msapi):        DBG_INFO(("Failed (statsOperationPerform returned GT_FAIL).\n"));
gtPortRmon.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRmon.c (user\switch\src\msapi):    DBG_INFO(("gstatsGetPortAllCounters3 Called.\n"));
gtPortRmon.c (user\switch\src\msapi):        DBG_INFO(("Failed (statsOperationPerform returned GT_FAIL).\n"));
gtPortRmon.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRmon.c (user\switch\src\msapi):    DBG_INFO(("gstatsGetHistogramMode Called.\n"));
gtPortRmon.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRmon.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRmon.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRmon.c (user\switch\src\msapi):    DBG_INFO(("gstatsSetHistogramMode Called.\n"));
gtPortRmon.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtPortRmon.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortRmon.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortRmon.c (user\switch\src\msapi):    DBG_INFO(("gstatsGetRealtimePortCounter Called.\n"));
gtPortRmon.c (user\switch\src\msapi):        DBG_INFO(("Failed (statsOperationPerform returned GT_FAIL).\n"));
gtPortRmon.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortStat.c (user\switch\src\msapi):    DBG_INFO(("gprtSetCtrMode Called.\n"));
gtPortStat.c (user\switch\src\msapi):        DBG_INFO(("gprtSetCtrMode Failed .\n"));
gtPortStat.c (user\switch\src\msapi):    DBG_INFO(("gprtSetCtrMode OK .\n"));
gtPortStat.c (user\switch\src\msapi):    DBG_INFO(("gprtClearAllCtr Called.\n"));
gtPortStat.c (user\switch\src\msapi):        DBG_INFO(("Failed (Get field).\n"));
gtPortStat.c (user\switch\src\msapi):        DBG_INFO(("Failed (Get field).\n"));
gtPortStat.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortStat.c (user\switch\src\msapi):    DBG_INFO(("gprtGetPortCtr Called.\n"));
gtPortStat.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStat.c (user\switch\src\msapi):        DBG_INFO(("Failed (Read Rx).\n"));
gtPortStat.c (user\switch\src\msapi):        DBG_INFO(("Failed (Read Tx).\n"));
gtPortStat.c (user\switch\src\msapi):            DBG_INFO(("Failed (Read Tx).\n"));
gtPortStat.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortStat.c (user\switch\src\msapi):    DBG_INFO(("gprtGetPortCtr2 Called.\n"));
gtPortStat.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStat.c (user\switch\src\msapi):        DBG_INFO(("Failed (Read inDiscardLo).\n"));
gtPortStat.c (user\switch\src\msapi):        DBG_INFO(("Failed (Read inDiscardHi).\n"));
gtPortStat.c (user\switch\src\msapi):        DBG_INFO(("Failed (Read inFiltered).\n"));
gtPortStat.c (user\switch\src\msapi):        DBG_INFO(("Failed (Read outFiltered).\n"));
gtPortStat.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortStat.c (user\switch\src\msapi):    DBG_INFO(("gprtGetPortQueueCtr Called.\n"));
gtPortStat.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStat.c (user\switch\src\msapi):        DBG_INFO(("Failed (Read Rx).\n"));
gtPortStat.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("procPx_Mode Called.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtGetPartnerLinkPause Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtGetPauseEn Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtGetSelfLinkPause Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtGetTxPauseEn Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtGetRxPauseEn Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtGetResolve Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtGetHdFlow Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtGetPHYDetect Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtSetPHYDetect Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtGetLinkState Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtGetPortMode Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtGetPhyMode Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtSetDuplex Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtGetDuplex Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtGetSpeed Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtGetSpeed Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtGetDuplexFixed Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtGetHighErrorRate Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtGetMGMII Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtSetMGMII Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtGetTxPaused Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtGetFlowCtrl Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtGetFdFlowDis Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtGetHdFlowDis Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtGetPxMode Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtGetMiiInterface Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtGetOutQSize Called.\n"));
gtPortStatus.c (user\switch\src\msapi):	    DBG_INFO(("Bad queue number.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtGetBufHigh Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtGetFcEn Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtGetRsvSize Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtGetQSizePerQPri Called.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtGetC_Duplex Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPortStatus.c (user\switch\src\msapi):    DBG_INFO(("gprtGetC_Mode Called.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPortStatus.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtPriTable.c (user\switch\src\msapi):    DBG_INFO(("gsysSetQPriOverrideTable Called.\n"));
gtPriTable.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtPriTable.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtPriTable.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPriTable.c (user\switch\src\msapi):    DBG_INFO(("gsysGetQPriOverrideTable Called.\n"));
gtPriTable.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPriTable.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPriTable.c (user\switch\src\msapi):    DBG_INFO(("gsysSetFPriOverrideTable Called.\n"));
gtPriTable.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPriTable.c (user\switch\src\msapi):    DBG_INFO(("gsysGetFPriOverrideTable Called.\n"));
gtPriTable.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPriTable.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPriTable.c (user\switch\src\msapi):    DBG_INFO(("gsysSetQPriAvbOverrideTable Called.\n"));
gtPriTable.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPriTable.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPriTable.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPriTable.c (user\switch\src\msapi):    DBG_INFO(("gsysGetQPriAvbOverrideTable Called.\n"));
gtPriTable.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPriTable.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpSetConfig Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed to call gptpSetGlobalConfig.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing PTPEType.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing MsgIDTSEn.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing TSArrPtr.\n"));
gtPTP.c (user\switch\src\msapi):                DBG_INFO(("Failed gptpSetPortConfig.\n"));
gtPTP.c (user\switch\src\msapi):					DBG_INFO(("Failed gptpSetPortTsMode.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing PTPArrIntEn.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing PTPDepIntEn.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing MsgIDStartBit & DisTSOverwrite.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpGetConfig Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed to call gptpSetGlobalConfig.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading PTPEType.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading MsgIDTSEn.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TSArrPtr.\n"));
gtPTP.c (user\switch\src\msapi):                DBG_INFO(("Failed gptpGetPortConfig.\n"));
gtPTP.c (user\switch\src\msapi):                DBG_INFO(("Failed gptpGetPortConfig.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading PTPArrIntEn.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading PTPDepIntEn.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpSetGlobalConfig Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing PTPEType.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing MsgIDTSEn.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing TSArrPtr.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpGetGlobalConfig Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading PTPEType.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading MsgIDTSEn.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TSArrPtr.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpSetPortConfig Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("gstpGetPortState failed.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("gstpSetPortState failed.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing TransSpec,DisTSpecCheck,DisTSOverwrite.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing MsgIDTSEn.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing TSArrPtr.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing LED control.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("gstpSetPortState failed.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpGetPortConfig Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading port config register.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading MsgIDTSEn.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TSArrPtr.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading LED control.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpSetPTPEn Called.\n"));
gtPTP.c (user\switch\src\msapi):                DBG_INFO(("Failed gptpSetPortPTPEn.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing MsgIDStartBit & DisTSOverwrite.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpGetPTPEn Called.\n"));
gtPTP.c (user\switch\src\msapi):               DBG_INFO(("Failed gptpGetPortPTPEn.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpSetPortPTPEn Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing TransSpec,DisTSpecCheck,DisTSOverwrite.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpGetPortPTPEn Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpSetPortTsMode Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TsMode.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing Ts Mode.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpGetPortTsMode Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TsMode.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpSetMeanPathDelay Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing mean path delay.\n"));
gtPTP.c (user\switch\src\msapi):	DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpGetMeanPathDelay Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading mean path delay.\n"));
gtPTP.c (user\switch\src\msapi):	DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpSetIngPathDelayAsym Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing ingress path delay asymmetry.\n"));
gtPTP.c (user\switch\src\msapi):	DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpGetIngPathDelayAsym Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading ingress path delay asymmetry.\n"));
gtPTP.c (user\switch\src\msapi):	DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpSetEgPathDelayAsym Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writeg egress path delay asymmetry.\n"));
gtPTP.c (user\switch\src\msapi):	DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpGetEgPathDelayAsym Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed readeg egress path delay asymmetry.\n"));
gtPTP.c (user\switch\src\msapi):	DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpGetPTPInt Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpGetPTPIntStatus Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading PTP status.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpGetPTPGlobalTime Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading PTP Global Time.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpGetTimeStamped Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtPTP.c (user\switch\src\msapi):            DBG_INFO(("Failed reading DisPTP.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpResetTimeStamp Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing Port Status.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpGetTSDiscardCount Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpGetOutFCSErr Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpGetReg Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpSetReg Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpGlobalPointDataSet Called.\n"));
gtPTP.c (user\switch\src\msapi):     DBG_INFO(("Failed.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpGlobalPointDataGet Called.\n"));
gtPTP.c (user\switch\src\msapi):	   DBG_INFO(("Failed.\n"));
gtPTP.c (user\switch\src\msapi):               DBG_INFO(("Failed.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpTODLoadPointSet Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing TOD Load Point.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing TOD Load Point.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpTODLoadPointGet Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TOD Load Point.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpTODOpCtrlSet Called.\n"));
gtPTP.c (user\switch\src\msapi):               DBG_INFO(("Failed.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing ToD operation control.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpTODOpCtrlGet Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpPulseSet Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing Pulse parameters.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpPulseGet Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading Pulse parameters.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpTODTimeSet Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing ToD.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing ToD.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing ToD.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing ToD.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing ToD.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpTODLoadPointGet Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading ToD.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading ToD.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpPulseSet Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing ToD compensation.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing ToD compensation.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpPulseSet Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading ToD compensation.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptp1722TimeSet Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing 1722 ToD.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing 1722 ToD.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing 1722 ToD.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing 1722 ToD.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptp1722TimeGet Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading 1722 ToD.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gtaiSetEventConfig Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI global config.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing TAI global config.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI global config.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI global config.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gtaiGetEventConfig Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI global config.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI global config.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gtaiGetEventStatus Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI global config.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading event capture register.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading event capture register.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gtaiGetEventInt Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gtaiClearEventInt Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading eventInt.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing eventInt.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gtaiSetClockSelect Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI global config.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing TAI global config.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gtaiGetClockSelect Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI global config.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gtaiSetClockConfig Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading PTPEType.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed reading IRL clock enable.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed writing IRL clock enable.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing time stamping clock period.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed reading SoC clk period.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed writing SoC clk period.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed reading PTPEType.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed writing SoC clock compensation.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed writing IRL clock generation amount.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed writing IRL clock compensation amount.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed writing IRL clock comp amount in subpico secs.\n"));
gtPTP.c (user\switch\src\msapi):	DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gtaiGetClockConfig Called.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed reading IRL clock enable.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading time stamping clock period.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed reading SoC clock period.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed reading SoC clock compensation amount.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed reading IRL clock generation amount.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed reading IRL clock compensation amount.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed reading IRL clock compensation sub pico seconds.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gtaiGetTrigInt Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gtaiClearTrigInt Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing TAI global config.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI global config.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gtaiSetTrigConfig Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing Trig generation amount.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing Trig generation amount.\n"));
gtPTP.c (user\switch\src\msapi):      DBG_INFO(("Failed writing TAI trig compare clock.\n"));
gtPTP.c (user\switch\src\msapi):      DBG_INFO(("Failed reading TAI global config.\n"));
gtPTP.c (user\switch\src\msapi):      DBG_INFO(("Failed writing TAI global config.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed writing TAI global config.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed writing TAI global config.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing trigger generation time.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing trigger generation time.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing trigger generation delay.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing PTPEType.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed writing triGen2 time.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed writing triGen2 time.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed writing triGen2 delay.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed writing IRLGen time.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed writing IRLGen time.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing PTPEType.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI global config.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing TAI global config.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):	DBG_INFO(("gtaiGetTrigConfig Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI trigGenAmt.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI trigGenAmt.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI TrigClkComp.\n"));
gtPTP.c (user\switch\src\msapi):      DBG_INFO(("Failed reading TAI PulseWidth.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed reading TAI global config.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI trigGenTime.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI trigGenTime.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI trigGenDelay.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI lockCorrect.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed reading TAI trigGen2Time.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed reading TAI trigGen2Time.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed reading TAI trigGen2Delay.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed reading TAI lockCorrect2.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed reading IRLGen Time.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed reading IRLGen Time.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed reading IRL Lock Correction.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI trig config 0.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gtaiSetTrigLock Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI global config.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing TAI global config.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing trigGen time.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing trigGen time.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing PTPEType.\n"));
gtPTP.c (user\switch\src\msapi):		  DBG_INFO(("Failed writing trigGen2 time.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed writing trigGen2 time.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed writing PTPEType.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gtaiGetTrigLock Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI global config.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI trigGenTime.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI trigGenTime.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI lockCorrect.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed reading TAI trigGen2Time.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed reading TAI trigGen2Time.\n"));
gtPTP.c (user\switch\src\msapi):			DBG_INFO(("Failed reading TAI lockCorrect2.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gtaiGetTSClkPer Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TS clock period.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gtaiSetTSClkPer Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing TS clock period.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gtaiSetMultiPTPSync Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI register.\n"));
gtPTP.c (user\switch\src\msapi):            DBG_INFO(("Failed writing TAI register.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing TAI register.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing TAI register.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing TAI register.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gtaiGetMultiPTPSync Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI register.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI register.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI register.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gtaiGetTimeIncDec Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gtaiSetTimeInc Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading DisPTP.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gtaiSetTimeInc Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI register.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing TAI register.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed reading TAI register.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed writing TAI register.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpModeSet Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed set PTP point/data.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpModeGet Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed get PTP point/data.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpSetExtTimeFormat Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed set PTP point/data.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpGetExtTimeFormat Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed get PTP point/data.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpGetIngActVec Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed get PTP point/data.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed get PTP point/data.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed get PTP point/data.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpSetIngActVec Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed set PTP point/data.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed set PTP point/data.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed set PTP point/data.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpGetEgActVec Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed get PTP point/data.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed get PTP point/data.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed get PTP point/data.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed get PTP point/data.\n"));
gtPTP.c (user\switch\src\msapi):    DBG_INFO(("gptpSetEgActVec Called.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed set PTP point/data.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed set PTP point/data.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed set PTP point/data.\n"));
gtPTP.c (user\switch\src\msapi):        DBG_INFO(("Failed set PTP point/data.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gcosSetPortDefaultTc Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gcosSetPortDefaultTc Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosSetPrioMapRule Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosGetPrioMapRule Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosIpPrioMapEn Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosGetIpPrioMapEn Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosUserPrioMapEn Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosGetUserPrioMapEn Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gcosGetUserPrio2Tc Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gcosSetUserPrio2Tc Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gcosGetDscp2Tc Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gcosSetDscp2Tc Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosGetTagRemap Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosSetTagRemap Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosSetQPriValue Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosGetQPriValue Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosSetForceQPri Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosGetForceQPri Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosSetDefFPri Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosGetDefFPri Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosSetVIDFPriOverride Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosGetVIDFPriOverride Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosSetSAFPriOverride Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosGetSAFPriOverride Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosSetDAFPriOverride Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosGetDAFPriOverride Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosSetVTUQPriOverride Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosGetVTUQPriOverride Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosSetVTUFPriOverride Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosGetVTUFPriOverride Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosSetVIDQPriOverride Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosGetVIDQPriOverride Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosSetSAQPriOverride Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosGetSAQPriOverride Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosSetDAQPriOverride Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosGetDAQPriOverride Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosSetARPQPriOverride Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosGetARPQPriOverride Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosSetArpQPri Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("gqosGetArpQPri Called.\n"));
gtQosMap.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtQosMap.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):    DBG_INFO(("_serdesSetAutoMode Called.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Not able to read Serdes Reg(port:%d,offset:%d).\n",serdesPort,QD_PHY_AUTONEGO_AD_REG));
gtSerdesCtrl.c (user\switch\src\msapi):                DBG_INFO(("Unknown Auto Mode (%d)\n",mode));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Not able to write Serdes Reg(port:%d,offset:%d,data:%#x).\n",serdesPort,QD_PHY_AUTONEGO_AD_REG,u16Data));
gtSerdesCtrl.c (user\switch\src\msapi):    DBG_INFO(("serdesSetAutoMode Called.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetSerdesMode Called.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetSerdesMode Called.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetSerdesReg Called.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetSerdesReg Called.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):     	   DBG_INFO(("Failed.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):     	   DBG_INFO(("Failed.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetSerdesIntEnable Called.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetSerdesIntEnable Called.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetSerdesIntStatus Called.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSerdesReset Called.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown SERDES device.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetSerdesLoopback Called.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown SERDES device.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetSerdesLoopback Called.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown SERDES device.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetSerdesSpeed Called.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown SERDES device.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Not able to read Serdes Reg(port:%d,offset:%d).\n",serdesPort,QD_SERDES_CONTROL_REG));
gtSerdesCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSerdesAutoNegEnable Called.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Not able to read Serdes Reg(port:%d,offset:%d).\n",serdesPort,QD_SERDES_CONTROL_REG));
gtSerdesCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSerdesPowerDown Called.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetSerdesPowerDownSt Called.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSerdesRestartAutoNeg Called.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Not able to read Serdes Reg(port:%d,offset:%d).\n",serdesPort,QD_SERDES_CONTROL_REG));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetSerdesDuplexMode Called.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Not able to read Serdes Reg(port:%d,offset:%d).\n",serdesPort,QD_SERDES_CONTROL_REG));
gtSerdesCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtSetSerdesAutoMode Called.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown SERDES device.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):    DBG_INFO(("serdesSetPause Called.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):      DBG_INFO(("Not able to get Serdes mode(port:%d).\n",serdes_mode));
gtSerdesCtrl.c (user\switch\src\msapi):            DBG_INFO(("Unknown SERDES device.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Not able to write Serdes Reg(port:%d,offset:%d).\n",serdesPort,QD_SERDES_AUTONEGO_AD_REG));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Not able to write Serdes Reg(port:%d,offset:%d,data:%#x).\n",serdesPort,QD_SERDES_AUTONEGO_AD_REG,serdesInfo.anyPage,u16Data));
gtSerdesCtrl.c (user\switch\src\msapi):    DBG_INFO(("gprtGetSerdesLinkStatus Called.\n"));
gtSerdesCtrl.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtSysConfig.c (user\switch\src\msapi):    DBG_INFO(("MAD has been started.\n"));
gtSysConfig.c (user\switch\src\msapi):        DBG_INFO(("sMAD Initialization Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):    DBG_INFO(("gsysInitCPUPort Called.\n"));
gtSysConfig.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysConfig.c (user\switch\src\msapi):    DBG_INFO(("qdLoadDriver Called.\n"));
gtSysConfig.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):        DBG_INFO(("QuarterDeck already started.\n"));
gtSysConfig.c (user\switch\src\msapi):       DBG_INFO(("gtRegister Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):        DBG_INFO(("semCreate Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):        DBG_INFO(("semCreate Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):        DBG_INFO(("semCreate Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):        DBG_INFO(("semCreate Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):        DBG_INFO(("semCreate Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):        DBG_INFO(("semCreate Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):        DBG_INFO(("semCreate Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):        DBG_INFO(("semCreate Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):        DBG_INFO(("semCreate Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):        DBG_INFO(("semCreate Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):                DBG_INFO(("Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):        DBG_INFO(("Initialize MAD failed.\n"));
gtSysConfig.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtSysConfig.c (user\switch\src\msapi):            DBG_INFO(("gsysGetRsvd2CpuEnables failed.\n"));
gtSysConfig.c (user\switch\src\msapi):            DBG_INFO(("gsysSetRsvd2Cpu failed.\n"));
gtSysConfig.c (user\switch\src\msapi):                DBG_INFO(("Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):    	DBG_INFO(("=========gsysSetCPUPort.=======\n"));
gtSysConfig.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):    DBG_INFO(("=========gsysSetCPUDest.=======\n"));
gtSysConfig.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):            DBG_INFO(("gsysSetRsvd2Cpu failed.\n"));
gtSysConfig.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysConfig.c (user\switch\src\msapi):    DBG_INFO(("sysEnable Called.\n"));
gtSysConfig.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysConfig.c (user\switch\src\msapi):    DBG_INFO(("qdUnloadDriver Called.\n"));
gtSysConfig.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysConfig.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSwReset Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetPPUEn Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetPPUEn Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetDiscardExcessive Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetDiscardExcessive Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetSchedulingMode Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetSchedulingMode Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetHashMulticast Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetHashMulticast Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetMaxFrameSize Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetMaxFrameSize Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysReLoad Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetWatchDog Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetWatchDog Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetDuplexPauseMac Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetDuplexPauseMac Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetPerPortDuplexPauseMac Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetPerPortDuplexPauseMac Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysReadMiiReg Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysWriteMiiReg Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysAccessMultiReg Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetRetransmitMode Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetRetransmitMode Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetLimitBackoff Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetLimitBackoff Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetRsvReqPri Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetRsvReqPri Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetCascadePort Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetCascadePort Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetDeviceNumber Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetDeviceNumber Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetCoreTagType Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetCoreTagType Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetIngressMonitorDest Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetIngressMonitorDest Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetEgressMonitorDest Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetEgressMonitorDest Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetARPDest Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetARPDest Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetRsvd2CpuEnables Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):    	DBG_INFO(("gsysSetMonitorMgmtCtrl Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):		   DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetRsvd2CpuEnables Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetRsvd2Cpu Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetRsvd2Cpu Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetMGMTPri Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetMGMTPri Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetUseDoubleTagData Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetUseDoubleTagData Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetPreventLoops Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetPreventLoops Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetFlowControlMessage Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetFlowControlMessage Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetForceFlowControlPri Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetForceFlowControlPri Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetFCPri Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetFCPri Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetFlowCtrlDelay Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):                DBG_INFO(("GT_BAD_PARAM (sp)\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_BAD_PARAM (delayTime)\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetFlowCtrlDelay Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):                DBG_INFO(("GT_BAD_PARAM (sp)\n"));
gtSysCtrl.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetDevRoutingTable Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_BAD_PARAM (devNum)\n"));
gtSysCtrl.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetDevRoutingTable Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_BAD_PARAM (devNum)\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetTrunkMaskTable Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_BAD_PARAM (trunkNum)\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_BAD_PARAM (trunkNum)\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_BAD_PARAM (trunkMask)\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetTrunkMaskTable Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_BAD_PARAM (trunkId)\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_BAD_PARAM (trunkNum)\n"));
gtSysCtrl.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetHashTrunk Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetHashTrunk Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetTrunkRouting Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_BAD_PARAM (trunkId)\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_BAD_PARAM (trunkRoute)\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetTrunkRouting Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_BAD_PARAM (trunkId)\n"));
gtSysCtrl.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):            DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetRateLimitMode Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetRateLimitMode Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetAgeInt Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetAgeInt Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetForceSnoopPri Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetForceSnoopPri Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetSnoopPri Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetSnoopPri Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetForceARPPri Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetForceARPPri Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetARPPri Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetARPPri Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetUsePortSchedule Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetUsePortSchedule Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetOldHader Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetOldHader Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetRecursiveStrippingDisable Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetRecursiveStrippingDisable Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetCPUPort Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetCPUPort Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetMirrorDest Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetMirrorDest Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetRMPort Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):                DBG_INFO(("Not Allowed Port.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetRMPort Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetRMDACheck Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetRMDACheck Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetHeaderType Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetHeaderType Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetRMEnable Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetRMEnable Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetRMUMode Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetRMUMode Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetCtrMode Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetCtrMode Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetRsvd2CpuEnables2X Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetRsvd2CpuEnables2X Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetLoopbackFilter Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetLoopbackFilter Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetFloodBC Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetFloodBC Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetRemove1PTag Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetRemove1PTag Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetTagFlowControl Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetTagFlowControl Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetAlwaysUseVTU Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetAlwaysUseVTU Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetQVlansOnly Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetQVlansOnly Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSet5BitPort Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGet5BitPort Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetSDETPolarity Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("GT_BAD_PARAM \n"));
gtSysCtrl.c (user\switch\src\msapi):            DBG_INFO(("GT_BAD_PARAM \n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetSDETPolarity Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("sysSetARPwoBC Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetARPwoBC Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetCLK125En Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetCLK125En Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysPort2Lport Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysLport2Port Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysPortvec2Lportvec Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysLportvec2Portvec Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetPortWakeonFrameEn_11p Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetPortWakeonFrameEn_11p Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetPortWakeonFrameEnSt_11p Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetWoLMac Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetWoLMac Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetPerPortWoLMac Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetPerPortWoLMac Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetWoLPass Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetWoLPass Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetWolControl Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetWolControl Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):	  DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetWolControlMc Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetWolControlMc Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetWakeupSource Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysClearWakeupSource Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetGenMac Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetGenMac Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetCutThroughHold Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetCutThroughHold Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetCTTooEarly Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetCTTooEarly Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetCTTooEarlyIntEn Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetCTTooEarlyIntEn Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysSetCutThroughPoint Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("gsysGetCutThroughPoint Called.\n"));
gtSysCtrl.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysCtrl.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysStatus.c (user\switch\src\msapi):    DBG_INFO(("gsysGetPPUState Called.\n"));
gtSysStatus.c (user\switch\src\msapi):        DBG_INFO(("Not Supported.\n"));
gtSysStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysStatus.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysStatus.c (user\switch\src\msapi):    DBG_INFO(("gsysGetSW_Mode Called.\n"));
gtSysStatus.c (user\switch\src\msapi):        DBG_INFO(("Not Supported.\n"));
gtSysStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysStatus.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysStatus.c (user\switch\src\msapi):    DBG_INFO(("gsysGetInitReady Called.\n"));
gtSysStatus.c (user\switch\src\msapi):        DBG_INFO(("Not Supported.\n"));
gtSysStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysStatus.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtSysStatus.c (user\switch\src\msapi):    DBG_INFO(("gsysGetFreeQSize Called.\n"));
gtSysStatus.c (user\switch\src\msapi):        DBG_INFO(("Not Supported.\n"));
gtSysStatus.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtSysStatus.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtTCAM.c (user\switch\src\msapi):    DBG_INFO(("gprtSetTcamMode Called.\n"));
gtTCAM.c (user\switch\src\msapi):        DBG_INFO(("gstpGetPortState failed.\n"));
gtTCAM.c (user\switch\src\msapi):        DBG_INFO(("gstpSetPortState failed.\n"));
gtTCAM.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtTCAM.c (user\switch\src\msapi):      DBG_INFO(("OK.\n"));
gtTCAM.c (user\switch\src\msapi):        DBG_INFO(("gstpSetPortState failed.\n"));
gtTCAM.c (user\switch\src\msapi):    DBG_INFO(("gprtGetTcamMode Called.\n"));
gtTCAM.c (user\switch\src\msapi):        DBG_INFO(("Failed.\n"));
gtTCAM.c (user\switch\src\msapi):        DBG_INFO(("OK.\n"));
gtTCAM.c (user\switch\src\msapi):    DBG_INFO(("gtcamFlushAll Called.\n"));
gtTCAM.c (user\switch\src\msapi):        DBG_INFO(("Failed (tcamOperationPerform returned GT_FAIL).\n"));
gtTCAM.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtTCAM.c (user\switch\src\msapi):    DBG_INFO(("gtcamFlushEntry Called.\n"));
gtTCAM.c (user\switch\src\msapi):        DBG_INFO(("Failed (tcamOperationPerform returned GT_FAIL).\n"));
gtTCAM.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtTCAM.c (user\switch\src\msapi):    DBG_INFO(("gtcamLoadEntry Called.\n"));
gtTCAM.c (user\switch\src\msapi):        DBG_INFO(("Failed (tcamOperationPerform returned GT_FAIL).\n"));
gtTCAM.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtTCAM.c (user\switch\src\msapi):    DBG_INFO(("gtcamPurgyEntry Called.\n"));
gtTCAM.c (user\switch\src\msapi):        DBG_INFO(("Failed (tcamOperationPerform returned GT_FAIL).\n"));
gtTCAM.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtTCAM.c (user\switch\src\msapi):    DBG_INFO(("gtcamReadTCAMData Called.\n"));
gtTCAM.c (user\switch\src\msapi):        DBG_INFO(("Failed (tcamOperationPerform returned GT_FAIL).\n"));
gtTCAM.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtTCAM.c (user\switch\src\msapi):    DBG_INFO(("gtcamGetNextTCAMData Called.\n"));
gtTCAM.c (user\switch\src\msapi):        DBG_INFO(("Failed (tcamOperationPerform returned GT_FAIL).\n"));
gtTCAM.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtTCAM.c (user\switch\src\msapi):    DBG_INFO(("gtcamAddEntry Called.\n"));
gtTCAM.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtTCAM.c (user\switch\src\msapi):    DBG_INFO(("gtcamDelEntry Called.\n"));
gtTCAM.c (user\switch\src\msapi):    DBG_INFO(("OK.\n"));
gtVct.c (user\switch\src\msapi):    DBG_INFO(("getCableStatus_100Phy Called.\n"));
gtVct.c (user\switch\src\msapi):    DBG_INFO(("getCableStatus_Phy1000M Called.\n"));
gtVct.c (user\switch\src\msapi):    DBG_INFO(("Reg28 after test : %0#x.\n", reg28));
gtVct.c (user\switch\src\msapi):    DBG_INFO(("workAround for Gigabit Phy Called.\n"));
gtVct.c (user\switch\src\msapi):    DBG_INFO(("workAround for Gigabit Phy completed.\n"));
gtVct.c (user\switch\src\msapi):    DBG_INFO(("getCableStatus_Phy1000M Called.\n"));
gtVct.c (user\switch\src\msapi):    DBG_INFO(("Page 5 of Reg16 after test : %0#x.\n", u16Data));
gtVct.c (user\switch\src\msapi):    DBG_INFO(("gvctGetCableDiag Called.\n"));
gtVct.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtVct.c (user\switch\src\msapi):            DBG_INFO(("Not able to disable PPUEn.\n"));
gtVct.c (user\switch\src\msapi):        DBG_INFO(("Not able to reset the Phy.\n"));
gtVct.c (user\switch\src\msapi):        DBG_INFO(("Not able to reset the Phy.\n"));
gtVct.c (user\switch\src\msapi):            DBG_INFO(("Not able to enable PPUEn.\n"));
gtVct.c (user\switch\src\msapi):        DBG_INFO(("Not able to read a Phy register.\n"));
gtVct.c (user\switch\src\msapi):        DBG_INFO(("Valid Bit is not set (%0#x).\n", u16Data));
gtVct.c (user\switch\src\msapi):        DBG_INFO(("Not able to read a Phy register.\n"));
gtVct.c (user\switch\src\msapi):        DBG_INFO(("Not able to read a paged Phy register.\n"));
gtVct.c (user\switch\src\msapi):        DBG_INFO(("Valid Bit is not set (%0#x).\n", u16Data));
gtVct.c (user\switch\src\msapi):        DBG_INFO(("Not able to read a paged Phy register.\n"));
gtVct.c (user\switch\src\msapi):    DBG_INFO(("gvctGet1000BTExtendedStatus Called.\n"));
gtVct.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtVct.c (user\switch\src\msapi):            DBG_INFO(("Not able to disable PPUEn.\n"));
gtVct.c (user\switch\src\msapi):               DBG_INFO(("Device is not supporting Extended Cable Status.\n"));
gtVct.c (user\switch\src\msapi):            DBG_INFO(("Not able to enable PPUEn.\n"));
gtVct_mad.c (user\switch\src\msapi):    DBG_INFO(("gvctGetCableDiag_mad Called.\n"));
gtVct_mad.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtVct_mad.c (user\switch\src\msapi):            DBG_INFO(("Not able to disable PPUEn.\n"));
gtVct_mad.c (user\switch\src\msapi):      DBG_INFO(("Failed to run mdDiagGetCableStatus.\n"));
gtVct_mad.c (user\switch\src\msapi):            DBG_INFO(("Not able to enable PPUEn.\n"));
gtVct_mad.c (user\switch\src\msapi):    DBG_INFO(("gvctGet1000BTExtendedStatus_mad Called.\n"));
gtVct_mad.c (user\switch\src\msapi):        DBG_INFO(("Unknown PHY device.\n"));
gtVct_mad.c (user\switch\src\msapi):            DBG_INFO(("Not able to disable PPUEn.\n"));
gtVct_mad.c (user\switch\src\msapi):      DBG_INFO(("Failed to run mdDiagGet1000BTExtendedStatus.\n"));
gtVct_mad.c (user\switch\src\msapi):            DBG_INFO(("Not able to enable PPUEn.\n"));
gtWeight.c (user\switch\src\msapi):    DBG_INFO(("gsysSetQoSWeight Called.\n"));
gtWeight.c (user\switch\src\msapi):               DBG_INFO(("Failed.\n"));
gtWeight.c (user\switch\src\msapi):                DBG_INFO(("Should not come to this point.\n"));
gtWeight.c (user\switch\src\msapi):                   DBG_INFO(("Should not come to this point.\n"));
gtWeight.c (user\switch\src\msapi):               DBG_INFO(("Failed.\n"));
gtWeight.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtWeight.c (user\switch\src\msapi):    DBG_INFO(("gsysGetQoSWeight Called.\n"));
gtWeight.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtWeight.c (user\switch\src\msapi):           DBG_INFO(("Failed.\n"));
gtWeight.c (user\switch\src\msapi):               DBG_INFO(("Failed.\n"));
gtWeight.c (user\switch\src\msapi):               DBG_INFO(("Failed.\n"));
gtWeight.c (user\switch\src\msapi):               DBG_INFO(("Failed.\n"));
gtWeight.c (user\switch\src\msapi):               DBG_INFO(("Failed.\n"));
gtWeight.c (user\switch\src\msapi):                   DBG_INFO(("Should not come to this point.\n"));
hgVlan.c (user\switch\sample\vlansetup):        MSG_PRINT(("gprtSetPortVid returned fail.\n"));
hgVlan.c (user\switch\sample\vlansetup):            MSG_PRINT(("gprtSetPortVid returned fail.\n"));
hgVlan.c (user\switch\sample\vlansetup):        MSG_PRINT(("gvlnSetPortVlanPorts returned fail.\n"));
hgVlan.c (user\switch\sample\vlansetup):            MSG_PRINT(("gvlnSetPortVlanPorts returned fail.\n"));
hgVlan.c (user\switch\sample\vlansetup):        MSG_PRINT(("gvlnSetPortVlanPorts returned fail.\n"));
Icmp.c (lwip-1.4.1\src\core\ipv4):        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %c.\n", ret));
Icmp.c (lwip-1.4.1\src\core\ipv4):    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n", 
Icmp.c (lwip-1.4.1\src\core\ipv4):    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
Icmp.c (lwip-1.4.1\src\core\ipv4):  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));
Icmp6.c (lwip-1.4.1\src\core\ipv6):      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo (%"X16_F")\n", inet_chksum_pseudo(p, &(iphdr->src), &(iphdr->dest), IP_PROTO_ICMP, p->tot_len)));
Icmp6.c (lwip-1.4.1\src\core\ipv6):    LWIP_DEBUGF(ICMP_DEBUG, ("icmp: p->len %"S16_F" p->tot_len %"S16_F"\n", p->len, p->tot_len));
Icmp6.c (lwip-1.4.1\src\core\ipv6):    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo (%"X16_F")\n", inet_chksum_pseudo(p, &(iphdr->src), &(iphdr->dest), IP_PROTO_ICMP, p->tot_len)));
Icmp6.c (lwip-1.4.1\src\core\ipv6):    /*    LWIP_DEBUGF("icmp: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len);*/
Icmp6.c (lwip-1.4.1\src\core\ipv6):    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" not supported.\n", (s16_t)type));
Icmp6.c (lwip-1.4.1\src\core\ipv6):    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_dest_unreach: failed to allocate pbuf for ICMP packet.\n"));
Icmp6.c (lwip-1.4.1\src\core\ipv6):    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_dest_unreach: failed to allocate pbuf for ICMP packet.\n"));
Igmp.c (lwip-1.4.1\src\core\ipv4):  LWIP_DEBUGF(IGMP_DEBUG, ("\n"));
Igmp.c (lwip-1.4.1\src\core\ipv4):       LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: General IGMP_MEMB_QUERY on \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
Igmp.c (lwip-1.4.1\src\core\ipv4):           LWIP_DEBUGF(IGMP_DEBUG, (" using \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
Igmp.c (lwip-1.4.1\src\core\ipv4):           LWIP_DEBUGF(IGMP_DEBUG, (" with the group address as destination [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
Igmp.c (lwip-1.4.1\src\core\ipv4):          LWIP_DEBUGF(IGMP_DEBUG, ("\n"));
Igmp.c (lwip-1.4.1\src\core\ipv4):        LWIP_DEBUGF(IGMP_DEBUG, ("\n"));
Igmp.c (lwip-1.4.1\src\core\ipv4):          LWIP_DEBUGF(IGMP_DEBUG, ("\n"));          
Inet_chksum.c (lwip-1.4.1\src\core\ipv4):    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
Inet_chksum.c (lwip-1.4.1\src\core\ipv4):    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
Inet_chksum.c (lwip-1.4.1\src\core\ipv4):    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
Inet_chksum.c (lwip-1.4.1\src\core\ipv4):  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
Inet_chksum.c (lwip-1.4.1\src\core\ipv4):    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
Inet_chksum.c (lwip-1.4.1\src\core\ipv4):    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
Inet_chksum.c (lwip-1.4.1\src\core\ipv4):    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
Inet_chksum.c (lwip-1.4.1\src\core\ipv4):  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
Ip.c (lwip-1.4.1\src\core\ipv4):    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
Ip.c (lwip-1.4.1\src\core\ipv4):    LWIP_DEBUGF(IP_DEBUG, ("ip_forward: not forwarding LLA %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
Ip.c (lwip-1.4.1\src\core\ipv4):    LWIP_DEBUGF(IP_DEBUG, ("ip_forward: not bouncing packets back on incoming interface.\n"));
Ip.c (lwip-1.4.1\src\core\ipv4):  LWIP_DEBUGF(IP_DEBUG, ("ip_forward: forwarding packet to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
Ip.c (lwip-1.4.1\src\core\ipv4):    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", IPH_V(iphdr)));
Ip.c (lwip-1.4.1\src\core\ipv4):        ("IP header (len %"U16_F") does not fit in first pbuf (len %"U16_F"), IP packet dropped.\n",
Ip.c (lwip-1.4.1\src\core\ipv4):        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
Ip.c (lwip-1.4.1\src\core\ipv4):      ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
Ip.c (lwip-1.4.1\src\core\ipv4):      LWIP_DEBUGF(IP_DEBUG, ("ip_input: iphdr->dest 0x%"X32_F" netif->ip_addr 0x%"X32_F" (0x%"X32_F", 0x%"X32_F", 0x%"X32_F")\n",
Ip.c (lwip-1.4.1\src\core\ipv4):      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: UDP packet to DHCP client port %"U16_F"\n",
Ip.c (lwip-1.4.1\src\core\ipv4):        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: DHCP packet accepted.\n"));
Ip.c (lwip-1.4.1\src\core\ipv4):      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip_input: packet source is not valid.\n"));
Ip.c (lwip-1.4.1\src\core\ipv4):    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: packet not for us.\n"));
Ip.c (lwip-1.4.1\src\core\ipv4):    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip_reass()\n",
Ip.c (lwip-1.4.1\src\core\ipv4):    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("IP packet dropped since it was fragmented (0x%"X16_F") (while IP_REASSEMBLY == 0).\n",
Ip.c (lwip-1.4.1\src\core\ipv4):    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("IP packet dropped since there were IP options (while IP_OPTIONS_ALLOWED == 0).\n"));
Ip.c (lwip-1.4.1\src\core\ipv4):  LWIP_DEBUGF(IP_DEBUG, ("ip_input: \n"));
Ip.c (lwip-1.4.1\src\core\ipv4):  LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));
Ip.c (lwip-1.4.1\src\core\ipv4):      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", IPH_PROTO(iphdr)));
Ip.c (lwip-1.4.1\src\core\ipv4):  LWIP_DEBUGF(IP_DEBUG, ("ip_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], netif->num));
Ip.c (lwip-1.4.1\src\core\ipv4):    LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
Ip.c (lwip-1.4.1\src\core\ipv4):    LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
Ip.c (lwip-1.4.1\src\core\ipv4):  LWIP_DEBUGF(IP_DEBUG, ("IP header:\n"));
Ip.c (lwip-1.4.1\src\core\ipv4):  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
Ip.c (lwip-1.4.1\src\core\ipv4):  LWIP_DEBUGF(IP_DEBUG, ("|%2"S16_F" |%2"S16_F" |  0x%02"X16_F" |     %5"U16_F"     | (v, hl, tos, len)\n",
Ip.c (lwip-1.4.1\src\core\ipv4):  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
Ip.c (lwip-1.4.1\src\core\ipv4):  LWIP_DEBUGF(IP_DEBUG, ("|    %5"U16_F"      |%"U16_F"%"U16_F"%"U16_F"|    %4"U16_F"   | (id, flags, offset)\n",
Ip.c (lwip-1.4.1\src\core\ipv4):  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
Ip.c (lwip-1.4.1\src\core\ipv4):  LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |    0x%04"X16_F"     | (ttl, proto, chksum)\n",
Ip.c (lwip-1.4.1\src\core\ipv4):  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
Ip.c (lwip-1.4.1\src\core\ipv4):  LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  | (src)\n",
Ip.c (lwip-1.4.1\src\core\ipv4):  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
Ip.c (lwip-1.4.1\src\core\ipv4):  LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  | (dest)\n",
Ip.c (lwip-1.4.1\src\core\ipv4):  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
Ip6.c (lwip-1.4.1\src\core\ipv6):    LWIP_DEBUGF(IP_DEBUG, ("\n"));
Ip6.c (lwip-1.4.1\src\core\ipv6):  LWIP_DEBUGF(IP_DEBUG, ("\n"));
Ip6.c (lwip-1.4.1\src\core\ipv6):    LWIP_DEBUGF(IP_DEBUG, ("\n"));
Ip6.c (lwip-1.4.1\src\core\ipv6):  /*  LWIP_DEBUGF("ip_input: \n");
Ip6.c (lwip-1.4.1\src\core\ipv6):  LWIP_DEBUGF("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len);*/
Ip6.c (lwip-1.4.1\src\core\ipv6):    LWIP_DEBUGF(IP_DEBUG, ("Unsupported transport protocol %"U16_F"\n",
Ip6.c (lwip-1.4.1\src\core\ipv6):  LWIP_DEBUGF(IP_DEBUG, ("len %"U16_F" tot_len %"U16_F"\n", p->len, p->tot_len));
Ip6.c (lwip-1.4.1\src\core\ipv6):  LWIP_DEBUGF(IP_DEBUG, ("len %"U16_F" tot_len %"U16_F"\n", p->len, p->tot_len));
Ip6.c (lwip-1.4.1\src\core\ipv6):  LWIP_DEBUGF(IP_DEBUG, ("ip_output_if: %c%c (len %"U16_F")\n", netif->name[0], netif->name[1], p->tot_len));
Ip6.c (lwip-1.4.1\src\core\ipv6):    LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to 0x%"X32_F"\n", dest->addr));
Ip6.c (lwip-1.4.1\src\core\ipv6):    LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to 0x%"X32_F"\n", dest->addr));
Ip6.c (lwip-1.4.1\src\core\ipv6):  LWIP_DEBUGF(IP_DEBUG, ("IP header:\n"));
Ip6.c (lwip-1.4.1\src\core\ipv6):  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
Ip6.c (lwip-1.4.1\src\core\ipv6):  LWIP_DEBUGF(IP_DEBUG, ("|%2"S16_F" |  %"X16_F"%"X16_F"  |      %"X16_F"%"X16_F"           | (v, traffic class, flow label)\n",
Ip6.c (lwip-1.4.1\src\core\ipv6):  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
Ip6.c (lwip-1.4.1\src\core\ipv6):  LWIP_DEBUGF(IP_DEBUG, ("|    %5"U16_F"      | %2"U16_F"  |  %2"U16_F"   | (len, nexthdr, hoplim)\n",
Ip6.c (lwip-1.4.1\src\core\ipv6):  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
Ip6.c (lwip-1.4.1\src\core\ipv6):  LWIP_DEBUGF(IP_DEBUG, ("|       %4"X32_F"      |       %4"X32_F"     | (src)\n",
Ip6.c (lwip-1.4.1\src\core\ipv6):  LWIP_DEBUGF(IP_DEBUG, ("|       %4"X32_F"      |       %4"X32_F"     | (src)\n",
Ip6.c (lwip-1.4.1\src\core\ipv6):  LWIP_DEBUGF(IP_DEBUG, ("|       %4"X32_F"      |       %4"X32_F"     | (src)\n",
Ip6.c (lwip-1.4.1\src\core\ipv6):  LWIP_DEBUGF(IP_DEBUG, ("|       %4"X32_F"      |       %4"X32_F"     | (src)\n",
Ip6.c (lwip-1.4.1\src\core\ipv6):  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
Ip6.c (lwip-1.4.1\src\core\ipv6):  LWIP_DEBUGF(IP_DEBUG, ("|       %4"X32_F"      |       %4"X32_F"     | (dest)\n",
Ip6.c (lwip-1.4.1\src\core\ipv6):  LWIP_DEBUGF(IP_DEBUG, ("|       %4"X32_F"      |       %4"X32_F"     | (dest)\n",
Ip6.c (lwip-1.4.1\src\core\ipv6):  LWIP_DEBUGF(IP_DEBUG, ("|       %4"X32_F"      |       %4"X32_F"     | (dest)\n",
Ip6.c (lwip-1.4.1\src\core\ipv6):  LWIP_DEBUGF(IP_DEBUG, ("|       %4"X32_F"      |       %4"X32_F"     | (dest)\n",
Ip6.c (lwip-1.4.1\src\core\ipv6):  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
Ipcp.c (lwip-1.4.1\src\netif\ppp):  IPCPDEBUG(LOG_INFO, ("ipcp_ackci: received bad Ack!\n"));
Ipcp.c (lwip-1.4.1\src\netif\ppp):  IPCPDEBUG(LOG_INFO, ("ipcp_nakci: received bad Nak!\n"));
Ipcp.c (lwip-1.4.1\src\netif\ppp):  IPCPDEBUG(LOG_INFO, ("ipcp_rejci: received bad Reject!\n"));
Ipcp.c (lwip-1.4.1\src\netif\ppp):      IPCPDEBUG(LOG_INFO, ("ipcp_reqci: bad CI length!\n"));
Ip_addr.h (lwip-1.4.1\src\include\ipv6\lwip):        LWIP_DEBUGF(debug, ("%"X32_F":%"X32_F":%"X32_F":%"X32_F":%"X32_F":%"X32_F":%"X32_F":%"X32_F"\n", \
Ip_frag.c (lwip-1.4.1\src\core\ipv4):      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
Ip_frag.c (lwip-1.4.1\src\core\ipv4):    LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: IP options currently not supported!\n"));
Ip_frag.c (lwip-1.4.1\src\core\ipv4):      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass: matching previous fragment ID=%"X16_F"\n",
Ip_frag.c (lwip-1.4.1\src\core\ipv4):     ("ip_reass: last fragment seen, total len %"S16_F"\n",
Lcp.c (lwip-1.4.1\src\netif\ppp):    LCPDEBUG(LOG_INFO, ("lcp_rprotrej: Rcvd short Protocol-Reject packet!\n"));
Lcp.c (lwip-1.4.1\src\netif\ppp):  LCPDEBUG(LOG_INFO, ("lcp_rprotrej: Rcvd Protocol-Reject packet for %x!\n", prot));
Lcp.c (lwip-1.4.1\src\netif\ppp):  LCPDEBUG(LOG_WARNING, ("lcp_protrej: Received Protocol-Reject for LCP!\n"));
Lcp.c (lwip-1.4.1\src\netif\ppp):    LCPDEBUG(LOG_INFO, ("lcp_addci: CHAR opt=%d %X '%z'\n", opt, val, val)); \
Lcp.c (lwip-1.4.1\src\netif\ppp):  LCPDEBUG(LOG_WARNING, ("lcp_acki: received bad Ack!\n"));
Lcp.c (lwip-1.4.1\src\netif\ppp):        LCPDEBUG(LOG_NOTICE, ("Serial line is looped back.\n"));
Lcp.c (lwip-1.4.1\src\netif\ppp):  LCPDEBUG(LOG_WARNING, ("lcp_nakci: received bad Nak!\n"));
Lcp.c (lwip-1.4.1\src\netif\ppp):  LCPDEBUG(LOG_WARNING, ("lcp_rejci: received bad Reject!\n"));
Lcp.c (lwip-1.4.1\src\netif\ppp):      LCPDEBUG(LOG_WARNING, ("lcp_reqci: bad CI length!\n"));
Lcp.c (lwip-1.4.1\src\netif\ppp):  LCPDEBUG(LOG_INFO, ("lcp_reqci: returning CONF%s.\n", CODENAME(rc)));
Lcp.c (lwip-1.4.1\src\netif\ppp):          printer(arg, "\\n");
Lcp.c (lwip-1.4.1\src\netif\ppp):    LCPDEBUG(LOG_NOTICE, ("Serial link appears to be disconnected.\n"));
Lcp.c (lwip-1.4.1\src\netif\ppp):    LCPDEBUG(LOG_WARNING, ("appear to have received our own echo-reply!\n"));
macAddr.c (user\switch\sample\macaddress):        MSG_PRINT(("gfdbAddMacEntry returned fail.\n"));
macAddr.c (user\switch\sample\macaddress):        MSG_PRINT(("gfdbDelMacEntry returned fail.\n"));
macAddr.c (user\switch\sample\macaddress):        MSG_PRINT(("gfdbAddMacEntry returned fail.\n"));
macAddr.c (user\switch\sample\macaddress):        MSG_PRINT(("gfdbDelMacEntry returned fail.\n"));
macAddr.c (user\switch\sample\macaddress):    MSG_PRINT(("ATU List:\n"));
madCpCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdCopperSetAutoNeg called.\n"));
madCpCtrl.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Copper not supported.\n"));
madCpCtrl.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Unknown AutoNeg mode(%#x) is set.\n", (unsigned int)(mode & ~MAD_AUTO_AD_MASK)));
madCpCtrl.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading from paged phy reg (%i,%i) failed.\n",0,MAD_REG_AUTO_AD));
madCpCtrl.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to paged phy reg (%i,%i) failed.\n",0,MAD_REG_AUTO_AD));
madCpCtrl.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading from paged phy reg (%i,%i) failed.\n",0,MAD_REG_1000_CONTROL));
madCpCtrl.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to paged phy reg (%i,%i) failed.\n",0,MAD_REG_1000_CONTROL));
madCpCtrl.c (user\phy\src\madapi):                    MAD_DBG_ERROR(("Unknown mode %i.\n",(int)mode));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Set control register failed.\n"));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Soft Reset failed.\n"));
madCpCtrl.c (user\phy\src\madapi):          MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):          MAD_DBG_ERROR(("Soft Reset failed.\n"));
madCpCtrl.c (user\phy\src\madapi):          MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):          MAD_DBG_ERROR(("Soft Reset failed.\n"));
madCpCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdCopperGetAutoNeg called.\n"));
madCpCtrl.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Copper not supported.\n"));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg (%i,%i) failed.\n",0,MAD_REG_AUTO_AD));
madCpCtrl.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading from paged phy reg (%i,%i) failed.\n",0,MAD_REG_AUTO_AD));
madCpCtrl.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading to paged phy reg (%i,%i) failed.\n",0,MAD_REG_AUTO_AD));
madCpCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdCopperSetAutoRestart called.\n"));
madCpCtrl.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %i is over range.\n", (int)port));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Copper not supported.\n"));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdCopperSetMDIMode called.\n"));
madCpCtrl.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Copper not supported.\n"));
madCpCtrl.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Unknown MDI Crossover mode is set.\n"));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Soft Reset failed.\n"));
madCpCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdCopperGetMDIMode called.\n"));
madCpCtrl.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Copper not supported.\n"));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading to paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Unknown MDI Crossover mode is set.\n"));
madCpCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdCopperSetDownshiftEnable called.\n"));
madCpCtrl.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Copper not supported.\n"));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Down shift not supported.\n"));
madCpCtrl.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Soft Reset failed.\n"));
madCpCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdCopperGetDownshiftEnable called.\n"));
madCpCtrl.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Copper not supported.\n"));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Down shift not supported.\n"));
madCpCtrl.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdCopperSetDTEDetectEnable called.\n"));
madCpCtrl.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Copper not supported.\n"));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("DTE not supported.\n"));
madCpCtrl.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):                MAD_DBG_ERROR(("dreWorkAround failed.\n"));
madCpCtrl.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):                MAD_DBG_ERROR(("dreWorkAround failed.\n"));
madCpCtrl.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Soft Reset failed.\n"));
madCpCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdCopperGetDTEDetectEnable called.\n"));
madCpCtrl.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Copper not supported.\n"));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("DTE not supported.\n"));
madCpCtrl.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Reading to paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Reading to paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Reading to paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Reading to paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Reading to paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Reading to paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdCopperSetLinkDownDelay called.\n"));
madCpCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madCpCtrl.c (user\phy\src\madapi):     MAD_DBG_ERROR(("Link down delay is not supported.\n"));
madCpCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Copper not supported.\n"));
madCpCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Writing phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdCopperGetLinkDownDelay called.\n"));
madCpCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madCpCtrl.c (user\phy\src\madapi):     MAD_DBG_ERROR(("Link down delay is not supported.\n"));
madCpCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Copper not supported.\n"));
madCpCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Reading phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdCopperSetLinkDownDelayEnable called.\n"));
madCpCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madCpCtrl.c (user\phy\src\madapi):     MAD_DBG_ERROR(("Link down delay is not supported.\n"));
madCpCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Copper not supported.\n"));
madCpCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Writing phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdCopperGetLinkDownDelayEnable called.\n"));
madCpCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madCpCtrl.c (user\phy\src\madapi):     MAD_DBG_ERROR(("Link down delay is not supported.\n"));
madCpCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Copper not supported.\n"));
madCpCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Reading phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdCopperSetSpeedDuplex called.\n"));
madCpCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Failed Setting for (port %i, mode %i) \n",(int)port,(int)chkMode));
madCpCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdCopperSet1000TMasterMode called.\n"));
madCpCtrl.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madCpCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("The port %d is not 1000T.\n", (int)port));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Copper not supported.\n"));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Soft Reset failed.\n"));
madCpCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdCopperGet1000TMasterMode called.\n"));
madCpCtrl.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madCpCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("The port %d is not 1000T.\n", (int)port));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Copper not supported.\n"));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading to paged phy reg failed.\n"));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Paged Phy Register read failed.\n"));
madCpCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Paged Phy Register write failed.\n"));
madCpStatus.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdCopperGetDownshiftStatus called.\n"));
madCpStatus.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madCpStatus.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Copper not supported.\n"));
madCpStatus.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Down Shift not supported.\n"));
madCpStatus.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madCpStatus.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdCopperGetLinkStatus called.\n"));
madCpStatus.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madCpStatus.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Copper not supported.\n"));
madCpStatus.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madCpStatus.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdCopperGetSpeedStatus called.\n"));
madCpStatus.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madCpStatus.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Copper not supported.\n"));
madCpStatus.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madCpStatus.c (user\phy\src\madapi):        MAD_DBG_INFO(("Speed and Duplex is not resolved.\n"));
madCpStatus.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Invalid speed is set %i.\n",data));
madCpStatus.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdCopperGetDuplexStatus called.\n"));
madCpStatus.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madCpStatus.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Copper not supported.\n"));
madCpStatus.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madCpStatus.c (user\phy\src\madapi):        MAD_DBG_INFO(("Speed and Duplex is not resolved.\n"));
madCpStatus.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Invalid duplex is set %i.\n",data));
madCpStatus.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdCopperGetDTEDetectStatus called.\n"));
madCpStatus.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madCpStatus.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Copper not supported.\n"));
madCpStatus.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madCpStatus.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madCpStatus.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDevConfig.c (user\phy\src\driver):            MAD_DBG_ERROR(("SMI Paged Write failed (port%i, reg24)\n",port));
madDevConfig.c (user\phy\src\driver):            MAD_DBG_ERROR(("SMI Paged Write failed (port%i, reg23)\n",port));
madDevConfig.c (user\phy\src\driver):                MAD_DBG_ERROR(("SMI Paged Write failed (port%i, reg23)\n",port));
madDevConfig.c (user\phy\src\driver):                MAD_DBG_ERROR(("SMI Paged Write failed (port%i, reg23)\n",port));
madDevConfig.c (user\phy\src\driver):                MAD_DBG_ERROR(("SMI Paged Write failed (port%i, reg23)\n",port));
madDevConfig.c (user\phy\src\driver):            MAD_DBG_ERROR(("SMI Paged Write failed (port%i, reg24)\n",port));
madDevConfig.c (user\phy\src\driver):    MAD_DBG_ERROR(("Pre-Initialization is done for the device %#x.\n",(unsigned int)(dev->deviceId)));
madDevConfig.c (user\phy\src\driver):    MAD_DBG_ERROR(("Pre-Initialization is done for the device %#x.\n",(unsigned int)(dev->deviceId)));
madDevConfig.c (user\phy\src\driver):    MAD_DBG_ERROR(("Pre-Initialization is done for the device %#x.\n",(unsigned int)(dev->deviceId)));
madDevConfig.c (user\phy\src\driver):    MAD_DBG_ERROR(("Pre-Initialization is done for the device %#x.\n",(unsigned int)(dev->deviceId)));
madDevConfig.c (user\phy\src\driver):    MAD_DBG_ERROR(("Pre-Initialization is done for the device %#x.\n",(unsigned int)(dev->deviceId)));
madDevConfig.c (user\phy\src\driver):    MAD_DBG_ERROR(("Pre-Initialization is done for the device %#x.\n",(unsigned int)(dev->deviceId)));
madDevConfig.c (user\phy\src\driver):    MAD_DBG_ERROR(("Pre-Initialization is done for the device %#x.\n",(unsigned int)(dev->deviceId)));
madDevConfig.c (user\phy\src\driver):    MAD_DBG_ERROR(("Pre-Initialization is done for the device %#x.\n",(unsigned int)(dev->deviceId)));
madDevConfig.c (user\phy\src\driver):            MAD_DBG_ERROR(("SMI Paged Write failed (port%i, reg24)\n",port));
madDevConfig.c (user\phy\src\driver):            MAD_DBG_ERROR(("SMI Paged Write failed (port%i, reg23)\n",port));
madDevConfig.c (user\phy\src\driver):    MAD_DBG_ERROR(("Pre-Initialization is done for the device %#x.\n",(unsigned int)(dev->deviceId)));
madDevConfig.c (user\phy\src\driver):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madDevConfig.c (user\phy\src\driver):            MAD_DBG_ERROR(("SMI Paged Write failed (port%i, page: 0xfd  reg8)\n",port));
madDevConfig.c (user\phy\src\driver):            MAD_DBG_ERROR(("SMI Paged Write failed (port%i, page: 0xfd reg7)\n",port));
madDevConfig.c (user\phy\src\driver):            MAD_DBG_ERROR(("SMI Paged Write failed (port%i, Page FF reg17)\n",port));
madDevConfig.c (user\phy\src\driver):            MAD_DBG_ERROR(("SMI Paged Write failed (port%i, Page FF reg16)\n",port));
madDevConfig.c (user\phy\src\driver):            MAD_DBG_ERROR(("SMI Paged Write failed (port%i, Page FC reg24)\n",port));
madDevConfig.c (user\phy\src\driver):            MAD_DBG_ERROR(("SMI Paged Write failed (port%i, Page FC reg25)\n",port));
madDevConfig.c (user\phy\src\driver):            MAD_DBG_ERROR(("SMI Paged Write failed (port%i, Page 0 reg0)\n",port));
madDevConfig.c (user\phy\src\driver):    MAD_DBG_ERROR(("Pre-Initialization is done for the device %#x.\n",(unsigned int)(dev->deviceId)));
madDevConfig.c (user\phy\src\driver):                MAD_DBG_ERROR(("No Pre-Init routine is defined for the device %#x.\n",(unsigned int)(dev->deviceId)));
madDrvConfig.c (user\phy\src\driver):                MAD_DBG_ERROR(("Not able to read Phy Register.\n"));
madDrvConfig.c (user\phy\src\driver):                    MAD_DBG_ERROR(("Not able to write Phy Register.\n"));
madDrvConfig.c (user\phy\src\driver):                MAD_DBG_ERROR(("Not able to read Phy Register.\n"));
madDrvConfig.c (user\phy\src\driver):                    MAD_DBG_ERROR(("Not able to write Phy Register.\n"));
madDrvConfig.c (user\phy\src\driver):        MAD_DBG_ERROR(("Not able to read Phy Register.\n"));
madDrvConfig.c (user\phy\src\driver):                    MAD_DBG_ERROR(("Not able to write Phy Register.\n"));
madDrvConfig.c (user\phy\src\driver):                    MAD_DBG_ERROR(("Not able to write Phy Register.\n"));
madDrvConfig.c (user\phy\src\driver):        MAD_DBG_ERROR(("Not able to write Phy Register.\n"));
madDrvConfig.c (user\phy\src\driver):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDrvConfig.c (user\phy\src\driver):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDrvConfig.c (user\phy\src\driver):            MAD_DBG_ERROR(("Unknown HW Mode %#x.\n",data));
madDrvConfig.c (user\phy\src\driver):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDrvConfig.c (user\phy\src\driver):            MAD_DBG_ERROR(("Unknown HW Mode %#x.\n",data));
madDrvConfig.c (user\phy\src\driver):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDrvConfig.c (user\phy\src\driver):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDrvConfig.c (user\phy\src\driver):            MAD_DBG_ERROR(("Unknown HW Mode %#x.\n",data));
madDrvConfig.c (user\phy\src\driver):            MAD_DBG_ERROR(("Unknown HW Mode %#x.\n",data));
madDrvConfig.c (user\phy\src\driver):            MAD_DBG_ERROR(("Unknown HW Mode %#x.\n",data));
madDrvConfig.c (user\phy\src\driver):            MAD_DBG_ERROR(("Unknown HW Mode %#x.\n",data));
madDrvConfig.c (user\phy\src\driver):            MAD_DBG_ERROR(("Unknown HW Mode %#x.\n",data));
madDrvConfig.c (user\phy\src\driver):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDrvConfig.c (user\phy\src\driver):            MAD_DBG_ERROR(("Unknown HW Mode %#x.\n",data));
madDSPVct.c (user\phy\src\madapi\dspvct):  MAD_CRITIC_INFO(("@@@ Start madDspVct (hold, and no pending mode) collect data \n"));
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madDSPVct.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("DSP VCT not supported.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("DSP VCT type2 not supported.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):	MAD_CRITIC_INFO(("@@@ setting done, wait reg 17_0 = 0x400 \n"));
madDSPVct.c (user\phy\src\madapi\dspvct):       MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):          MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):            MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):          MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):/*		MAD_CRITIC_INFO(("@@@ regGain[%d][%d] = %d \n", l, m, madDspVctResultP->regGain[l][m]))); */
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):       MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):       MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_gain.c (user\phy\src\madapi\dspvct):  MAD_CRITIC_INFO(("@@@ Start madDspVct_gain (hold, and no pending mode) collect data \n"));
madDSPVct_gain.c (user\phy\src\madapi\dspvct):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madDSPVct_gain.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("DSP VCT not supported.\n"));
madDSPVct_gain.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("DSP VCT type2 not supported.\n"));
madDSPVct_gain.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_gain.c (user\phy\src\madapi\dspvct):/*      MAD_CRITIC_INFO(("@@@ setting done, wait reg 16_0xff = 0x8000 \n")); */
madDSPVct_gain.c (user\phy\src\madapi\dspvct):          MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madDSPVct_gain.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madDSPVct_gain.c (user\phy\src\madapi\dspvct):    MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madDSPVct_gain.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading page 0xff phy 18 data %d in pair %d %d times effcient %d.\n", madDspVctResultP->regGainPair[i][j], i, j,data&3));
madDSPVct_gain.c (user\phy\src\madapi\dspvct):    MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):       MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):	MAD_DBG_ERROR(("@@@ madDspVctResultP->regLen_21[0][0] %02x, [1] %02x, [2] %02x, [3] %02x \n",
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):       MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):  MAD_CRITIC_INFO(("@@@ Start madDspVct_linkdown (hold, and no pending mode) collect data \n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("DSP VCT not supported.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown.c (user\phy\src\madapi\dspvct):  MAD_DBG_INFO(("Exception ! File Syntax Error or Runtime Error!\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):/*	MAD_CRITIC_INFO(("@@@ setting done, wait reg 17_0 = 0x400 \n")); */
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):          MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):          MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):          MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):          MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("MAD DSP VCT failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("MAD DSP VCT failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("MAD DSP VCT failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):    MAD_CRITIC_INFO(("@@@ Start madDspVct_linkdown (pending mode) collect data \n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):/* MAD_CRITIC_INFO(("@@@ Start madDspVct_linkdown (pending mode) collect data \n")); */
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("DSP VCT not supported.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):            MAD_DBG_ERROR(("Running DSP VCT failed.\n"));
madDSPVct_linkdown_sm.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("Soft Reset failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):/*	MAD_CRITIC_INFO(("@@@ setting done, wait reg 17_0 = 0x400 \n")); */
madDSPVct_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("MAD DSP VCT failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):       MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):/*	  MAD_CRITIC_INFO(("@@@ regGain[%d][%d] = %d \n", l, m, madDspVctResultP->regGain[l][m])); */
madDSPVct_sm.c (user\phy\src\madapi\dspvct):          MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):          MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):          MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):          MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("MAD DSP VCT failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("MAD DSP VCT failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_ERROR(("MAD DSP VCT failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):    MAD_CRITIC_INFO(("@@@ Start madDspVct (pending mode) collect data \n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):/* MAD_CRITIC_INFO(("@@@ Start madDspVct_sm (pending mode) collect data \n")); */
madDSPVct_sm.c (user\phy\src\madapi\dspvct):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("DSP VCT not supported.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):            MAD_DBG_ERROR(("Running DSP VCT failed.\n"));
madDSPVct_sm.c (user\phy\src\madapi\dspvct):        MAD_DBG_ERROR(("Soft Reset failed.\n"));
madFbCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdFiberSetAutoNeg called.\n"));
madFbCtrl.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madFbCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Fiber not supported.\n"));
madFbCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("The phy is in switch, and do not support the function.\n"));
madFbCtrl.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Unknown AutoNeg mode(%#x) is set.\n", (unsigned int)(mode & ~MAD_AUTO_AD_MASK)));
madFbCtrl.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading from paged phy reg (%i,%i) failed.\n",0,MAD_REG_AUTO_AD));
madFbCtrl.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to paged phy reg (%i,%i) failed.\n",0,MAD_REG_AUTO_AD));
madFbCtrl.c (user\phy\src\madapi):                    MAD_DBG_ERROR(("Unknown mode %i.\n",(int)mode));
madFbCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madFbCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Soft Reset failed.\n"));
madFbCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdFiberGetAutoNeg called.\n"));
madFbCtrl.c (user\phy\src\madapi):		MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madFbCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Fiber not supported.\n"));
madFbCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("The phy is in switch, and do not support the function.\n"));
madFbCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg (%i,%i) failed.\n",0,MAD_REG_AUTO_AD));
madFbCtrl.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading from paged phy reg (%i,%i) failed.\n",0,MAD_REG_AUTO_AD));
madFbCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("The phy is in switch, and do not support the function.\n"));
madFbCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Paged Phy Register read failed.\n"));
madFbCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("The phy is in switch, and do not support the function.\n"));
madFbCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Paged Phy Register write failed.\n"));
madFbCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("The phy is in switch, and do not support the function.\n"));
madFbCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Paged Phy Register read failed.\n"));
madFbCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("The phy is in switch, and do not support the function.\n"));
madFbCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Paged Phy Register write failed.\n"));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Invalid port Number(%i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to get phy Address (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to read register (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Invalid port Number(%i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to get phy Address (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):    MAD_DBG_INFO(("data 0x%x.\n",data));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to write register (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Invalid port Number(%i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to get phy Address (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to read register (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):    MAD_DBG_INFO(("fOff %d, fLen %d, data 0x%x.\n",fieldOffset,fieldLength,*data));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Invalid port Number(%i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to get phy Address (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to read register (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to write register (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):    MAD_DBG_INFO(("fieldOff %d, fieldLen %d, data 0x%x.\n",fieldOffset,
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to get page Address (regAddr %i)\n",regAddr));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to get page Address (regAddr %i)\n",regAddr));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Invalid port Number(%i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to get phy Address (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to read register (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Invalid port Number(%i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to get phy Address (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to write register (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Invalid port Number(%i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to get phy Address (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to read register (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):    MAD_DBG_INFO(("fOff %d, fLen %d, data 0x%x.\n",
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Invalid port Number(%i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to get phy Address (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to read register (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to write register (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):    MAD_DBG_INFO(("fieldOff %d, fieldLen %d, data 0x%x.\n",fieldOffset,
madHwCntl.c (user\phy\src\driver):    MAD_DBG_INFO(("Software Reset...\n"));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Invalid port Number(%i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to get phy Address (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):            MAD_DBG_ERROR(("Failed to read register (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to write register (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):            MAD_DBG_ERROR(("Failed to read register (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):    MAD_DBG_INFO(("Software Reset...\n"));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to write register (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to write register (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to write register (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to read register (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to read XMIO register (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to write register (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to write register (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to write register (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to read register (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to write XMIO register (portNum %i)\n",portNum));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to read register \n"));
madHwCntl.c (user\phy\src\driver):    MAD_DBG_INFO(("fOff %d, fLen %d, data 0x%x.\n",fieldOffset,fieldLength,*data));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to read register \n"));
madHwCntl.c (user\phy\src\driver):        MAD_DBG_ERROR(("Failed to write register \n"));
madHwCntl.c (user\phy\src\driver):    MAD_DBG_INFO(("fieldOff %d, fieldLen %d, data 0x%x.\n",fieldOffset,
madIEEETest.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdDiagSetIEEETest called.\n"));
madIEEETest.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madIEEETest.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Unknown mode %i.\n",mode));
madIEEETest.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madIEEETest.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madIEEETest.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Soft Reset failed.\n"));
madIEEETest.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madIEEETest.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madIEEETest.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madIEEETest.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madIEEETest.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madIEEETest.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madIEEETest.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madIEEETest.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madIEEETest.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madIEEETest.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madIEEETest.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Soft Reset failed.\n"));
madIEEETest.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdDiagSetIEEETest called.\n"));
madIEEETest.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madIEEETest.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Unknown mode %i.\n",mode));
madIEEETest.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madIEEETest.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madIEEETest.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madIEEETest.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madIEEETest.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Soft Reset failed.\n"));
madIEEETest.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madIEEETest.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madIEEETest.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madIEEETest.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Soft Reset failed.\n"));
madIEEETest.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdDiagSetIEEETest called.\n"));
madIEEETest.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madIEEETest.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Unknown mode %i.\n",mode));
madIEEETest.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madIEEETest.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madIEEETest.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madIEEETest.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madIEEETest.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Soft Reset failed.\n"));
madIEEETest.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdDiagSetIEEETest called.\n"));
madIEEETest.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madInit.c (user\phy\sample\initialization\firebat):    MSG_PRINT(("MAD has been started.\n"));
madInt.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdIntSetEnable called.\n"));
madInt.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madInt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madInt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madInt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madInt.c (user\phy\src\madapi):     MAD_DBG_ERROR(("Device shoud be ether Copper or Fiber.\n"));
madInt.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdIntSetEnable_f called.\n"));
madInt.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madInt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madInt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madInt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madInt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madInt.c (user\phy\src\madapi):     MAD_DBG_ERROR(("Device shoud be ether Copper or Fiber.\n"));
madInt.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdIntGetEnable called.\n"));
madInt.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madInt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madInt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madInt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madInt.c (user\phy\src\madapi):     MAD_DBG_ERROR(("Device shoud be ether Copper or Fiber.\n"));
madInt.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdIntGetEnable_f called.\n"));
madInt.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madInt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madInt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madInt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madInt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madInt.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdIntGetStatus called.\n"));
madInt.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madInt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madInt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madInt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madInt.c (user\phy\src\madapi):     MAD_DBG_ERROR(("Device shoud be ether Copper or Fiber.\n"));
madInt.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdIntGetStatus_f called.\n"));
madInt.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madInt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madInt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madInt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madInt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madInt.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdIntGetPortSummary called.\n"));
madInt.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madInt.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdTempIntSetEnable called.\n"));
madInt.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madInt.c (user\phy\src\madapi):    MAD_DBG_ERROR(("The temperature sensor interrup is not supported.\n"));
madInt.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madInt.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdIntGetEnable_f called.\n"));
madInt.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madInt.c (user\phy\src\madapi):    MAD_DBG_ERROR(("The temperature sensor interrup is not supported.\n"));
madInt.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madInt.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdIntGetStatus_f called.\n"));
madInt.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madInt.c (user\phy\src\madapi):    MAD_DBG_ERROR(("The temperature sensor interrup is not supported.\n"));
madInt.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):		MAD_DBG_ERROR(("Disable MACsec failed.\n"));
madLoopback.c (user\phy\src\madapi):		MAD_DBG_ERROR(("Invalid speed.\n"));
madLoopback.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Invalid mode.\n"));
madLoopback.c (user\phy\src\madapi):                MAD_DBG_ERROR(("mdGetLinkStatus failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Soft Reset failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("mdCopperGetSpeedStatus failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Soft Reset failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Soft Reset failed.\n"));
madLoopback.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Soft Reset failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("mdCopperGetSpeedStatus failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Soft Reset failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Soft Reset failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Soft Reset failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("mdCopperGetSpeedStatus failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Soft Reset failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Soft Reset failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Soft Reset failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Soft Reset failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):      MAD_DBG_ERROR(("SGMII Auto negotiation is enabled, and Mac Loopback cann't performed.\n"));
madLoopback.c (user\phy\src\madapi):      MAD_DBG_ERROR(("GBIC Auto negotiation is enabled, and Mac Loopback cann't performed.\n"));
madLoopback.c (user\phy\src\madapi):           MAD_DBG_ERROR(("mdGetLinkStatus failed.\n"));
madLoopback.c (user\phy\src\madapi):           MAD_DBG_INFO(("Auto neg is enabled and Link is on, Mac Loopback can not perform.\n"));
madLoopback.c (user\phy\src\madapi):              MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):              MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):              MAD_DBG_ERROR(("Soft Reset failed.\n"));
madLoopback.c (user\phy\src\madapi):              MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):              MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):              MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):              MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):              MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):              MAD_DBG_ERROR(("Soft Reset failed.\n"));
madLoopback.c (user\phy\src\madapi):              MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):              MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):              MAD_DBG_ERROR(("Soft Reset failed.\n"));
madLoopback.c (user\phy\src\madapi):              MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):              MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):              MAD_DBG_ERROR(("Soft Reset failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):         MAD_DBG_ERROR(("Soft Reset failed.\n"));
madLoopback.c (user\phy\src\madapi):				MAD_DBG_ERROR(("Set MAC loopback failed.\n"));
madLoopback.c (user\phy\src\madapi):				MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):				MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):				MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):          MAD_DBG_ERROR(("The phy is in switch, and do not support the function.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdDiagSetMACIfLoopback called.\n"));
madLoopback.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madLoopback.c (user\phy\src\madapi):        MAD_DBG_ERROR(("MAC Interface Loopback not supported.\n"));
madLoopback.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdDiagSetLineLoopback called.\n"));
madLoopback.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madLoopback.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Line Loopback not supported.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("mdGetLinkStatus failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("mdGetDuplexStatus failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_INFO(("Only Full Duplex mode is supported.\n"));
madLoopback.c (user\phy\src\madapi):                    MAD_DBG_ERROR(("mdCopperSetAutoNeg failed.\n"));
madLoopback.c (user\phy\src\madapi):                    MAD_DBG_ERROR(("mdCopperSetAutoNeg failed.\n"));
madLoopback.c (user\phy\src\madapi):                    MAD_DBG_ERROR(("mdCopperSetAutoNeg failed.\n"));
madLoopback.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Invalid mode %i.\n",mode));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):                    MAD_DBG_ERROR(("mdCopperSetAutoNeg failed.\n"));
madLoopback.c (user\phy\src\madapi):                    MAD_DBG_ERROR(("mdCopperSetAutoNeg failed.\n"));
madLoopback.c (user\phy\src\madapi):                    MAD_DBG_ERROR(("mdCopperSetAutoNeg failed.\n"));
madLoopback.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Invalid mode %i.\n",mode));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):    MAD_DBG_INFO(("madIntGetEnable called.\n"));
madLoopback.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madLoopback.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading to paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading to paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading to paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):     MAD_DBG_ERROR(("Device shoud be ether Copper or Fiber.\n"));
madLoopback.c (user\phy\src\madapi):                    MAD_DBG_ERROR(("mdCopperSetAutoNeg failed.\n"));
madLoopback.c (user\phy\src\madapi):                    MAD_DBG_ERROR(("mdCopperSetAutoNeg failed.\n"));
madLoopback.c (user\phy\src\madapi):                    MAD_DBG_ERROR(("mdCopperSetAutoNeg failed.\n"));
madLoopback.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Invalid mode %i.\n",mode));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("mdIntGetStatus failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("mdIntSetEnable failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to phy reg failed.\n"));
madLoopback.c (user\phy\src\madapi):            MAD_DBG_ERROR(("mdIntSetEnable failed.\n"));
madLoopback.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdDiagSetExternalLoopback called.\n"));
madLoopback.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madLoopback.c (user\phy\src\madapi):        MAD_DBG_ERROR(("MAC Interface Loopback not supported.\n"));
madMACCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdSGMIISetAutoNeg called.\n"));
madMACCtrl.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madMACCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("SGMII not supported.\n"));
madMACCtrl.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Invalid mode.\n"));
madMACCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madMACCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madMACCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Soft Reset failed.\n"));
madMACCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdSGMIIGetAutoNeg called.\n"));
madMACCtrl.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madMACCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("SGMII not supported.\n"));
madMACCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madMACCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdRGMIISetSpeed called.\n"));
madMACCtrl.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madMACCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("RGMII not supported.\n"));
madMACCtrl.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Invalid mode.\n"));
madMACCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madMACCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madMACCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Soft Reset failed.\n"));
madMACCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdRGMIIGetSpeed called.\n"));
madMACCtrl.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madMACCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("RGMII not supported.\n"));
madMACCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madMACCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdMacSetFifoDepth called.\n"));
madMACCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madMACCtrl.c (user\phy\src\madapi):     MAD_DBG_ERROR(("Syncronize FIFO not supported.\n"));
madMACCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madMACCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdMacGetFifoDepth called.\n"));
madMACCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madMACCtrl.c (user\phy\src\madapi):     MAD_DBG_ERROR(("Syncronize FIFO not supported.\n"));
madMACCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madPatGen.c (user\phy\src\madapi):  MAD_DBG_INFO(("madPatCtrlSetPRBS called.\n"));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Pattern generator not supported.\n"));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_ERROR(("The phy is in switch, and do not support the function.\n"));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_INFO(("The harware mode is not QSGMII.\n"));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Writing to paged phy reg (%i,%i) failed.\n",MAD_PAGE4,MAD_REG_QSGMII_PRBS_CTRL));
madPatGen.c (user\phy\src\madapi):  MAD_DBG_INFO(("madPatCtrlGetPRBS called.\n"));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Pattern generator not supported.\n"));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_ERROR(("The phy is in switch, and do not support the function.\n"));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Reading to paged phy reg (%i,%i) failed.\n",MAD_PAGE4,MAD_REG_QSGMII_PRBS_CTRL));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Writing to paged phy reg (%i,%i) failed.\n",MAD_PAGE4,MAD_REG_QSGMII_PRBS_CTRL));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Writing to paged phy reg (%i,%i) failed.\n",MAD_PAGE4,MAD_REG_QSGMII_PRBS_CTRL));
madPatGen.c (user\phy\src\madapi):  MAD_DBG_INFO(("madResetPRBSCounters called.\n"));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Pattern generator not supported.\n"));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_ERROR(("The phy is in switch, and do not support the function.\n"));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Writing phy reg failed.\n"));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Writing phy reg failed.\n"));
madPatGen.c (user\phy\src\madapi):  MAD_DBG_INFO(("madPatCtrlSet125GPRBS called.\n"));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Pattern generator not supported.\n"));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_ERROR(("The phy is in switch, and do not support the function.\n"));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Writing to paged phy reg (%i,%i) failed.\n",MAD_PAGE1,MAD_REG_FIBER_PRBS_CTRL));
madPatGen.c (user\phy\src\madapi):  MAD_DBG_INFO(("madPatCtrlGet125GPRBS called.\n"));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Pattern generator not supported.\n"));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_ERROR(("The phy is in switch, and do not support the function.\n"));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Reading to paged phy reg (%i,%i) failed.\n",MAD_PAGE1,MAD_REG_FIBER_PRBS_CTRL));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Writing to paged phy reg (%i,%i) failed.\n",MAD_PAGE1,MAD_REG_FIBER_PRBS_CTRL));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Writing to paged phy reg (%i,%i) failed.\n",MAD_PAGE1,MAD_REG_FIBER_PRBS_CTRL));
madPatGen.c (user\phy\src\madapi):  MAD_DBG_INFO(("madResetCounters called.\n"));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Pattern generator not supported.\n"));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_ERROR(("The phy is in switch, and do not support the function.\n"));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Writing phy reg failed.\n"));
madPatGen.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Writing phy reg failed.\n"));
madPktGen.c (user\phy\src\madapi):            MAD_DBG_ERROR(("mdGetLinkStatus failed.\n"));
madPktGen.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madPktGen.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madPktGen.c (user\phy\src\madapi):            MAD_DBG_ERROR(("mdGetLinkStatus failed.\n"));
madPktGen.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madPktGen.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madPktGen.c (user\phy\src\madapi):            MAD_DBG_ERROR(("mdGetLinkStatus failed.\n"));
madPktGen.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madPktGen.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdDiagSetPktGenEnable called.\n"));
madPktGen.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPktGen.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Package generator not supported.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpSetEnable_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg (%i,%i) failed.\n",page,reg));
madPortPTP.c (user\phy\src\madapi):         MAD_DBG_ERROR(("Set macsec bypass PTP failed.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpGetEnable_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg (%i,%i) failed.\n",page,reg));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpSetRefClkSrc_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg (%i,%i) failed.\n",page,reg));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpGetRefClkSrc_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading paged phy reg (%i,%i) failed.\n",page,reg));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpSetInputSrc_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg (%i,%i) failed.\n",page,reg));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpGetInputSrc_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading paged phy reg (%i,%i) failed.\n",page,reg));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpSetOutputSrc_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg (%i,%i) failed.\n",page,reg));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpGetOutputSrc_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading paged phy reg (%i,%i) failed.\n",page,reg));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpSetIntEnable_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg (%i,%i) failed.\n",page,reg));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpGetIntEnable_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading paged phy reg (%i,%i) failed.\n",page,reg));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpSetConfig_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing PTPEType.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing MsgIDTSEn.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing TSArrPtr.\n"));
madPortPTP.c (user\phy\src\madapi):                MAD_DBG_INFO(("Failed mdPtpSetPortConfig.\n"));
madPortPTP.c (user\phy\src\madapi):					MAD_DBG_INFO(("Failed mdSetPortConfig.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpGetConfig_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading PTPEType.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading MsgIDTSEn.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading TSArrPtr.\n"));
madPortPTP.c (user\phy\src\madapi):                MAD_DBG_INFO(("Failed mdPtpGetPortConfig.\n"));
madPortPTP.c (user\phy\src\madapi):					MAD_DBG_INFO(("Failed mdGetPortConfig.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpSetGlobalConfig_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing PTPEType.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing MsgIDTSEn.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing TSArrPtr.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpGetGlobalConfig_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading PTPEType.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading MsgIDTSEn.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading TSArrPtr.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpSetPortConfig Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading DisPTP.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing TransSpec,DisTSpecCheck,DisTSOverwrite.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing MsgIDTSEn.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing TSArrPtr.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing LED control.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpGetPortConfig Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading PTPEType.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading MsgIDTSEn.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading TSArrPtr.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading LED control.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpSetPTPEn_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed mdPtpSetPortPTPEn.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpGetPTPEn_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):           MAD_DBG_INFO(("Failed mdPtpGetPortPTPEn.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpSetPortPTPEn Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading DisPTP.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing TransSpec,DisTSpecCheck,DisTSOverwrite.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpGetPortPTPEn Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading DisPTP.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpSetTsMode_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading TsMode.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing Ts Mode.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpGetTsMode_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading TsMode.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpSetMeanPathDelay_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing mean path delay.\n"));
madPortPTP.c (user\phy\src\madapi):	MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpGetMeanPathDelay_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading mean path delay.\n"));
madPortPTP.c (user\phy\src\madapi):	MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):	MAD_DBG_INFO(("mdPtpSetIngPathDelayAsym_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing ingress path delay asymmetry.\n"));
madPortPTP.c (user\phy\src\madapi):	MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):	MAD_DBG_INFO(("mdPtpGetIngPathDelayAsym_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading ingress path delay asymmetry.\n"));
madPortPTP.c (user\phy\src\madapi):	MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):	MAD_DBG_INFO(("mdPtpSetEgPathDelayAsym_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writeg egress path delay asymmetry.\n"));
madPortPTP.c (user\phy\src\madapi):	MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):	MAD_DBG_INFO(("mdPtpGetEgPathDelayAsym_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed readeg egress path delay asymmetry.\n"));
madPortPTP.c (user\phy\src\madapi):	MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpGetPTPInt_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading DisPTP.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):	MAD_DBG_INFO(("mdPtpGetPTPIntStatus_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading PTP status.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpGetPTPGlobalTime_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading PTP Global Time.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpGetTimeStamped Called.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading DisPTP.\n"));
madPortPTP.c (user\phy\src\madapi):            MAD_DBG_INFO(("Failed reading DisPTP.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpGetTSValidSt Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing Port Status.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpResetTimeStamp Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing Port Status.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):	MAD_DBG_INFO(("mdPtpGetTSDiscardCount_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading DisPTP.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpGetOutFCSErr_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading PTP output CRC error counter.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpGetReg Called.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading DisPTP.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpSetReg Called.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading DisPTP.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("madTaiSetEventConfig_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading TAI global config.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing TAI global config.\n"));
madPortPTP.c (user\phy\src\madapi):			MAD_DBG_INFO(("Failed reading TAI global config.\n"));
madPortPTP.c (user\phy\src\madapi):			MAD_DBG_INFO(("Failed reading TAI global config.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("madTaiGetEventConfig_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading TAI global config.\n"));
madPortPTP.c (user\phy\src\madapi):			MAD_DBG_INFO(("Failed reading TAI global config.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("madTaiGetEventStatus_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading PTPEType.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading PTPEType.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading PTPEType.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("madTaiGetEventInt_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading DisPTP.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("madTaiClearEventInt_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading eventInt.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing eventInt.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("madTaiSetClockSelect_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading TAI global config.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing TAI global config.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("madTaiGetClockSelect_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading TAI global config.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("madTaiGetClockSelect_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading IRL clock enable.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing IRL clock enable.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing time stamping clock period.\n"));
madPortPTP.c (user\phy\src\madapi):		MAD_DBG_INFO(("Failed writing IRL clock generation amount.\n"));
madPortPTP.c (user\phy\src\madapi):		MAD_DBG_INFO(("Failed writing IRL clock compensation amount.\n"));
madPortPTP.c (user\phy\src\madapi):		MAD_DBG_INFO(("Failed writing IRL clock comp amount in subpico secs.\n"));
madPortPTP.c (user\phy\src\madapi):	MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("madTaiGetClockSelect_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading IRL clock enable.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading time stamping clock period.\n"));
madPortPTP.c (user\phy\src\madapi):		MAD_DBG_INFO(("Failed reading IRL clock generation amount.\n"));
madPortPTP.c (user\phy\src\madapi):		MAD_DBG_INFO(("Failed reading IRL clock compensation amount.\n"));
madPortPTP.c (user\phy\src\madapi):		MAD_DBG_INFO(("Failed reading IRL clock compensation sub pico seconds.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("madTaiGetTrigInt_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading DisPTP.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("madTaiClearTrigInt_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing TAI global config.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading TAI global config.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("madTaiSetTrigConfig_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing Trig generation amount.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing Trig generation amount.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing TAI trig compare clock.\n"));
madPortPTP.c (user\phy\src\madapi):		MAD_DBG_INFO(("Failed writing TAI global config.\n"));
madPortPTP.c (user\phy\src\madapi):		MAD_DBG_INFO(("Failed writing TAI global config.\n"));
madPortPTP.c (user\phy\src\madapi):			MAD_DBG_INFO(("Failed writing TAI global config.\n"));
madPortPTP.c (user\phy\src\madapi):			MAD_DBG_INFO(("Failed writing TAI global config.\n"));
madPortPTP.c (user\phy\src\madapi):			MAD_DBG_INFO(("Failed writing trigger generation time.\n"));
madPortPTP.c (user\phy\src\madapi):			MAD_DBG_INFO(("Failed writing trigger generation time.\n"));
madPortPTP.c (user\phy\src\madapi):			MAD_DBG_INFO(("Failed writing trigger generation delay.\n"));
madPortPTP.c (user\phy\src\madapi):			MAD_DBG_INFO(("Failed writing IRLGen time.\n"));
madPortPTP.c (user\phy\src\madapi):			MAD_DBG_INFO(("Failed writing IRLGen time.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading TAI global config.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing TAI global config.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("madTaiGetTrigConfig_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading TAI trigGenAmt.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading TAI trigGenAmt.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading TAI TrigClkComp.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing TAI PulseWidth.\n"));
madPortPTP.c (user\phy\src\madapi):			MAD_DBG_INFO(("Failed reading TAI PulseWidth.\n"));
madPortPTP.c (user\phy\src\madapi):			MAD_DBG_INFO(("Failed reading TAI global config.\n"));
madPortPTP.c (user\phy\src\madapi):			MAD_DBG_INFO(("Failed reading TAI trigGenTime.\n"));
madPortPTP.c (user\phy\src\madapi):			MAD_DBG_INFO(("Failed reading TAI trigGenTime.\n"));
madPortPTP.c (user\phy\src\madapi):			MAD_DBG_INFO(("Failed reading TAI trigGenDelay.\n"));
madPortPTP.c (user\phy\src\madapi):			MAD_DBG_INFO(("Failed reading TAI lockCorrect.\n"));
madPortPTP.c (user\phy\src\madapi):			MAD_DBG_INFO(("Failed reading IRLGen Time.\n"));
madPortPTP.c (user\phy\src\madapi):			MAD_DBG_INFO(("Failed reading IRLGen Time.\n"));
madPortPTP.c (user\phy\src\madapi):			MAD_DBG_INFO(("Failed reading IRL Lock Correction.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading TAI trig config 0.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("madTaiSetTrigLock_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading TAI global config.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing TAI global config.\n"));
madPortPTP.c (user\phy\src\madapi):		MAD_DBG_INFO(("Failed writing trigGen time.\n"));
madPortPTP.c (user\phy\src\madapi):		MAD_DBG_INFO(("Failed writing trigGen time.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("madTaiGetTrigLock_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading TAI global config.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading TAI trigGenTime.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading TAI trigGenTime.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading TAI lockCorrect.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("madTaiGetTSClkPer_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading TS clock period.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("madTaiSetTSClkPer_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing TS clock period.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("madTaiSetMultiPTPSync_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading TAI register.\n"));
madPortPTP.c (user\phy\src\madapi):            MAD_DBG_INFO(("Failed writing TAI register.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing TAI register.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing TAI register.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing TAI register.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("madTaiGetMultiPTPSync_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading TAI register.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading TAI register.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading TAI register.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("madTaiGetTimeIncDec_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading DisPTP.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading DisPTP.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("madTaiSetTimeInc_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading DisPTP.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading DisPTP.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading DisPTP.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading DisPTP.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("madTaiSetTimeDec_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading TAI register.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing TAI register.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading TAI register.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing TAI register.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpGlobalPointDataSet Called.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):     MAD_DBG_INFO(("Failed.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpGlobalPointDataSet Called.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):	   MAD_DBG_INFO(("Failed.\n"));
madPortPTP.c (user\phy\src\madapi):               MAD_DBG_INFO(("Failed.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpModeSet_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed set PTP point/data.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpModeGet_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed get PTP point/data.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpSetExtTimeFormat_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed set PTP point/data.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpGetExtTimeFormat_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed get PTP point/data.\n"));
madPortPTP.c (user\phy\src\madapi):	MAD_DBG_INFO(("mdPtpGetIngActVec_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed get PTP point/data.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed get PTP point/data.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed get PTP point/data.\n"));
madPortPTP.c (user\phy\src\madapi):	MAD_DBG_INFO(("mdPtpSetIngActVec_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed set PTP point/data.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed set PTP point/data.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed set PTP point/data.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpGetEgActVec_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed get PTP point/data.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed get PTP point/data.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed get PTP point/data.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed get PTP point/data.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpSetEgActVec_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed set PTP point/data.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed set PTP point/data.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed set PTP point/data.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed set PTP point/data.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpTODLoadPointSet_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing TOD Load Point.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading TOD Load Point.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpTODLoadPointGet_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading TOD Load Point.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpTODOpCtrlSet_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):               MAD_DBG_INFO(("Failed.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing ToD operation control.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpTODOpCtrlGet_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading ToD operation control.\n"));
madPortPTP.c (user\phy\src\madapi):	MAD_DBG_INFO(("mdPtpPulseSet_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing Pulse parameters.\n"));
madPortPTP.c (user\phy\src\madapi):	MAD_DBG_INFO(("mdPtpPulseGet_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading Pulse parameters.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpTODTimeSet_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing ToD.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing ToD.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing ToD.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing ToD.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing ToD.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpTODTimeGet_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading ToD.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading ToD.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtp1722TimeSet_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing 1722 ToD.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing 1722 ToD.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing 1722 ToD.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing 1722 ToD.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtp1722TimeGet_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading 1722 ToD.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpTODCompSet_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing ToD compensation.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed writing ToD compensation.\n"));
madPortPTP.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdPtpTODCompGet_port Called.\n"));
madPortPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP not supported.\n"));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_INFO(("Failed reading ToD compensation.\n"));
madPortPTP.c (user\phy\src\madapi):		MAD_DBG_ERROR(("Readplus should not be called.\n"));
madPortPTP.c (user\phy\src\madapi):	MAD_DBG_ERROR(("Readplus should not be called.\n"));
madPortPTP.c (user\phy\src\madapi):	MAD_DBG_ERROR(("Writing to paged phy reg (%i,%i) failed.\n",14,14));
madPortPTP.c (user\phy\src\madapi):		MAD_DBG_ERROR(("Reading paged phy reg (%i,%i) failed.\n",14,15));
madPortPTP.c (user\phy\src\madapi):	  MAD_DBG_ERROR(("Reading paged phy reg (%i,%i) failed.\n",14,15));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg (%i,%i) failed.\n",page,reg));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading paged phy reg (%i,%i) failed.\n",page,reg));
madPortPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg (%i,%i) failed.\n",page,reg));
madPTP.c (user\phy\src\madapi):    MAD_DBG_INFO((("madNPtpSetClockInput Called.\n"));
madPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP 1step not supported.\n"));
madPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madPTP.c (user\phy\src\madapi):    MAD_DBG_INFO((("madNPtpGetClockInput Called.\n"));
madPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP 1step not supported.\n"));
madPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madPTP.c (user\phy\src\madapi):    MAD_DBG_INFO((("madNPtpSetEventCapValid Called.\n"));
madPTP.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("PTP 1step not supported.\n"));
madPTP.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madStats.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdStatsGetIdleErrorCounter called.\n"));
madStats.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madStats.c (user\phy\src\madapi):        MAD_DBG_ERROR(("The unknown mode not supported.\n"));
madStats.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madStats.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madStats.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madStats.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madStats.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madStats.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madStats.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdStatsSetCRCCheckerEnable called.\n"));
madStats.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madStats.c (user\phy\src\madapi):        MAD_DBG_ERROR(("feature not supported.\n"));
madStats.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading to paged phy reg failed.\n"));
madStats.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading to paged phy reg failed.\n"));
madStats.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading to paged phy reg failed.\n"));
madStats.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdStatsGetCRCCheckerEnable called.\n"));
madStats.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madStats.c (user\phy\src\madapi):        MAD_DBG_ERROR(("feature not supported.\n"));
madStats.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madStats.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madStats.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madStats.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdStatsGetCRCErrorCounter called.\n"));
madStats.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madStats.c (user\phy\src\madapi):        MAD_DBG_ERROR(("feature not supported.\n"));
madStats.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdStatsGetFrameCounter called.\n"));
madStats.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madStats.c (user\phy\src\madapi):        MAD_DBG_ERROR(("feature not supported.\n"));
madStats.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdStatsGetRxErCapture called.\n"));
madStats.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madStats.c (user\phy\src\madapi):        MAD_DBG_ERROR(("feature not supported.\n"));
madStats.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madStats.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdStatsGetRxErByteNun called.\n"));
madStats.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madStats.c (user\phy\src\madapi):        MAD_DBG_ERROR(("feature not supported.\n"));
madStats.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madStats.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdStatsGetRxEr called.\n"));
madStats.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madStats.c (user\phy\src\madapi):        MAD_DBG_ERROR(("feature not supported.\n"));
madStats.c (user\phy\src\madapi):      MAD_DBG_ERROR(("The phy is in switch, and do not support the function.\n"));
madStats.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madStats.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdStatsGetRxDv called.\n"));
madStats.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madStats.c (user\phy\src\madapi):        MAD_DBG_ERROR(("feature not supported.\n"));
madStats.c (user\phy\src\madapi):      MAD_DBG_ERROR(("The phy is in switch, and do not support the function.\n"));
madStats.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madStats.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdStatsGetRxData called.\n"));
madStats.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madStats.c (user\phy\src\madapi):        MAD_DBG_ERROR(("feature not supported.\n"));
madStats.c (user\phy\src\madapi):      MAD_DBG_ERROR(("The phy is in switch, and do not support the function.\n"));
madStats.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madStats.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSysGetLinkDisconnectCounter called.\n"));
madStats.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madStats.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Reading phy reg failed.\n"));
madStats.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSysGetLateCollision called.\n"));
madStats.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madStats.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Copper not supported.\n"));
madStats.c (user\phy\src\madapi):    MAD_DBG_ERROR(("mdGetDuplexStatus failed.\n"));
madStats.c (user\phy\src\madapi):    MAD_DBG_INFO(("Only Half Duplex mode is supported.\n"));
madStats.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madStats.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madStats.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSysSetLateCollision_winAdj called.\n"));
madStats.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madStats.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Copper not supported.\n"));
madStats.c (user\phy\src\madapi):    MAD_DBG_ERROR(("mdGetDuplexStatus failed.\n"));
madStats.c (user\phy\src\madapi):    MAD_DBG_INFO(("Only Half Duplex mode is supported.\n"));
madStats.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Writing phy reg failed.\n"));
madStats.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSysGetLateCollision_winAdj called.\n"));
madStats.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madStats.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Copper not supported.\n"));
madStats.c (user\phy\src\madapi):    MAD_DBG_ERROR(("mdGetDuplexStatus failed.\n"));
madStats.c (user\phy\src\madapi):    MAD_DBG_INFO(("Only Half Duplex mode is supported.\n"));
madStats.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Reading phy reg failed.\n"));
madSyncClkCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSyncClkSetRClk called.\n"));
madSyncClkCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSyncClkCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Sync Ethenet is not supported.\n"));
madSyncClkCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madSyncClkCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madSyncClkCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSyncClkGetRClk called.\n"));
madSyncClkCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSyncClkCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Sync Ethenet is not supported.\n"));
madSyncClkCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madSyncClkCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madSyncClkCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSyncClkSetClkSelect called.\n"));
madSyncClkCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSyncClkCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Sync Ethenet is not supported.\n"));
madSyncClkCtrl.c (user\phy\src\madapi):        MAD_DBG_INFO(("The harware mode is not QSGMII.\n"));
madSyncClkCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing from paged phy reg failed.\n"));
madSyncClkCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSyncClkGetClkSelect called.\n"));
madSyncClkCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSyncClkCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Sync Ethenet is not supported.\n"));
madSyncClkCtrl.c (user\phy\src\madapi):        MAD_DBG_INFO(("The harware mode is not QSGMII.\n"));
madSyncClkCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madSysConfig.c (user\phy\src\madapi):    MAD_DBG_INFO(("madLoadDriver Called.\n"));
madSysConfig.c (user\phy\src\madapi):        MAD_DBG_ERROR(("driver struture is NULL.\n"));
madSysConfig.c (user\phy\src\madapi):        MAD_DBG_ERROR(("sys config is NULL.\n"));
madSysConfig.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Device Driver already loaded.\n"));
madSysConfig.c (user\phy\src\madapi):       MAD_DBG_ERROR(("madRegister Failed.\n"));
madSysConfig.c (user\phy\src\madapi):        MAD_DBG_ERROR(("device Pre Init Failed.\n"));
madSysConfig.c (user\phy\src\madapi):            MAD_DBG_ERROR(("mdIntSetEnable returned fail.\n"));
madSysConfig.c (user\phy\src\madapi):        MAD_DBG_ERROR(("semCreate Failed.\n"));
madSysConfig.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Failed to Enable Phy (port %i)\n",port));
madSysConfig.c (user\phy\src\madapi):          MAD_DBG_ERROR(("Failed to set power up Phy (port %i)\n",port));
madSysConfig.c (user\phy\src\madapi):    MAD_DBG_INFO(("OK.\n"));
madSysConfig.c (user\phy\src\madapi):    MAD_DBG_INFO(("madUnloadDriver Called.\n"));
madSysConfig.c (user\phy\src\madapi):            MAD_DBG_ERROR(("mdIntSetEnable returned fail.\n"));
madSysConfig.c (user\phy\src\madapi):        MAD_DBG_ERROR(("SemDelete Failed.\n"));
madSysConfig.c (user\phy\src\madapi):	MAD_DBG_INFO(("fnRegister Called.\n"));
madSysCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdGetLinkStatus_ called.\n"));
madSysCtrl.c (user\phy\src\madapi):     MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):     MAD_DBG_ERROR(("Device is neither Copper nor Fiber.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("mdGetLinkStatus for Copper or Fiber failed.\n"));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Reading from phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Reading from phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Reading from phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Device is neither Copper nor Fiber nor SGMII nor QSFMII.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdGetSpeedStatus called.\n"));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):     MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):     MAD_DBG_ERROR(("Device is neither Copper nor Fiber.\n"));
madSysCtrl.c (user\phy\src\madapi):        MAD_DBG_INFO(("Speed and Duplex is not resolved.\n"));
madSysCtrl.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Invalid speed is set %i.\n",data));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdGetMacSpeedStatus called.\n"));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):     MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("mdGetLinkStatus for Copper or Fiber failed.\n"));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("mdGetSpeedStatus for Copper or Fiber failed.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Reading from phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Invalid speed is set %i.\n",data));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdGetDuplexStatus called.\n"));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):     MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):     MAD_DBG_ERROR(("Device is neither Copper nor Fiber.\n"));
madSysCtrl.c (user\phy\src\madapi):        MAD_DBG_INFO(("Speed and Duplex is not resolved.\n"));
madSysCtrl.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Invalid duplex is set %i.\n",data));
madSysCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Paged Phy Register read failed.\n"));
madSysCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Paged Phy Register write failed.\n"));
madSysCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSysSetPhyEnable called.\n"));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Set Power down does not support.\n"));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdSysGetPhyEnable called.\n"));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Set Power down does not support.\n"));
madSysCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):          MAD_DBG_ERROR(("Reading phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):          MAD_DBG_ERROR(("Reading phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):          MAD_DBG_ERROR(("Reading phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdSysSetQSGMIIPwDown called.\n"));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_INFO(("The harware mode is not QSGMII.\n"));
madSysCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSysGetQSGMIIPwDown called.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_INFO(("The harware mode is not QSGMII.\n"));
madSysCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):          MAD_DBG_ERROR(("The phy is in switch, and do not support the function.\n"));
madSysCtrl.c (user\phy\src\madapi):          MAD_DBG_ERROR(("The phy is in switch, and do not support the function.\n"));
madSysCtrl.c (user\phy\src\madapi):          MAD_DBG_ERROR(("The phy is in switch, and do not support the function.\n"));
madSysCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Invalid reset mode is set %x.\n", (unsigned int)mode));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdSysSetMacPowerDown called.\n"));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Reading to phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):          MAD_DBG_ERROR(("Writing to phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):          MAD_DBG_ERROR(("The phy is in switch, and do not support the function.\n"));
madSysCtrl.c (user\phy\src\madapi):          MAD_DBG_ERROR(("Writing to phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Invalid HW mode is set %x.\n", (unsigned int)data));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Soft Reset failed.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdSysGetMacPowerDown called.\n"));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Reading to phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):          MAD_DBG_ERROR(("Reading to phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):          MAD_DBG_ERROR(("The phy is in switch, and do not support the function.\n"));
madSysCtrl.c (user\phy\src\madapi):          MAD_DBG_ERROR(("Reading to phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading to phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading to phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Invalid HW mode is set %x.\n", (unsigned int)mode));
madSysCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSysGetDetectPowerDownModeSt called.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Detect Power down does not support.\n"));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Detect Power down does not support.\n"));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Reading phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Reading phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSysGetDetectPowerDownMode called.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Detect Power down does not support.\n"));
madSysCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSysGetDetectPowerDownMode called.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Detect Power down does not support.\n"));
madSysCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSysSetEEELPIMode called.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("EEE Lpi mode does not support.\n"));
madSysCtrl.c (user\phy\src\madapi):/*      MAD_DBG_ERROR(("Call Masec EEE LPI functions.\n")); */
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Paged Phy Register write failed.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Paged Phy Register write failed.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Writing phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSysGetEEELPIMode called.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("EEE Lpi mode does not support.\n"));
madSysCtrl.c (user\phy\src\madapi):/*      MAD_DBG_ERROR(("Call Masec EEE LPI functions.\n"); */
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Paged Phy Register write failed.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Paged Phy Register write failed.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Reading phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSysSetSnoopCtrl called.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Snooping control is not supported.\n"));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Writing phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSysGetSnoopCtrl called.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Snooping control is not supported.\n"));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Reading phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSysSetLEDCtrl called.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Paged Phy Register write failed.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Paged Phy Register write failed.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Paged Phy Register write failed.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Paged Phy Register write failed.\n"));
madSysCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSysGetLEDCtrl called.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Paged Phy Register read failed.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Paged Phy Register read failed.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Paged Phy Register read failed.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Paged Phy Register read failed.\n"));
madSysCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSysSetUniDirTrans called.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Does not support Unidirectional transmit \n"));
madSysCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Reading phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSysGetUniDirTrans called.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Does not support Unidirectional transmit \n"));
madSysCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Reading phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSysSetEEELPIMode called.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("EEE Lpi mode does not support.\n"));
madSysCtrl.c (user\phy\src\madapi):/*      MAD_DBG_ERROR(("Call Masec EEE LPI functions.\n")); */
madSysCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdGetEEELPIInterrupt called.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("EEE Lpi mode does not support.\n"));
madSysCtrl.c (user\phy\src\madapi):/*      MAD_DBG_ERROR(("Call Masec EEE LPI functions.\n")); */
madSysCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSetEEELPIInterruptMask called.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("EEE Lpi mode does not support.\n"));
madSysCtrl.c (user\phy\src\madapi):/*      MAD_DBG_ERROR(("Call Masec EEE LPI functions.\n"); */
madSysCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdGetEEELPIInterruptMask called.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("EEE Lpi mode does not support.\n"));
madSysCtrl.c (user\phy\src\madapi):/*      MAD_DBG_ERROR(("Call Masec EEE LPI functions.\n")); */
madSysCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSetEEELPIIgrBuffThresh called.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("EEE Lpi mode does not support.\n"));
madSysCtrl.c (user\phy\src\madapi):/*      MAD_DBG_ERROR(("Call Masec EEE LPI functions.\n")); */
madSysCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdGetEEELPIIgrBuffThresh called.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("EEE Lpi mode does not support.\n"));
madSysCtrl.c (user\phy\src\madapi):/*      MAD_DBG_ERROR(("Call Masec EEE LPI functions.\n")); */
madSysCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSetEEELPIEEEBuffThresh called.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("EEE Lpi mode does not support.\n"));
madSysCtrl.c (user\phy\src\madapi):/*      MAD_DBG_ERROR(("Call Masec EEE LPI functions.\n")); */
madSysCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdGetEEELPIEEEBuffThresh called.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("EEE Lpi mode does not support.\n"));
madSysCtrl.c (user\phy\src\madapi):/*      MAD_DBG_ERROR(("Call Masec EEE LPI functions.\n")); */
madSysCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSetEEELPIIgrDscThresh called.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("EEE Lpi mode does not support.\n"));
madSysCtrl.c (user\phy\src\madapi):/*      MAD_DBG_ERROR(("Call Masec EEE LPI functions.\n")); */
madSysCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdGetEEELPIIgrDscThresh called.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("EEE Lpi mode does not support.\n"));
madSysCtrl.c (user\phy\src\madapi):/*      MAD_DBG_ERROR(("Call Masec EEE LPI functions.\n")); */
madSysCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSysSetAutoSelect called.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Autoselection media is not supported.\n"));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Reding phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Writing phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSysGetAutoSelect called.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Autoselection media is not supported.\n"));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Reding phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSysSetPreferredMedia called.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Set Preferred media is not supported.\n"));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Writing phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSysGetPreferredMedia called.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Set Preferred media is not supported.\n"));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Writing phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSysSetMediaMode called.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Autoselection media is not supported.\n"));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Reding phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Writing phy reg failed.\n"));
madSysCtrl.c (user\phy\src\madapi):  MAD_DBG_INFO(("mdSysGetMediaMode called.\n"));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madSysCtrl.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Autoselection media is not supported.\n"));
madSysCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Reding phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):    MAD_DBG_INFO(("getDetailedAdvVCTResult Called.\n"));
madVctAdv.c (user\phy\src\madapi):    MAD_DBG_INFO(("analizeAdvVCTNoCrosspairResult Called.\n"));
madVctAdv.c (user\phy\src\madapi):    MAD_DBG_INFO(("analizeAdvVCTResult Called.\n"));
madVctAdv.c (user\phy\src\madapi):    MAD_DBG_INFO(("runAdvCableTest_1181 Called.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):    MAD_DBG_INFO(("Page 8 of Reg20 after test : %0#x.\n", u16Data));
madVctAdv.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):    MAD_DBG_INFO(("runAdvCableTest_1116_set Called.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):    MAD_DBG_INFO(("Page 5 of Reg23 after test : %0#x.\n", u16Data));
madVctAdv.c (user\phy\src\madapi):    MAD_DBG_INFO(("runAdvCableTest_1116_get Called.\n"));
madVctAdv.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):    MAD_DBG_INFO(("Page 5 of Reg23 after test : %0#x.\n", u16Data));
madVctAdv.c (user\phy\src\madapi):         MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):      MAD_DBG_INFO(("@@@@@ reg channel %d is %x \n", j, crossChannelReg[j]));
madVctAdv.c (user\phy\src\madapi):    MAD_DBG_INFO(("runAdvCableTest_1240_set Called.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_INFO(("Reading MAD_REG_ADV_VCT_CONTROL_5 is %x.\n", u16Data));
madVctAdv.c (user\phy\src\madapi):    MAD_DBG_INFO(("Page 5 of Reg23 after test : %0#x.\n", u16Data));
madVctAdv.c (user\phy\src\madapi):    MAD_DBG_INFO(("runAdvCableTest_1240_get Called.\n"));
madVctAdv.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):    MAD_DBG_INFO(("Page 5 of Reg23 after test : %0#x.\n", u16Data));
madVctAdv.c (user\phy\src\madapi):         MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):      MAD_DBG_INFO(("@@@@@ reg channel %d is %x \n", j, crossChannelReg[j]));
madVctAdv.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Unknown Advanced VCT Mode.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running advanced VCT failed.\n"));
madVctAdv.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Running advanced VCT failed.\n"));
madVctAdv.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):       MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running advanced VCT failed.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running advanced VCT SM get failed.\n"));
madVctAdv.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):/*            MAD_CRITIC_INFO(("Cable too short, try again!\n")); */
madVctAdv.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Unknown ADV VCT Mode, do not support.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Can not find VCT State machine instatnce.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Can not find VCT State machine implement.\n"));
madVctAdv.c (user\phy\src\madapi):  MAD_DBG_INFO(("runAdvCableTest_1116 Called.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running advanced VCT failed.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running advanced VCT failed.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running advanced VCT SM get failed.\n"));
madVctAdv.c (user\phy\src\madapi):    MAD_CRITIC_INFO(("Enter ADV VCT Non-Pendding Mode.\n"));
madVctAdv.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Unknown ADV VCT Mode.\n"));
madVctAdv.c (user\phy\src\madapi):       MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running advanced VCT failed.\n"));
madVctAdv.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):            MAD_CRITIC_INFO(("Cable is too short, try again!\n"));
madVctAdv.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Running advanced VCT failed.\n"));
madVctAdv.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):       MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running advanced VCT failed.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running advanced VCT SM get failed.\n"));
madVctAdv.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):/*            MAD_CRITIC_INFO(("Cable too short, try again!\n")); */
madVctAdv.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Unknown ADV VCT Mode.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Can not find VCT State machine instatnce.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Can not find VCT State machine implement.\n"));
madVctAdv.c (user\phy\src\madapi):  MAD_DBG_INFO(("runAdvCableTest_1240 Called.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running advanced VCT failed.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running advanced VCT failed, check error.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running advanced VCT failed, check error.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running advanced VCT SM get failed.\n"));
madVctAdv.c (user\phy\src\madapi):    MAD_CRITIC_INFO(("Enter ADV VCT Non-Pendding Mode.\n"));
madVctAdv.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Unknown ADV VCT Mode.\n"));
madVctAdv.c (user\phy\src\madapi):       MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running advanced VCT failed.\n"));
madVctAdv.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):            MAD_CRITIC_INFO(("Cable is too short, try again!\n"));
madVctAdv.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Running advanced VCT failed.\n"));
madVctAdv.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAdv.c (user\phy\src\madapi):    MAD_DBG_INFO(("madDiagGetAdvCableStatus Called.\n"));
madVctAdv.c (user\phy\src\madapi):      MAD_DBG_ERROR(("The port %d is over range.\n", (int)port));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("VCT not supported.\n"));
madVctAdv.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Running advanced VCT failed.\n"));
madVctAdv.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Running advanced VCT failed.\n"));
madVctAdv.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Running advanced VCT failed.\n"));
madVctAdv.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Running advanced VCT failed error dev id %x.\n", dev->deviceId));
madVctAdv.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Soft Reset failed.\n"));
madVctAlt.c (user\phy\src\madapi):    MAD_DBG_INFO(("runAltCableTest_1340_set Called.\n"));
madVctAlt.c (user\phy\src\madapi):      MAD_DBG_ERROR(("Unknown ALT VCT type.\n"));
madVctAlt.c (user\phy\src\madapi):       MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madVctAlt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAlt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctAlt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madVctAlt.c (user\phy\src\madapi):    MAD_DBG_INFO(("Page 7 of Reg21 after test : %0#x.\n", u16Data));
madVctAlt.c (user\phy\src\madapi):					MAD_DBG_INFO(("runAltCableTest_1340_get Called.\n"));
madVctAlt.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madVctAlt.c (user\phy\src\madapi):    MAD_DBG_INFO(("Page 7 of Reg21 after test : %0#x.\n", diagCtrl));
madVctAlt.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madVctAlt.c (user\phy\src\madapi):    MAD_DBG_INFO(("Page 7 of Reg20 after test : %0#x.\n", diagResult));
madVctAlt.c (user\phy\src\madapi):         MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madVctAlt.c (user\phy\src\madapi):      MAD_DBG_INFO(("@@@@@ reg channel %d is %x \n", j, cableStatus->cableLen[j]));
madVctAlt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running alternate VCT failed.\n"));
madVctAlt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running alternate VCT SM get failed.\n"));
madVctAlt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Can not find VCT State machine instatnce.\n"));
madVctAlt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Can not find VCT State machine implement.\n"));
madVctAlt.c (user\phy\src\madapi):  MAD_DBG_INFO(("runAltCableTest_1340 Called.\n"));
madVctAlt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running alternate VCT failed.\n"));
madVctAlt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running alternate VCT failed.\n"));
madVctAlt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running alternate VCT SM get failed.\n"));
madVctAlt.c (user\phy\src\madapi):    MAD_CRITIC_INFO(("Enter ALT VCT Non-Pendding Mode.\n"));
madVctAlt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running alternate VCT failed.\n"));
madVctAlt.c (user\phy\src\madapi):    MAD_DBG_INFO(("madDiagGetAltCableStatus Called.\n"));
madVctAlt.c (user\phy\src\madapi):      MAD_DBG_ERROR(("The port %d is over range.\n", (int)port));
madVctAlt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Alterbate VCT not supported.\n"));
madVctAlt.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Running alternate VCT failed.\n"));
madVctAlt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Soft Reset failed.\n"));
madVctExt.c (user\phy\src\madapi):    MAD_DBG_INFO(("getDSPDistance Called.\n"));
madVctExt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading length of MDI pair failed.\n"));
madVctExt.c (user\phy\src\madapi):    MAD_DBG_INFO(("getDSPDistance Called.\n"));
madVctExt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctExt.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Ready bit of Cable length resiter is not set.\n"));
madVctExt.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctExt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading length of MDI pair failed.\n"));
madVctExt.c (user\phy\src\madapi):    MAD_DBG_INFO(("getDSPDistance Called.\n"));
madVctExt.c (user\phy\src\madapi):        MAD_DBG_INFO(("Writing to paged phy reg failed.\n"));
madVctExt.c (user\phy\src\madapi):            MAD_DBG_INFO(("Ready bit of Cable length resiter is not set.\n"));
madVctExt.c (user\phy\src\madapi):            MAD_DBG_INFO(("Writing to paged phy reg failed.\n"));
madVctExt.c (user\phy\src\madapi):        MAD_DBG_INFO(("Reading length of MDI pair failed.\n"));
madVctExt.c (user\phy\src\madapi):                    MAD_DBG_ERROR(("getDSPDistance failed.\n"));
madVctExt.c (user\phy\src\madapi):                    MAD_DBG_ERROR(("getDSPDistance failed.\n"));
madVctExt.c (user\phy\src\madapi):                    MAD_DBG_INFO(("getDSPDistance failed.\n"));
madVctExt.c (user\phy\src\madapi):        MAD_DBG_INFO(("Not able to read a Phy register.\n"));
madVctExt.c (user\phy\src\madapi):        MAD_DBG_INFO(("Valid Bit is not set (%x).\n", u16Data));
madVctExt.c (user\phy\src\madapi):        MAD_DBG_INFO(("Not able to read a Phy register.\n"));
madVctExt.c (user\phy\src\madapi):        MAD_DBG_INFO(("Not able to read a paged Phy register.\n"));
madVctExt.c (user\phy\src\madapi):        MAD_DBG_INFO(("Valid Bit is not set (%0#x).\n", u16Data));
madVctExt.c (user\phy\src\madapi):        MAD_DBG_INFO(("Not able to read a paged Phy register.\n"));
madVctExt.c (user\phy\src\madapi):    MAD_DBG_INFO(("madDiagGet1000BTExtStatus_o Called.\n"));
madVctExt.c (user\phy\src\madapi):      MAD_DBG_ERROR(("The port %d is over range.\n", (int)port));
madVctExt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("VCT not supported.\n"));
madVctExt.c (user\phy\src\madapi):               MAD_DBG_INFO(("Device is not supporting Extended Cable Status.\n"));
madVctExt.c (user\phy\src\madapi):    MAD_DBG_INFO(("madDiagGet1000BTExtendedStatus Called.\n"));
madVctExt.c (user\phy\src\madapi):      MAD_DBG_ERROR(("The port %d is over range.\n", (int)port));
madVctExt.c (user\phy\src\madapi):        MAD_DBG_ERROR(("VCT not supported.\n"));
madVctExt.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Getting Extanded Cable Status failed.\n"));
madVctTdr.c (user\phy\src\madapi):    MAD_DBG_INFO(("analizeVCTResult Called.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading to paged phy reg failed.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading to paged phy reg failed.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctTdr.c (user\phy\src\madapi):    MAD_DBG_INFO(("analizeVCTResult_3016 Called.\n"));
madVctTdr.c (user\phy\src\madapi):/* MAD_DBG_INFO(("!!!!!!!!! analizeVCTResult_3016  len %x \n", len));  */
madVctTdr.c (user\phy\src\madapi):    MAD_DBG_INFO(("analizeVCTResult_3016 Called.\n"));
madVctTdr.c (user\phy\src\madapi):/* MAD_DBG_INFO(("!!!!!!!!! analizeVCTResult_3016  len %x \n", len));  */
madVctTdr.c (user\phy\src\madapi):                    MAD_DBG_ERROR(("Reading to paged phy reg failed.\n"));
madVctTdr.c (user\phy\src\madapi):                    MAD_DBG_ERROR(("Reading to paged phy reg failed.\n"));
madVctTdr.c (user\phy\src\madapi):                    MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctTdr.c (user\phy\src\madapi):                  MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctTdr.c (user\phy\src\madapi):                    MAD_DBG_ERROR(("Reading to paged phy reg failed.\n"));
madVctTdr.c (user\phy\src\madapi):                    MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctTdr.c (user\phy\src\madapi):                        MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madVctTdr.c (user\phy\src\madapi):                    MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctTdr.c (user\phy\src\madapi):                            MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctTdr.c (user\phy\src\madapi):    MAD_DBG_INFO(("getVctSt_26_check Called.\n"));
madVctTdr.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madVctTdr.c (user\phy\src\madapi):    MAD_DBG_INFO(("getVctSt_26_set Called.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctTdr.c (user\phy\src\madapi):    MAD_DBG_INFO(("getVctSt_26_get Called.\n"));
madVctTdr.c (user\phy\src\madapi):            MAD_DBG_ERROR(("analizeVCTResult failed.\n"));
madVctTdr.c (user\phy\src\madapi):            MAD_DBG_ERROR(("analizeVCTResult failed.\n"));
madVctTdr.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Running  VCT sub set failed.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running  VCT set failed.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running  VCT check failed.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running advanced VCT SM get failed.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running  VCT sub set failed.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running  VCT sub get failed.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Can not find VCT State machine instance .\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Can not implement VCT State machine instance .\n"));
madVctTdr.c (user\phy\src\madapi):    MAD_DBG_INFO(("getCableStatus_26 Called.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctTdr.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madVctTdr.c (user\phy\src\madapi):    MAD_DBG_INFO(("Reg26 after test : %0#x.\n", reg26));
madVctTdr.c (user\phy\src\madapi):            MAD_DBG_ERROR(("analizeVCTResult failed.\n"));
madVctTdr.c (user\phy\src\madapi):            MAD_DBG_ERROR(("analizeVCTResult failed.\n"));
madVctTdr.c (user\phy\src\madapi):    MAD_DBG_INFO(("getCableStatus_28_0_set Called.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctTdr.c (user\phy\src\madapi):    MAD_DBG_INFO(("getCableStatus_28_0_check Called.\n"));
madVctTdr.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madVctTdr.c (user\phy\src\madapi):    MAD_DBG_INFO(("getCableStatus_28_0_get Called.\n"));
madVctTdr.c (user\phy\src\madapi):            MAD_DBG_ERROR(("analizeVCTResult failed.\n"));
madVctTdr.c (user\phy\src\madapi):    MAD_DBG_INFO(("Reg28 after test : %0#x.\n", reg28));
madVctTdr.c (user\phy\src\madapi):       MAD_DBG_ERROR(("Running VCT SM set failed.\n"));
madVctTdr.c (user\phy\src\madapi):       MAD_DBG_ERROR(("Running VCT SM check failed.\n"));
madVctTdr.c (user\phy\src\madapi):       MAD_DBG_ERROR(("Running VCT SM get failed.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Enabling work around failed.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running  VCT set failed.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running  VCT set failed.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running  VCT check failed.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running VCT SM get failed.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Disabling work around failed.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Can not find VCT State machine instatnce.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Can not find VCT State machine implement.\n"));
madVctTdr.c (user\phy\src\madapi):    MAD_DBG_INFO(("getCableStatus_16_5_set Called.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctTdr.c (user\phy\src\madapi):    MAD_DBG_INFO(("getCableStatus_16_5_check Called.\n"));
madVctTdr.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madVctTdr.c (user\phy\src\madapi):    MAD_DBG_INFO(("getCableStatus_16_5_get Called.\n"));
madVctTdr.c (user\phy\src\madapi):/*    MAD_DBG_INFO(("Page 5 of Reg16 after test : %0#x.\n", u16Data)); */
madVctTdr.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madVctTdr.c (user\phy\src\madapi):            MAD_DBG_ERROR(("analizeVCTResult failed.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running  VCT SM set failed.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running  VCT SM set failed.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running  VCT SM check failed.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Running VCT SM get failed.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Can not find VCT State machine instatnce.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Can not find VCT State machine implement.\n"));
madVctTdr.c (user\phy\src\madapi):    MAD_DBG_INFO(("getCableStatus Called.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVctTdr.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madVctTdr.c (user\phy\src\madapi):    MAD_DBG_INFO(("Page 5 of Reg16 after test : %0#x.\n", u16Data));
madVctTdr.c (user\phy\src\madapi):            MAD_DBG_ERROR(("Reading from paged phy reg failed.\n"));
madVctTdr.c (user\phy\src\madapi):            MAD_DBG_ERROR(("analizeVCTResult failed.\n"));
madVctTdr.c (user\phy\src\madapi):    MAD_DBG_INFO(("madDiagGetCableStatus Called.\n"));
madVctTdr.c (user\phy\src\madapi):      MAD_DBG_ERROR(("The port %d is over range.\n", (int)port));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("TDR VCT not supported.\n"));
madVctTdr.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Running VCT failed.\n"));
madVctTdr.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Enabling work around failed.\n"));
madVctTdr.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Running VCT failed.\n"));
madVctTdr.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Disabling work around failed.\n"));
madVctTdr.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Running VCT failed.\n"));
madVctTdr.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Running VCT failed.\n"));
madVctTdr.c (user\phy\src\madapi):                MAD_DBG_ERROR(("Running VCT failed.\n"));
madVctTdr.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Soft Reset failed.\n"));
madVod.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdDiagSetSGMIIVod called.\n"));
madVod.c (user\phy\src\madapi):      MAD_DBG_ERROR(("The port %d is over range.\n", (int)port));
madVod.c (user\phy\src\madapi):        MAD_DBG_ERROR(("SGMII VOD not supported.\n"));
madVod.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVod.c (user\phy\src\madapi):    MAD_DBG_INFO(("mdDiagSetCopperVod called.\n"));
madVod.c (user\phy\src\madapi):      MAD_DBG_ERROR(("The port %d is over range.\n", (int)port));
madVod.c (user\phy\src\madapi):        MAD_DBG_ERROR(("SGMII VOD not supported.\n"));
madVod.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madVod.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madWol.c (user\phy\src\madapi):  MAD_DBG_INFO(("madWolEnable called.\n"));
madWol.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madWol.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Copper not supported.\n"));
madWol.c (user\phy\src\madapi):    MAD_DBG_ERROR(("WOL not supported.\n"));
madWol.c (user\phy\src\madapi):     MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madWol.c (user\phy\src\madapi):    MAD_DBG_INFO(("madWolGetEnable called.\n"));
madWol.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madWol.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Copper not supported.\n"));
madWol.c (user\phy\src\madapi):    MAD_DBG_ERROR(("WOL not supported.\n"));
madWol.c (user\phy\src\madapi):     MAD_DBG_ERROR(("Reading to paged phy reg failed.\n"));
madWol.c (user\phy\src\madapi):    MAD_DBG_INFO(("madWolGetStatus called.\n"));
madWol.c (user\phy\src\madapi):      MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madWol.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Copper not supported.\n"));
madWol.c (user\phy\src\madapi):    MAD_DBG_ERROR(("WOL not supported.\n"));
madWol.c (user\phy\src\madapi):     MAD_DBG_ERROR(("Reading to paged phy reg failed.\n"));
madWol.c (user\phy\src\madapi):    MAD_DBG_ERROR(("SMI Paged Write failed (port%i, MAD_REG_WOL_SRAM_BYTE_DATA_CTRL)\n",port));
madWol.c (user\phy\src\madapi):    MAD_DBG_ERROR(("SMI Paged Write failed (port%i, MAD_REG_WOL_SRAM_BYTE_ADDR_CTRL)\n",port));
madWol.c (user\phy\src\madapi):    MAD_DBG_ERROR(("SMI Paged Write failed (port%i, MAD_REG_WOL_SRAM_BYTE_ADDR_CTRL)\n",port));
madWol.c (user\phy\src\madapi):    MAD_DBG_ERROR(("SMI Paged Write failed (port%i, MAD_REG_WOL_SRAM_BYTE_ADDR_CTRL)\n",port));
madWol.c (user\phy\src\madapi):    MAD_DBG_ERROR(("SMI Paged Read failed (port%i, MAD_REG_WOL_SRAM_READ_BYTE_DATA)\n",port));
madWol.c (user\phy\src\madapi):  MAD_DBG_INFO(("madSetWolPktConfig called.\n"));
madWol.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madWol.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Copper not supported.\n"));
madWol.c (user\phy\src\madapi):    MAD_DBG_ERROR(("WOL not supported.\n"));
madWol.c (user\phy\src\madapi):     MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madWol.c (user\phy\src\madapi):     MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madWol.c (user\phy\src\madapi):      MAD_DBG_ERROR(("madWolSramWrite failed.\n"));
madWol.c (user\phy\src\madapi):  MAD_DBG_INFO(("madGetWolPktConfig called.\n"));
madWol.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madWol.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Copper not supported.\n"));
madWol.c (user\phy\src\madapi):    MAD_DBG_ERROR(("WOL not supported.\n"));
madWol.c (user\phy\src\madapi):     MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madWol.c (user\phy\src\madapi):     MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madWol.c (user\phy\src\madapi):     MAD_DBG_ERROR(("Reading paged phy reg failed.\n"));
madWol.c (user\phy\src\madapi):      MAD_DBG_ERROR(("madWolSramRead failed.\n"));
madWol.c (user\phy\src\madapi):  MAD_DBG_INFO(("madSetWolMagicPktConfig called.\n"));
madWol.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madWol.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Copper not supported.\n"));
madWol.c (user\phy\src\madapi):    MAD_DBG_ERROR(("WOL not supported.\n"));
madWol.c (user\phy\src\madapi):      MAD_DBG_ERROR(("SMI Paged Write failed (port%i, MAD_REG_WOL_MAGIC_PKT_DST_ADDR_2)\n",port));
madWol.c (user\phy\src\madapi):  MAD_DBG_INFO(("madGetWolMagicPktConfig called.\n"));
madWol.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madWol.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Copper not supported.\n"));
madWol.c (user\phy\src\madapi):    MAD_DBG_ERROR(("WOL not supported.\n"));
madWol.c (user\phy\src\madapi):      MAD_DBG_ERROR(("SMI Paged Read failed (port%i, MAD_REG_WOL_MAGIC_PKT_DST_ADDR_2)\n",port));
madWol.c (user\phy\src\madapi):  MAD_DBG_INFO(("madWolClearStatus called.\n"));
madWol.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madWol.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Copper not supported.\n"));
madWol.c (user\phy\src\madapi):    MAD_DBG_ERROR(("WOL not supported.\n"));
madWol.c (user\phy\src\madapi):     MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madWol.c (user\phy\src\madapi):  MAD_DBG_INFO(("madWol10BLowPwSel called.\n"));
madWol.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madWol.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Copper not supported.\n"));
madWol.c (user\phy\src\madapi):    MAD_DBG_ERROR(("WOL not supported.\n"));
madWol.c (user\phy\src\madapi):     MAD_DBG_ERROR(("Writing to paged phy reg failed.\n"));
madWol.c (user\phy\src\madapi):  MAD_DBG_INFO(("madWol10BLowPwGet called.\n"));
madWol.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madWol.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Copper not supported.\n"));
madWol.c (user\phy\src\madapi):    MAD_DBG_ERROR(("WOL not supported.\n"));
madWol.c (user\phy\src\madapi):     MAD_DBG_ERROR(("Reading to paged phy reg failed.\n"));
madXmdioRegCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("madXmdioSetClkStoppable called.\n"));
madXmdioRegCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("The port %d is over range.\n", (int)port));
madXmdioRegCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("XMDIO not supported.\n"));
madXmdioRegCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Writing to phy reg failed.\n"));
madXmdioRegCtrl.c (user\phy\src\madapi):    MAD_DBG_INFO(("madXmdioGetClkStoppable called.\n"));
madXmdioRegCtrl.c (user\phy\src\madapi):      MAD_DBG_ERROR(("The port %d is over range.\n", (int)port));
madXmdioRegCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("XMDIO not supported.\n"));
madXmdioRegCtrl.c (user\phy\src\madapi):        MAD_DBG_ERROR(("Reading to paged phy reg failed.\n"));
madXmdioRegStatus.c (user\phy\src\madapi):  MAD_DBG_INFO(("madPCSStatus called.\n"));
madXmdioRegStatus.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n", (int)port));
madXmdioRegStatus.c (user\phy\src\madapi):    MAD_DBG_ERROR(("XMDIO not supported.\n"));
madXmdioRegStatus.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Reading from phy reg failed.\n"));
madXmdioRegStatus.c (user\phy\src\madapi):  MAD_DBG_INFO(("madPCSEEECapability called.\n"));
madXmdioRegStatus.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n",  (int)port));
madXmdioRegStatus.c (user\phy\src\madapi):    MAD_DBG_ERROR(("XMDIO not supported.\n"));
madXmdioRegStatus.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Reading from phy reg failed.\n"));
madXmdioRegStatus.c (user\phy\src\madapi):  MAD_DBG_INFO(("madGetPCSWakeErrCounter called.\n"));
madXmdioRegStatus.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n",  (int)port));
madXmdioRegStatus.c (user\phy\src\madapi):    MAD_DBG_ERROR(("XMDIO not supported.\n"));
madXmdioRegStatus.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Reading from phy reg failed.\n"));
madXmdioRegStatus.c (user\phy\src\madapi):  MAD_DBG_INFO(("madPCSEEEAdvertisement called.\n"));
madXmdioRegStatus.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n",  (int)port));
madXmdioRegStatus.c (user\phy\src\madapi):    MAD_DBG_ERROR(("XMDIO not supported.\n"));
madXmdioRegStatus.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Reading from phy reg failed.\n"));
madXmdioRegStatus.c (user\phy\src\madapi):  MAD_DBG_INFO(("madPCSEEELnkPartnerAdvertisement called.\n"));
madXmdioRegStatus.c (user\phy\src\madapi):    MAD_DBG_INFO(("The port %d is over range.\n",  (int)port));
madXmdioRegStatus.c (user\phy\src\madapi):    MAD_DBG_ERROR(("XMDIO not supported.\n"));
madXmdioRegStatus.c (user\phy\src\madapi):    MAD_DBG_ERROR(("Reading from phy reg failed.\n"));
Mem.c (lwip-1.4.1\src\core):    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
Mib2.c (lwip-1.4.1\src\core\snmp):    LWIP_DEBUGF(SNMP_MIB_DEBUG,("get_object_def ifentry.%"U16_F"\n",(u16_t)id));
Mib_structs.c (lwip-1.4.1\src\core\snmp):  LWIP_DEBUGF(SNMP_MIB_DEBUG,("push_node() node=%p id=%"S32_F"\n",(void*)(node->r_ptr),node->r_id));
Mib_structs.c (lwip-1.4.1\src\core\snmp):  LWIP_DEBUGF(SNMP_MIB_DEBUG,("pop_node() node=%p id=%"S32_F"\n",(void *)(node->r_ptr),node->r_id));
Mib_structs.c (lwip-1.4.1\src\core\snmp):    LWIP_DEBUGF(SNMP_MIB_DEBUG,("alloc empty list objid==%"S32_F"\n",objid));
Mib_structs.c (lwip-1.4.1\src\core\snmp):        LWIP_DEBUGF(SNMP_MIB_DEBUG,("node already there objid==%"S32_F"\n",objid));
Mib_structs.c (lwip-1.4.1\src\core\snmp):          LWIP_DEBUGF(SNMP_MIB_DEBUG,("alloc ins tail objid==%"S32_F"\n",objid));
Mib_structs.c (lwip-1.4.1\src\core\snmp):  LWIP_DEBUGF(SNMP_MIB_DEBUG,("free list objid==%"S32_F"\n",n->objid));
Mib_structs.c (lwip-1.4.1\src\core\snmp):  LWIP_DEBUGF(SNMP_MIB_DEBUG,("node==%p *ident==%"S32_F"\n",(void*)node,*ident));
Mib_structs.c (lwip-1.4.1\src\core\snmp):          LWIP_DEBUGF(SNMP_MIB_DEBUG,("an->objid[%"U16_F"]==%"S32_F" *ident==%"S32_F"\n",i,an->objid[i],*ident));
Mib_structs.c (lwip-1.4.1\src\core\snmp):          LWIP_DEBUGF(SNMP_MIB_DEBUG,("an search failed *ident==%"S32_F"\n",*ident));
Mib_structs.c (lwip-1.4.1\src\core\snmp):          LWIP_DEBUGF(SNMP_MIB_DEBUG,("ln->objid==%"S32_F" *ident==%"S32_F"\n",ln->objid,*ident));
Mib_structs.c (lwip-1.4.1\src\core\snmp):          LWIP_DEBUGF(SNMP_MIB_DEBUG,("ln search failed *ident==%"S32_F"\n",*ident));
Mib_structs.c (lwip-1.4.1\src\core\snmp):          LWIP_DEBUGF(SNMP_MIB_DEBUG,("en->objid==%"S32_F" *ident==%"S32_F"\n",debug_id,*ident));
Mib_structs.c (lwip-1.4.1\src\core\snmp):          LWIP_DEBUGF(SNMP_MIB_DEBUG,("en search failed *ident==%"S32_F"\n",*ident));
Mib_structs.c (lwip-1.4.1\src\core\snmp):          LWIP_DEBUGF(SNMP_MIB_DEBUG,("an->objid[%"U16_F"]==%"S32_F" *ident==%"S32_F"\n",i,an->objid[i],*ident));
Mib_structs.c (lwip-1.4.1\src\core\snmp):          LWIP_DEBUGF(SNMP_MIB_DEBUG,("left an->objid[j]==%"S32_F"\n",an->objid[j]));
Mib_structs.c (lwip-1.4.1\src\core\snmp):          LWIP_DEBUGF(SNMP_MIB_DEBUG,("ln->objid==%"S32_F" *ident==%"S32_F"\n",ln->objid,*ident));
Mib_structs.c (lwip-1.4.1\src\core\snmp):          LWIP_DEBUGF(SNMP_MIB_DEBUG,("left jn->objid==%"S32_F"\n",jn->objid));
Mib_structs.c (lwip-1.4.1\src\core\snmp):          LWIP_DEBUGF(SNMP_MIB_DEBUG,("en->objid[%"U16_F"]==%"S32_F" *ident==%"S32_F"\n",i,ex_id,*ident));
Mib_structs.c (lwip-1.4.1\src\core\snmp):        LWIP_DEBUGF(SNMP_MIB_DEBUG,("left en->objid==%"S32_F"\n",ex_id));
msApiInit.c (user\switch\sample\initialization):    MSG_PRINT(("QuarterDeck has been started.\n"));
msApiInit.c (user\switch\sample\multidevice):                    MSG_PRINT(("gprtSetInterswitchPort returned %i (port %i, mode TRUE)\n",status,j));
msApiInit.c (user\switch\sample\multidevice):                    MSG_PRINT(("gprtSetInterswitchPort returned %i (port %i, mode FALSE)\n",status,j));
msApiInit.c (user\switch\sample\multidevice):    MSG_PRINT(("QuarterDeck has been started.\n"));
msApiInit.c (user\switch\sample\multidevice):    MSG_PRINT(("QuarterDeck initialization failed.\n"));
msecApi.c (user\phy\src\macfunc\macsec):        MAD_DBG_ERROR(("Do not supported port %d \n", port));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to write register \n"));
msecApi.c (user\phy\src\macfunc\macsec):        MAD_DBG_ERROR(("Do not supported port %d \n", port));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to read register \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):         MAD_DBG_ERROR(("Reading to paged phy page.reg (63,30) failed.\n"));
msecApi.c (user\phy\src\macfunc\macsec):          MAD_DBG_ERROR(("Writing to paged phy page.reg (0xff,23) failed.\n"));
msecApi.c (user\phy\src\macfunc\macsec):           MAD_DBG_ERROR(("Reading to paged phy page.reg (0xff,25) failed.\n"));
msecApi.c (user\phy\src\macfunc\macsec):           MAD_DBG_ERROR(("Reading to paged phy page.reg (0xfe,19) failed.\n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):  MAD_CRITIC_INFO(("!!!! msec_maxwell_ae_start_init \n"));
msecApi.c (user\phy\src\macfunc\macsec):    MAD_CRITIC_INFO(("!!!! MacSec Configuration  port %d \n", port));
msecApi.c (user\phy\src\macfunc\macsec):       MAD_DBG_ERROR(("Failed to call msec_port_macsec_init \n"));
msecApi.c (user\phy\src\macfunc\macsec):       MAD_DBG_ERROR(("Failed to call msec_port_cmn_cfg \n"));
msecApi.c (user\phy\src\macfunc\macsec):       MAD_DBG_ERROR(("Failed to call msec_port_egr_cfg \n"));
msecApi.c (user\phy\src\macfunc\macsec):       MAD_DBG_ERROR(("Failed to call msec_port_set_igr_def_act \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_stat_init \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):    MAD_CRITIC_INFO(("!!!! Mac Configuration  port %d \n", port));
msecApi.c (user\phy\src\macfunc\macsec):       MAD_DBG_ERROR(("Failed to call msec_port_mac_init \n"));
msecApi.c (user\phy\src\macfunc\macsec):       MAD_DBG_ERROR(("Failed to call msec_port_mac_init \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_port_set_mac_link \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_port_set_mac_rst \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_port_set_mac_ctrl \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_port_set_mac_speed \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):       MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):       MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):       MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_port_mac_en_dis \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_port_set_mac_link \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_port_set_mac_link \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_port_set_mac_link \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_port_get_mac_ctrl \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_port_get_mac_speed \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to read register \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to write register \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_clr_macsec_stat \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_clr_mib_stat \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_port_dis_elu_ent \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_port_set_ect_entry \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_port_set_ekey_entry \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_port_set_ehkey_entry \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_port_set_elu_entry \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_port_get_egr_entry \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):       MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):       MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_port_get_elu_entry \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_port_get_ect_entry \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_port_get_ekey_entry \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_port_get_ehkey_entry \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):	  MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):       MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):       MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_port_dis_ilu_ent \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_port_set_ikey_entry \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_port_set_ihkey_entry \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_port_set_nxtpn_ent \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_port_set_ilu_entry \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_port_get_igr_entry \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n");
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):       MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):       MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_port_get_ilu_entry \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec port_get_ikey_entry \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_port_get_ihkey_entry \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_port_get_nxtpn_entry \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to msecReadPortReg port %x, addr %x \n", port, addr));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to msecReadPortReg port %x, addr %x \n", port, addr));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to msecReadPortReg port %x, addr %x \n", port, addr));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to msecReadPortReg port %x, addr %x \n", port, addr));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to msecReadPortReg port %x, addr %x \n", port, addr));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to msecReadPortReg port %x, addr %x \n", port, addr));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to msecReadPortReg port %x, addr %x \n", port, addr));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to msecReadPortReg port %x, addr %x \n", port, addr));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):        MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):  MAD_CRITIC_INFO( ("Programming Redir Hdr    : \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to write register \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to write register \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):  MAD_CRITIC_INFO( ("Reading Redir Hdr        : \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_set_fips_vec \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msec_port_fips_ctl \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call port_fips_obv \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call clear_fips_vec \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):        MAD_DBG_ERROR(("Failed to write register \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):            MAD_DBG_ERROR(("Failed to call msec_port_set_ekey_entry \n"));
msecApi.c (user\phy\src\macfunc\macsec):            MAD_DBG_ERROR(("Failed to call msec_port_set_ehkey_entry \n"));
msecApi.c (user\phy\src\macfunc\macsec):            MAD_DBG_ERROR(("Failed to call msec_port_set_ikey_entry \n"));
msecApi.c (user\phy\src\macfunc\macsec):            MAD_DBG_ERROR(("Failed to call msec_port_set_ihkey_entry \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Failed to read register \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Failed to read register \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Failed to read register \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Failed to write register \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Failed to write register \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Failed to write register \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Failed to read register \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Failed to read register \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Failed to read register \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Failed Setting for (port %i, mode %i) \n",(int)port,(int)chkMode));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):    MAD_DBG_ERROR(("Failed to write register \n"));
msecApi.c (user\phy\src\macfunc\macsec):    MAD_DBG_ERROR(("Failed to read register \n"));
msecApi.c (user\phy\src\macfunc\macsec):           MAD_DBG_ERROR(("Failed to write register \n"));
msecApi.c (user\phy\src\macfunc\macsec):           MAD_DBG_ERROR(("Failed to write register \n"));
msecApi.c (user\phy\src\macfunc\macsec):           MAD_DBG_ERROR(("Failed to write register \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to read register \n"));
msecApi.c (user\phy\src\macfunc\macsec):       MAD_DBG_ERROR(("Failed to write register \n"));
msecApi.c (user\phy\src\macfunc\macsec):       MAD_DBG_ERROR(("Failed to write register \n"));
msecApi.c (user\phy\src\macfunc\macsec):       MAD_DBG_ERROR(("Failed to read register \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to read register \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to read register \n"));
msecApi.c (user\phy\src\macfunc\macsec):    MAD_DBG_ERROR(("Failed to write register \n"));
msecApi.c (user\phy\src\macfunc\macsec):    MAD_DBG_ERROR(("Failed to read register \n"));
msecApi.c (user\phy\src\macfunc\macsec):           MAD_DBG_ERROR(("Failed to write register \n"));
msecApi.c (user\phy\src\macfunc\macsec):           MAD_DBG_ERROR(("Failed to write register \n"));
msecApi.c (user\phy\src\macfunc\macsec):           MAD_DBG_ERROR(("Failed to write register \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to read register \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Failed to write register \n"));
msecApi.c (user\phy\src\macfunc\macsec):       MAD_DBG_ERROR(("Failed to read register \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Failed to write register \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Failed to write register \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Failed to write register \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Failed to write register \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Failed to write register \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):       MAD_DBG_ERROR(("Failed to read register \n"));
msecApi.c (user\phy\src\macfunc\macsec):    MAD_CRITIC_INFO(("msec_set_mac_frame_size_limit port %x %x before setting, data is %x \n", port, addr, (unsigned int)data));
msecApi.c (user\phy\src\macfunc\macsec):       MAD_DBG_ERROR(("Failed to write register \n"));
msecApi.c (user\phy\src\macfunc\macsec):       MAD_DBG_ERROR(("Failed to read register \n"));
msecApi.c (user\phy\src\macfunc\macsec):    MAD_CRITIC_INFO(("msec_set_mac_frame_size_limit port %x %x after setting, data is %x \n", port, addr, (unsigned int)data));
msecApi.c (user\phy\src\macfunc\macsec):       MAD_DBG_ERROR(("Failed to read register \n"));
msecApi.c (user\phy\src\macfunc\macsec):    MAD_CRITIC_INFO(("msec_set_mac_frame_size_limit port %x %x before setting, data is %x \n", port, addr, (unsigned int)data));
msecApi.c (user\phy\src\macfunc\macsec):       MAD_DBG_ERROR(("Failed to write register \n"));
msecApi.c (user\phy\src\macfunc\macsec):       MAD_DBG_ERROR(("Failed to read register \n"));
msecApi.c (user\phy\src\macfunc\macsec):    MAD_CRITIC_INFO(("msec_set_mac_frame_size_limit port %x %x after setting, data is %x \n", port, addr, (unsigned int)data));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):       MAD_DBG_ERROR(("Failed to read register \n"));
msecApi.c (user\phy\src\macfunc\macsec):    MAD_CRITIC_INFO(("msec_enable_non_disruptive_loopback port %x before setting, data is %x \n", port, (unsigned int)data));
msecApi.c (user\phy\src\macfunc\macsec):       MAD_DBG_ERROR(("Failed to write register \n"));
msecApi.c (user\phy\src\macfunc\macsec):       MAD_DBG_ERROR(("Failed to read register \n"));
msecApi.c (user\phy\src\macfunc\macsec):    MAD_CRITIC_INFO(("msec_enable_non_disruptive_loopback port %x after setting, data is %x \n", port, (unsigned int)data));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecWritePortReg \n"));
msecApi.c (user\phy\src\macfunc\macsec):      MAD_DBG_ERROR(("Macsec does not support.\n")); 
msecApi.c (user\phy\src\macfunc\macsec):     MAD_DBG_ERROR(("Failed to call msecReadPortReg \n"));
---- ==33 - GT_OK - miiSmiIfReadRegister: Matches (1 in 1 files) ----
gtMiiSmiIf.c (user\switch\src\platform):	MSG_PRINT(("==33 - GT_OK - miiSmiIfReadRegister:=%p,phyAddr=%x,regAddr=%x,data=%x\r\n",dev,phyAddr,regAddr,*data));
---- read from global 2 register Matches (2 in 1 files) ----
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("read from global 2 register: phyAddr 0x%x, regAddr 0x%x, ", phyAddr,regAddr));
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("read from global 2 register:dev=%p, phyAddr 0x%x, regAddr 0x%x, ",
---- Read from phy Matches (7 in 1 files) ----
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("Read from phy(%d) register: regAddr 0x%x, ",
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("Read from phy(%d) register: regAddr 0x%x, ",
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("Read from phy(0x%x) register:dev=%p, regAddr 0x%x, data 0x%x.\n",
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("Read from phy(%d) register: phyAddr 0x%x, regAddr 0x%x, ", portNum,phyAddr,regAddr));
gtHwCntl.c (user\switch\src\driver):        DBG_INFO(("Read from phy(%d) register: smiAddr 0x%x, pageNum 0x%x, regAddr 0x%x\n",
gtHwCntl.c (user\switch\src\driver):                DBG_INFO(("Read from phy(%d) register: smiAddr 0x%x, pageNum 0x%x, regAddr 0x%x\n",
gtHwCntl.c (user\switch\src\driver):                DBG_INFO(("Read from phy(%d) register: smiAddr 0x%x, pageNum 0x%x, regAddr 0x%x\n",
---- Reading Phy register Timed Out Matches (11 in 1 files) ----
gtHwCntl.c (user\switch\src\driver):                DBG_INFO(("Reading Phy register Timed Out\n"));
gtHwCntl.c (user\switch\src\driver):                DBG_INFO(("Reading Phy register Timed Out\n"));
gtHwCntl.c (user\switch\src\driver):                DBG_INFO(("Reading Phy register Timed Out\n"));
gtHwCntl.c (user\switch\src\driver):                DBG_INFO(("Reading Phy register Timed Out\n"));
gtHwCntl.c (user\switch\src\driver):                DBG_INFO(("Reading Phy register Timed Out\n"));
gtHwCntl.c (user\switch\src\driver):                DBG_INFO(("Reading Phy register Timed Out\n"));
gtHwCntl.c (user\switch\src\driver):                DBG_INFO(("Reading Phy register Timed Out\n"));
gtHwCntl.c (user\switch\src\driver):                DBG_INFO(("Reading Phy register Timed Out\n"));
gtHwCntl.c (user\switch\src\driver):                DBG_INFO(("Reading Phy register Timed Out\n"));
gtHwCntl.c (user\switch\src\driver):                DBG_INFO(("Reading Phy register Timed Out\n"));
gtHwCntl.c (user\switch\src\driver):                DBG_INFO(("Reading Phy register Timed Out\n"));
---- ==33 - GT_OK - miiSmiIfReadRegister: Matches (1 in 1 files) ----
gtMiiSmiIf.c (user\switch\src\platform):	MSG_PRINT(("==33 - GT_OK - miiSmiIfReadRegister:=%p,phyAddr=%x,regAddr=%x,data=%x\r\n",dev,phyAddr,regAddr,*data));
---- read from global Matches (4 in 1 files) ----
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("read from global register: phyAddr 0x%x, regAddr 0x%x, ",
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("read from global 2 register: phyAddr 0x%x, regAddr 0x%x, data 0x%x.return %d\r\n", phyAddr,regAddr,*data,retVal));
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("read from global 3 register: phyAddr 0x%x, regAddr 0x%x, ", phyAddr,regAddr));
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("read from global 2 register:dev=%p, phyAddr 0x%x, regAddr 0x%x, ",
---- ==phyRegWritePPUEn==smiReg Matches (1 in 1 files) ----
gtHwCntl.c (user\switch\src\driver):			DBG_INFO(("==phyRegWritePPUEn==smiReg & QD_SMI_BUSY = %x\r\n",smiReg & QD_SMI_BUSY));
---- phyRegWritePPUEn Matches (12 in 1 files) ----
gtHwCntl.c (user\switch\src\driver):GT_STATUS phyRegWritePPUEn (GT_QD_DEV* dev, unsigned int phyAddr , unsigned int regAddr,
gtHwCntl.c (user\switch\src\driver):        retVal = phyRegWritePPUEn (dev,phyAddr,regAddr,data);
gtHwCntl.c (user\switch\src\driver):		DBG_INFO(("===coreWritePhyReg===phyRegWritePPUEn retVal=%d===\r\n",retVal));
gtHwCntl.c (user\switch\src\driver):            if((retVal = phyRegWritePPUEn(dev,phyAddr,pageAddr,tmpData)) == GT_OK)
gtHwCntl.c (user\switch\src\driver):            retVal = phyRegWritePPUEn (dev,phyAddr,regAddr,data);
gtHwCntl.c (user\switch\src\driver):            if((retVal = phyRegWritePPUEn(dev,phyAddr,pageAddr,tmpData)) == GT_OK)
gtHwCntl.c (user\switch\src\driver):                retVal = phyRegWritePPUEn(dev,phyAddr,regAddr,data);
gtHwCntl.c (user\switch\src\driver):* phyRegWritePPUEn
gtHwCntl.c (user\switch\src\driver):GT_STATUS phyRegWritePPUEn (GT_QD_DEV* dev, unsigned int phyAddr , unsigned int regAddr,
gtHwCntl.c (user\switch\src\driver):	DBG_INFO(("phyRegWritePPUEn QD_REG_SMI_PHY_CMD is busy or not smiReg = %x,%x\r\n",smiReg,smiReg & QD_SMI_BUSY));
gtHwCntl.c (user\switch\src\driver):			DBG_INFO(("==phyRegWritePPUEn==while (%d) >> smiReg & QD_SMI_BUSY\r\n",smiReg & QD_SMI_BUSY));
gtHwCntl.c (user\switch\src\driver):	DBG_INFO(("==phyRegWritePPUEn= GT_OK =QD_REG_SMI_PHY_CMD smiReg=%x return %d\r\n",smiReg,GT_OK));
---- lzh -- GT_OK --miiSmiIfWriteRegister Matches (1 in 1 files) ----
gtMiiSmiIf.c (user\switch\src\platform):	MSG_PRINT(("lzh -- GT_OK --miiSmiIfWriteRegister =%p,phyAddr=%x,regAddr=%x,data=%x\r\n",dev,phyAddr,regAddr,data));
---- Write to port Matches (5 in 2 files) ----
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("Write to port(%d) register: phyAddr 0x%x, regAddr 0x%x, ",
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("Write to port(%d) register: regAddr 0x%x, ",
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("Write to port(%d) register: regAddr 0x%x, ",
madHwCntl.c (user\phy\src\driver):    MAD_DBG_INFO(("Write to port(%d): smiAddr %d, regAddr %d, ",
madHwCntl.c (user\phy\src\driver):    MAD_DBG_INFO(("Write to port(%d): pageNum %i, smiAddr %i, regAddr %i\n",
---- hwGetGlobal2RegField Matches (80 in 15 files) ----
gtBrgVlan.c (user\switch\src\msapi):    retVal = hwGetGlobal2RegField(dev,QD_REG_SDET_POLARITY,13,1,&data);
gtCCPVT.c (user\switch\src\msapi):        retVal = hwGetGlobal2RegField(dev,QD_REG_PVT_ADDR,15,1,&data);
gtCCPVT.c (user\switch\src\msapi):                retVal = hwGetGlobal2RegField(dev,QD_REG_PVT_ADDR,15,1,&data);
gtEvents.c (user\switch\src\msapi):        retVal = hwGetGlobal2RegField(dev, QD_REG_WD_CONTROL, 12, 4, &hwPort);
gtEvents.c (user\switch\src\msapi):      retVal = hwGetGlobal2RegField(dev,QD_REG_WD_CONTROL, 0, 1, &data);
gtEvents.c (user\switch\src\msapi):      retVal = hwGetGlobal2RegField(dev,QD_REG_WD_CONTROL, 6, 1, &data);
gtEvents.c (user\switch\src\msapi):    retVal = hwGetGlobal2RegField(dev,QD_REG_WD_CONTROL, 7, 1, &data);
gtHwCntl.c (user\switch\src\driver):* hwGetGlobal2RegField
gtHwCntl.c (user\switch\src\driver):GT_STATUS hwGetGlobal2RegField
gtHwCntl.h (user\switch\include\h\driver):* hwGetGlobal2RegField
gtHwCntl.h (user\switch\include\h\driver):GT_STATUS hwGetGlobal2RegField
gtMisc.c (user\switch\src\msapi):        retVal = hwGetGlobal2RegField(dev,QD_REG_EEPROM_COMMAND,15,1,&data);
gtMisc.c (user\switch\src\msapi):            retVal = hwGetGlobal2RegField(dev,QD_REG_EEPROM_COMMAND,10,1,&data);
gtMisc.c (user\switch\src\msapi):            retVal = hwGetGlobal2RegField(dev,QD_REG_EEPROM_COMMAND,11,1,&data);
gtMisc.c (user\switch\src\msapi):            retVal = hwGetGlobal2RegField(dev,QD_REG_EEPROM_COMMAND,11,1,&data);
gtMisc.c (user\switch\src\msapi):                retVal = hwGetGlobal2RegField(dev,QD_REG_EEPROM_COMMAND,15,1,&data);
gtMisc.c (user\switch\src\msapi):            retVal = hwGetGlobal2RegField(dev,QD_REG_EEPROM_COMMAND,0,8,&data);
gtMisc.c (user\switch\src\msapi):            retVal = hwGetGlobal2RegField(dev,QD_REG_EEPROM_COMMAND,10,1,&data);
gtMisc.c (user\switch\src\msapi):            retVal = hwGetGlobal2RegField(dev,QD_REG_EEPROM_COMMAND,11,1,&data);
gtMisc.c (user\switch\src\msapi):            retVal = hwGetGlobal2RegField(dev,QD_REG_EEPROM_COMMAND,11,1,&data);
gtMisc.c (user\switch\src\msapi):                retVal = hwGetGlobal2RegField(dev,QD_REG_EEPROM_COMMAND,15,1,&data);
gtMisc.c (user\switch\src\msapi):        retVal = hwGetGlobal2RegField(dev,QD_REG_SCRATCH_MISC,15,1,&tmpData);
gtMisc.c (user\switch\src\msapi):        retVal = hwGetGlobal2RegField(dev,funcReg,15,1,&tmpData);
gtPhyInt.c (user\switch\src\msapi):        retVal = hwGetGlobal2RegField(dev,QD_REG_PHYINT_SOURCE,0,dev->maxPorts,&portVec);
gtPhyInt_mad.c (user\switch\src\msapi):        retVal = hwGetGlobal2RegField(dev,QD_REG_PHYINT_SOURCE,0,dev->maxPorts,&portVec);
gtPIRL.c (user\switch\src\msapi):        retVal = hwGetGlobal2RegField(dev,QD_REG_INGRESS_RATE_COMMAND,15,1,&data);
gtPIRL.c (user\switch\src\msapi):                retVal = hwGetGlobal2RegField(dev,QD_REG_INGRESS_RATE_COMMAND,15,1,&data);
gtPIRL.c (user\switch\src\msapi):        retVal = hwGetGlobal2RegField(dev,QD_REG_INGRESS_RATE_COMMAND,15,1,&data);
gtPIRL2.c (user\switch\src\msapi):        retVal = hwGetGlobal2RegField(dev,QD_REG_INGRESS_RATE_COMMAND,15,1,&data);
gtPIRL2.c (user\switch\src\msapi):                retVal = hwGetGlobal2RegField(dev,QD_REG_INGRESS_RATE_COMMAND,15,1,&data);
gtPIRL2.c (user\switch\src\msapi):        retVal = hwGetGlobal2RegField(dev,QD_REG_INGRESS_RATE_COMMAND,15,1,&data);
gtPIRL3.c (user\switch\src\msapi):        retVal = hwGetGlobal2RegField(dev,QD_REG_INGRESS_RATE_COMMAND,15,1,&data);
gtPIRL3.c (user\switch\src\msapi):                retVal = hwGetGlobal2RegField(dev,QD_REG_INGRESS_RATE_COMMAND,15,1,&data);
gtPIRL3.c (user\switch\src\msapi):        retVal = hwGetGlobal2RegField(dev,QD_REG_INGRESS_RATE_COMMAND,15,1,&data);
gtPriTable.c (user\switch\src\msapi):        retVal = hwGetGlobal2RegField(dev,QD_REG_PRIORITY_OVERRIDE,15,1,&data);
gtPriTable.c (user\switch\src\msapi):        retVal = hwGetGlobal2RegField(dev,QD_REG_PRIORITY_OVERRIDE,15,1,&data);
gtPriTable.c (user\switch\src\msapi):        retVal = hwGetGlobal2RegField(dev,QD_REG_PRIORITY_OVERRIDE,15,1,&data);
gtPriTable.c (user\switch\src\msapi):        retVal = hwGetGlobal2RegField(dev,QD_REG_PRIORITY_OVERRIDE,15,1,&data);
gtPriTable.c (user\switch\src\msapi):        retVal = hwGetGlobal2RegField(dev,QD_REG_PRIORITY_OVERRIDE,15,1,&data);
gtPTP.c (user\switch\src\msapi):        retVal = hwGetGlobal2RegField(dev,QD_REG_PTP_COMMAND,15,1,&data);
gtPTP.c (user\switch\src\msapi):                retVal = hwGetGlobal2RegField(dev,QD_REG_PTP_COMMAND,15,1,&data);
gtPTP.c (user\switch\src\msapi):                retVal = hwGetGlobal2RegField(dev,QD_REG_PTP_COMMAND,15,1,&data);
gtPTP.c (user\switch\src\msapi):                retVal = hwGetGlobal2RegField(dev,QD_REG_PTP_COMMAND,15,1,&data);
gtPTP.c (user\switch\src\msapi):        retVal = hwGetGlobal2RegField(dev,QD_REG_PTP_COMMAND,15,1,&data);
gtSysCtrl.c (user\switch\src\msapi):        retVal = hwGetGlobal2RegField(dev,QD_REG_MANAGEMENT,3,1,&data);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwGetGlobal2RegField(dev,QD_REG_MANAGEMENT,0,3,pri);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwGetGlobal2RegField(dev,QD_REG_MANAGEMENT,15,1,&data);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwGetGlobal2RegField(dev,QD_REG_MANAGEMENT,14,1,&data);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwGetGlobal2RegField(dev,QD_REG_MANAGEMENT,13,1,&data);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwGetGlobal2RegField(dev,QD_REG_MANAGEMENT,7,1,&data);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwGetGlobal2RegField(dev,QD_REG_MANAGEMENT,4,3,pri);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwGetGlobal2RegField(dev,QD_REG_TRUNK_MASK_TBL,11,1,&data);
gtSysCtrl.c (user\switch\src\msapi):        retVal = hwGetGlobal2RegField(dev,QD_REG_MANAGEMENT, 10, 1, &data);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwGetGlobal2RegField(dev,QD_REG_PRIORITY_OVERRIDE,7,1,&data);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwGetGlobal2RegField(dev,QD_REG_PRIORITY_OVERRIDE,4,3,pri);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwGetGlobal2RegField(dev,QD_REG_PRIORITY_OVERRIDE,3,1,&data);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwGetGlobal2RegField(dev,QD_REG_PRIORITY_OVERRIDE,0,3,pri);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwGetGlobal2RegField(dev,QD_REG_MANAGEMENT,15,1,&data);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwGetGlobal2RegField(dev,QD_REG_MANAGEMENT,12,1,&data);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwGetGlobal2RegField(dev,QD_REG_MANAGEMENT, 11, 1, &data);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwGetGlobal2RegField(dev,QD_REG_MANAGEMENT,9,1,&data);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwGetGlobal2RegField(dev,QD_REG_MANAGEMENT,8,1,&data);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwGetGlobal2RegField(dev,QD_REG_SDET_POLARITY,15,1,&data);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwGetGlobal2RegField(dev,QD_REG_SDET_POLARITY,14,1,&data);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwGetGlobal2RegField(dev,QD_REG_SDET_POLARITY,0,dev->maxPorts,&data);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwGetGlobal2RegField(dev,QD_REG_SDET_POLARITY,11,1,&data);
gtSysCtrl.c (user\switch\src\msapi):            retVal = hwGetGlobal2RegField(dev,QD_REG_SWITCH_MAC,15,1,&data);
gtSysCtrl.c (user\switch\src\msapi):           retVal = hwGetGlobal2RegField(dev,QD_REG_SWITCH_MAC,15,1,&data);
gtSysCtrl.c (user\switch\src\msapi):       retVal = hwGetGlobal2RegField(dev,QD_REG_SWITCH_MAC,15,1,&data);
gtSysCtrl.c (user\switch\src\msapi):           retVal = hwGetGlobal2RegField(dev,QD_REG_SWITCH_MAC,15,1,&data);
gtSysCtrl.c (user\switch\src\msapi):            retVal = hwGetGlobal2RegField(dev,QD_REG_SWITCH_MAC,15,1,&tmpData);
gtSysCtrl.c (user\switch\src\msapi):           retVal = hwGetGlobal2RegField(dev,QD_REG_SWITCH_MAC,15,1,&tmpData);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwGetGlobal2RegField(dev,QD_REG_CUT_THROU_CTRL, 8, 5, &data);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwGetGlobal2RegField(dev,QD_REG_CUT_THROU_CTRL, 7, 1, &data);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwGetGlobal2RegField(dev,QD_REG_CUT_THROU_CTRL, 6, 1, &data);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwGetGlobal2RegField(dev,QD_REG_CUT_THROU_CTRL, 0, 6, &data);
gtWeight.c (user\switch\src\msapi):            retVal = hwGetGlobal2RegField(dev,QD_REG_QOS_WEIGHT,15,1,&data);
gtWeight.c (user\switch\src\msapi):            retVal = hwGetGlobal2RegField(dev,QD_REG_QOS_WEIGHT,15,1,&data);
gtWeight.c (user\switch\src\msapi):        retVal = hwGetGlobal2RegField(dev,QD_REG_QOS_WEIGHT,15,1,&data);
gtWeight.c (user\switch\src\msapi):        retVal = hwGetGlobal2RegField(dev,QD_REG_QOS_WEIGHT,15,1,&data);
---- hwReadGlobal2Reg Matches (49 in 14 files) ----
gtBrgFdb.c (user\switch\src\msapi):        retVal = hwReadGlobal2Reg(dev, QD_REG_ATU_STATS, &data);
gtCCPVT.c (user\switch\src\msapi):            retVal = hwReadGlobal2Reg(dev,QD_REG_PVT_DATA,&data);
gtEvents.c (user\switch\src\msapi):    retVal = hwReadGlobal2Reg(dev,QD_REG_DEVINT_SOURCE,&data);
gtEvents.c (user\switch\src\msapi):    retVal = hwReadGlobal2Reg(dev,QD_REG_WD_CONTROL,&data);
gtHwCntl.c (user\switch\src\driver):* hwReadGlobal2Reg
gtHwCntl.c (user\switch\src\driver):GT_STATUS hwReadGlobal2Reg
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("hwReadGlobal2Reg>>read from global 2 register: phyAddr 0x%x, regAddr 0x%x, data 0x%x.return %d\r\n", phyAddr,regAddr,*data,retVal));
gtHwCntl.h (user\switch\include\h\driver):* hwReadGlobal2Reg
gtHwCntl.h (user\switch\include\h\driver):GT_STATUS hwReadGlobal2Reg
gtMisc.c (user\switch\src\msapi):            retVal = hwReadGlobal2Reg(dev,QD_REG_EEPROM_DATA,&data);
gtMisc.c (user\switch\src\msapi):    retVal = hwReadGlobal2Reg(dev,QD_REG_EEPROM_COMMAND, &data);
gtMisc.c (user\switch\src\msapi):        retVal = hwReadGlobal2Reg(dev, QD_REG_SCRATCH_MISC, &tmpData);
gtMisc.c (user\switch\src\msapi):        retVal = hwReadGlobal2Reg(dev, funcReg, &tmpData);
gtPIRL.c (user\switch\src\msapi):            retVal = hwReadGlobal2Reg(dev,QD_REG_INGRESS_RATE_DATA,&data);
gtPIRL2.c (user\switch\src\msapi):            retVal = hwReadGlobal2Reg(dev,QD_REG_INGRESS_RATE_DATA,&data);
gtPIRL3.c (user\switch\src\msapi):            retVal = hwReadGlobal2Reg(dev,QD_REG_INGRESS_RATE_DATA,&data);
gtPortCtrl.c (user\switch\src\msapi):    if(hwReadGlobal2Reg(dev,(GT_U8)regAddr,&u16Data) != GT_OK)
gtPriTable.c (user\switch\src\msapi):        retVal = hwReadGlobal2Reg(dev, QD_REG_PRIORITY_OVERRIDE, &data);
gtPriTable.c (user\switch\src\msapi):    retVal = hwReadGlobal2Reg(dev, QD_REG_PRIORITY_OVERRIDE, &data);
gtPriTable.c (user\switch\src\msapi):    retVal = hwReadGlobal2Reg(dev, QD_REG_PRIORITY_OVERRIDE, &data);
gtPriTable.c (user\switch\src\msapi):    retVal = hwReadGlobal2Reg(dev, QD_REG_PRIORITY_OVERRIDE, &data);
gtPriTable.c (user\switch\src\msapi):    retVal = hwReadGlobal2Reg(dev, QD_REG_PRIORITY_OVERRIDE, &data);
gtPTP.c (user\switch\src\msapi):            retVal = hwReadGlobal2Reg(dev,QD_REG_PTP_DATA,&data);
gtPTP.c (user\switch\src\msapi):                retVal = hwReadGlobal2Reg(dev,QD_REG_PTP_DATA,&data);
gtPTP.c (user\switch\src\msapi):            retVal = hwReadGlobal2Reg(dev,QD_REG_PTP_DATA,&data);
gtPTP.c (user\switch\src\msapi):                retVal = hwReadGlobal2Reg(dev,QD_REG_PTP_DATA,&data);
gtSysCtrl.c (user\switch\src\msapi):		retVal = hwReadGlobal2Reg(dev,i, &enBits);
gtSysCtrl.c (user\switch\src\msapi):		DBG_INFO(("hwReadGlobal2Reg Called.[%02x]=%x\n",i,enBits));
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwReadGlobal2Reg(dev, QD_REG_MGMT_ENABLE, enBits);
gtSysCtrl.c (user\switch\src\msapi):        retVal = hwReadGlobal2Reg(dev,QD_REG_FLOWCTRL_DELAY,&data);
gtSysCtrl.c (user\switch\src\msapi):        retVal = hwReadGlobal2Reg(dev,QD_REG_FLOWCTRL_DELAY,&data);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwReadGlobal2Reg(dev,QD_REG_FLOWCTRL_DELAY,&data);
gtSysCtrl.c (user\switch\src\msapi):        retVal = hwReadGlobal2Reg(dev,QD_REG_ROUTING_TBL,&data);
gtSysCtrl.c (user\switch\src\msapi):        retVal = hwReadGlobal2Reg(dev,QD_REG_ROUTING_TBL,&data);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwReadGlobal2Reg(dev,QD_REG_ROUTING_TBL,&data);
gtSysCtrl.c (user\switch\src\msapi):        retVal = hwReadGlobal2Reg(dev,QD_REG_TRUNK_MASK_TBL,&data);
gtSysCtrl.c (user\switch\src\msapi):        retVal = hwReadGlobal2Reg(dev,QD_REG_TRUNK_MASK_TBL,&data);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwReadGlobal2Reg(dev,QD_REG_TRUNK_MASK_TBL,&data);
gtSysCtrl.c (user\switch\src\msapi):        retVal = hwReadGlobal2Reg(dev,QD_REG_TRUNK_ROUTING,&data);
gtSysCtrl.c (user\switch\src\msapi):        retVal = hwReadGlobal2Reg(dev,QD_REG_TRUNK_ROUTING,&data);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwReadGlobal2Reg(dev,QD_REG_TRUNK_ROUTING,&data);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwReadGlobal2Reg(dev, QD_REG_MGMT_ENABLE_2X, enBits);
gtSysCtrl.c (user\switch\src\msapi):        retVal = hwReadGlobal2Reg(dev,QD_REG_SWITCH_MAC,&data);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwReadGlobal2Reg(dev,QD_REG_SWITCH_MAC,&data);
gtSysCtrl.c (user\switch\src\msapi):    retVal = hwReadGlobal2Reg(dev,QD_REG_SWITCH_MAC,&data);
gtSysCtrl.c (user\switch\src\msapi):        retVal = hwReadGlobal2Reg(dev,QD_REG_SWITCH_MAC,&tmpData);
gtWeight.c (user\switch\src\msapi):    retVal = hwReadGlobal2Reg(dev, QD_REG_QOS_WEIGHT, &data);
gtWeight.c (user\switch\src\msapi):        retVal = hwReadGlobal2Reg(dev, QD_REG_QOS_WEIGHT, &data);
gtWeight.c (user\switch\src\msapi):        retVal = hwReadGlobal2Reg(dev, QD_REG_QOS_WEIGHT, &data);
---- phyRegWritePPUEn Matches (13 in 1 files) ----
gtHwCntl.c (user\switch\src\driver):GT_STATUS phyRegWritePPUEn (GT_QD_DEV* dev, unsigned int phyAddr , unsigned int regAddr,
gtHwCntl.c (user\switch\src\driver):        retVal = phyRegWritePPUEn (dev,phyAddr,regAddr,data);
gtHwCntl.c (user\switch\src\driver):		DBG_INFO(("===coreWritePhyReg===phyRegWritePPUEn retVal=%d===\r\n",retVal));
gtHwCntl.c (user\switch\src\driver):            if((retVal = phyRegWritePPUEn(dev,phyAddr,pageAddr,tmpData)) == GT_OK)
gtHwCntl.c (user\switch\src\driver):                DBG_INFO(("phyRegWritePPUEn & phyRegReadPPUEn retVal =%d\r\n",retVal));
gtHwCntl.c (user\switch\src\driver):            retVal = phyRegWritePPUEn (dev,phyAddr,regAddr,data);
gtHwCntl.c (user\switch\src\driver):            if((retVal = phyRegWritePPUEn(dev,phyAddr,pageAddr,tmpData)) == GT_OK)
gtHwCntl.c (user\switch\src\driver):                retVal = phyRegWritePPUEn(dev,phyAddr,regAddr,data);
gtHwCntl.c (user\switch\src\driver):* phyRegWritePPUEn
gtHwCntl.c (user\switch\src\driver):GT_STATUS phyRegWritePPUEn (GT_QD_DEV* dev, unsigned int phyAddr , unsigned int regAddr,
gtHwCntl.c (user\switch\src\driver):	DBG_INFO(("phyRegWritePPUEn QD_REG_SMI_PHY_CMD is busy or not smiReg = %x,%x\r\n",smiReg,smiReg & QD_SMI_BUSY));
gtHwCntl.c (user\switch\src\driver):			DBG_INFO(("==phyRegWritePPUEn==while (%d) >> smiReg & QD_SMI_BUSY\r\n",smiReg & QD_SMI_BUSY));
gtHwCntl.c (user\switch\src\driver):	DBG_INFO(("==phyRegWritePPUEn= GT_OK =QD_REG_SMI_PHY_CMD smiReg=%x return %d\r\n",smiReg,GT_OK));
---- smiSetupRead Matches (3 in 1 files) ----
gtHwCntl.c (user\switch\src\driver):* smiSetupRead
gtHwCntl.c (user\switch\src\driver):GT_STATUS smiSetupRead (GT_QD_DEV* dev, unsigned int phyAddr , unsigned int pointer,
gtHwCntl.c (user\switch\src\driver):  DBG_INFO(("Call smiSetupRead\n"));
---- phyReadGlobal2Reg>>read from global Matches (1 in 1 files) ----
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("phyReadGlobal2Reg>>read from global 2 register:dev=%p, phyAddr 0x%x, regAddr 0x%x,data 0x%x.\r\n",
---- phyReadGlobal2Reg Matches (37 in 1 files) ----
gtHwCntl.c (user\switch\src\driver):static GT_STATUS phyReadGlobal2Reg
gtHwCntl.c (user\switch\src\driver):    if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_CMD, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):            if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_CMD, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):    if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_CMD, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):            if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_CMD, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):    if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_DATA, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):    if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_CMD, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):            if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_CMD, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):static GT_STATUS phyReadGlobal2Reg
gtHwCntl.c (user\switch\src\driver):    DBG_INFO(("phyReadGlobal2Reg>>read from global 2 register:dev=%p, phyAddr 0x%x, regAddr 0x%x,data 0x%x.\r\n",
gtHwCntl.c (user\switch\src\driver):    if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_CMD, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):            if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_CMD, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):    if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_CMD, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):            if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_CMD, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):    if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_CMD, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):            if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_CMD, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):    if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_DATA, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):    if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_CMD, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):            if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_CMD, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):    if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_CMD, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):            if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_CMD, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):    if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_CMD, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):            if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_CMD, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):    if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_CMD, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):            if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_CMD, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):    if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_CMD, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):            if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_CMD, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):    if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_DATA, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):    if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_CMD, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):            if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_CMD, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):    if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_CMD, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):            if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_CMD, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):    if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_CMD, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):            if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_CMD, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):    if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_DATA, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):    if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_CMD, &smiReg) != GT_OK)
gtHwCntl.c (user\switch\src\driver):            if(phyReadGlobal2Reg(dev,QD_REG_SMI_PHY_CMD, &smiReg) != GT_OK)
---- ETH_ReadPHYRegister Matches (15 in 3 files) ----
Main.c (user):  PHYRegData = ETH_ReadPHYRegister(0x11,0x02);
Main.c (user):   PHYRegData = ETH_ReadPHYRegister(0x11,0x03);
Main.c (user):	PHYRegData = ETH_ReadPHYRegister(PHYAddress,PHYRegAddr);
Main.c (user):  PHYRegData = ETH_ReadPHYRegister(SmiAddr,RegAddr);
Main.c (user):	data = ETH_ReadPHYRegister(SmiAddr,QD_REG_SMI_PHY_DATA);
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):	 printf("\n\rETH_ReadPHYRegister %d:0x%X", 0, ETH_ReadPHYRegister(PHYAddress, 0));
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):     printf("\n\rETH_ReadPHYRegister %d:0x%X", 16, ETH_ReadPHYRegister(PHYAddress, 16));
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):    } while (!(ETH_ReadPHYRegister(PHYAddress, PHY_BSR) & PHY_Linked_Status) && (timeout < PHY_READ_TO));
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):     printf("\n\rETH_ReadPHYRegister %d:0x%X", PHY_BSR, ETH_ReadPHYRegister(PHYAddress, PHY_BSR));
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):    } while (!(ETH_ReadPHYRegister(PHYAddress, PHY_BSR) & PHY_AutoNego_Complete) && (timeout < (uint32_t)PHY_READ_TO));
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):	printf("\n\rETH_ReadPHYRegister %d:0x%X", PHY_BSR, ETH_ReadPHYRegister(PHYAddress, PHY_BSR));
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):    RegValue = ETH_ReadPHYRegister(PHYAddress, PHY_SR);
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):uint16_t ETH_ReadPHYRegister(uint16_t PHYAddress, uint16_t PHYReg)
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):  tmpreg = ETH_ReadPHYRegister(PHYAddress, PHY_BCR); 
Stm32f4x7_eth.h (fwlib\stm32f4x7_eth_driver\inc):uint16_t ETH_ReadPHYRegister(uint16_t PHYAddress, uint16_t PHYReg);
---- ETH_WritePHYRegister Matches (9 in 3 files) ----
Main.c (user):	ret = ETH_WritePHYRegister(PHYAddress,PHYRegAddr,PHYRegData);
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):  if(!(ETH_WritePHYRegister(PHYAddress, PHY_BCR, PHY_Reset)))
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):    if(!(ETH_WritePHYRegister(PHYAddress, PHY_BCR, PHY_AutoNegotiation)))
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):    if(!ETH_WritePHYRegister(PHYAddress, PHY_BCR, ((uint16_t)(ETH_InitStruct->ETH_Mode >> 3) |
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):uint32_t ETH_WritePHYRegister(uint16_t PHYAddress, uint16_t PHYReg, uint16_t PHYValue)
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):  	printf("\r\n===== ETH_WritePHYRegister ETH_ERROR===\r\n");
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):  printf("\r\n===== ETH_WritePHYRegister ETH_SUCCESS===\r\n");
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):  if(ETH_WritePHYRegister(PHYAddress, PHY_BCR, tmpreg) != (uint32_t)RESET)
Stm32f4x7_eth.h (fwlib\stm32f4x7_eth_driver\inc):uint32_t ETH_WritePHYRegister(uint16_t PHYAddress, uint16_t PHYReg, uint16_t PHYValue);
---- QD_SMI_BUSY Matches (63 in 4 files) ----
gtDrvSwRegs.h (user\switch\include\h\driver):#define QD_SMI_BUSY                0x8000
gtHwCntl.c (user\switch\src\driver):  smiReg =  QD_SMI_BUSY | (phyAddr << QD_SMI_DEV_ADDR_BIT) | (QD_SMI_READ_22 << QD_SMI_OP_BIT) | (regAddr << QD_SMI_REG_ADDR_BIT) | (QD_SMI_CLAUSE22 << QD_SMI_MODE_BIT);
gtHwCntl.c (user\switch\src\driver):    if(smiReg & QD_SMI_BUSY) 
gtHwCntl.c (user\switch\src\driver):        } while (smiReg & QD_SMI_BUSY);
gtHwCntl.c (user\switch\src\driver):    smiReg =  QD_SMI_BUSY | (phyAddr << QD_SMI_DEV_ADDR_BIT) | (QD_SMI_READ_22 << QD_SMI_OP_BIT) | 
gtHwCntl.c (user\switch\src\driver):    if(smiReg & QD_SMI_BUSY) 
gtHwCntl.c (user\switch\src\driver):        } while (smiReg & QD_SMI_BUSY);
gtHwCntl.c (user\switch\src\driver):  smiReg = QD_SMI_BUSY | (phyAddr << QD_SMI_DEV_ADDR_BIT) | (QD_SMI_WRITE << QD_SMI_OP_BIT) | (regAddr << QD_SMI_REG_ADDR_BIT) | (QD_SMI_CLAUSE22 << QD_SMI_MODE_BIT);
gtHwCntl.c (user\switch\src\driver):	DBG_INFO(("phyRegWritePPUEn QD_REG_SMI_PHY_CMD is busy or not smiReg = %x,%x\r\n",smiReg,smiReg & QD_SMI_BUSY));
gtHwCntl.c (user\switch\src\driver):    if(smiReg & QD_SMI_BUSY) 
gtHwCntl.c (user\switch\src\driver):			DBG_INFO(("==phyRegWritePPUEn==while (%d) >> smiReg & QD_SMI_BUSY\r\n",smiReg & QD_SMI_BUSY));
gtHwCntl.c (user\switch\src\driver):        } while (smiReg & QD_SMI_BUSY);
gtHwCntl.c (user\switch\src\driver):    smiReg = QD_SMI_BUSY | (phyAddr << QD_SMI_DEV_ADDR_BIT) | (QD_SMI_WRITE << QD_SMI_OP_BIT) | 
gtHwCntl.c (user\switch\src\driver):    if(smiReg & QD_SMI_BUSY) 
gtHwCntl.c (user\switch\src\driver):        } while (smiReg & QD_SMI_BUSY);
gtHwCntl.c (user\switch\src\driver):    smiReg =  (GT_U16)(QD_SMI_BUSY | (port << QD_SMI_DEV_ADDR_BIT) | (QD_SMI_WRITE_ADDR << QD_SMI_OP_BIT) | 
gtHwCntl.c (user\switch\src\driver):    if(smiReg & QD_SMI_BUSY) 
gtHwCntl.c (user\switch\src\driver):        } while (smiReg & QD_SMI_BUSY);
gtHwCntl.c (user\switch\src\driver):	smiReg =  (GT_U16)(QD_SMI_BUSY | (port << QD_SMI_DEV_ADDR_BIT) | (QD_SMI_READ_45 << QD_SMI_OP_BIT) | 
gtHwCntl.c (user\switch\src\driver):    if(smiReg & QD_SMI_BUSY) 
gtHwCntl.c (user\switch\src\driver):        } while (smiReg & QD_SMI_BUSY);
gtHwCntl.c (user\switch\src\driver):    if(smiReg & QD_SMI_BUSY) 
gtHwCntl.c (user\switch\src\driver):        } while (smiReg & QD_SMI_BUSY);
gtHwCntl.c (user\switch\src\driver):    smiReg = (GT_U16)(QD_SMI_BUSY | (port << QD_SMI_DEV_ADDR_BIT) | (QD_SMI_WRITE_ADDR << QD_SMI_OP_BIT) | 
gtHwCntl.c (user\switch\src\driver):    if(smiReg & QD_SMI_BUSY) 
gtHwCntl.c (user\switch\src\driver):        } while (smiReg & QD_SMI_BUSY);
gtHwCntl.c (user\switch\src\driver):    smiReg = (GT_U16)( QD_SMI_BUSY | (port << QD_SMI_DEV_ADDR_BIT) | (QD_SMI_WRITE << QD_SMI_OP_BIT) | 
gtHwCntl.c (user\switch\src\driver):    if(smiReg & QD_SMI_BUSY) 
gtHwCntl.c (user\switch\src\driver):        } while (smiReg & QD_SMI_BUSY);
gtHwCntl.c (user\switch\src\driver):  smiReg =  QD_SMI_BUSY | (phyAddr << QD_SMI_DEV_ADDR_BIT) | (QD_SMI_READ_22 << QD_SMI_OP_BIT)
gtHwCntl.c (user\switch\src\driver):    if(smiReg & QD_SMI_BUSY) 
gtHwCntl.c (user\switch\src\driver):        } while (smiReg & QD_SMI_BUSY);
gtHwCntl.c (user\switch\src\driver):    smiReg =  QD_SMI_BUSY | (phyAddr << QD_SMI_DEV_ADDR_BIT) | (QD_SMI_READ_22 << QD_SMI_OP_BIT) 
gtHwCntl.c (user\switch\src\driver):    if(smiReg & QD_SMI_BUSY) 
gtHwCntl.c (user\switch\src\driver):        } while (smiReg & QD_SMI_BUSY);
gtHwCntl.c (user\switch\src\driver):  smiReg = QD_SMI_BUSY | (phyAddr << QD_SMI_DEV_ADDR_BIT) | (QD_SMI_WRITE << QD_SMI_OP_BIT)
gtHwCntl.c (user\switch\src\driver):    if(smiReg & QD_SMI_BUSY) 
gtHwCntl.c (user\switch\src\driver):        } while (smiReg & QD_SMI_BUSY);
gtHwCntl.c (user\switch\src\driver):    smiReg = QD_SMI_BUSY | (phyAddr << QD_SMI_DEV_ADDR_BIT) | (QD_SMI_WRITE << QD_SMI_OP_BIT)
gtHwCntl.c (user\switch\src\driver):  smiReg =  QD_SMI_BUSY | (phyAddr << QD_SMI_DEV_ADDR_BIT) | (QD_SMI_READ_22 << QD_SMI_OP_BIT)
gtHwCntl.c (user\switch\src\driver):    if(smiReg & QD_SMI_BUSY) 
gtHwCntl.c (user\switch\src\driver):        } while (smiReg & QD_SMI_BUSY);
gtHwCntl.c (user\switch\src\driver):    smiReg =  QD_SMI_BUSY | (phyAddr << QD_SMI_DEV_ADDR_BIT) | (QD_SMI_READ_22 << QD_SMI_OP_BIT) 
gtHwCntl.c (user\switch\src\driver):    if(smiReg & QD_SMI_BUSY) 
gtHwCntl.c (user\switch\src\driver):        } while (smiReg & QD_SMI_BUSY);
gtHwCntl.c (user\switch\src\driver):  smiReg = QD_SMI_BUSY | (phyAddr << QD_SMI_DEV_ADDR_BIT) | (QD_SMI_WRITE << QD_SMI_OP_BIT)
gtHwCntl.c (user\switch\src\driver):    if(smiReg & QD_SMI_BUSY) 
gtHwCntl.c (user\switch\src\driver):        } while (smiReg & QD_SMI_BUSY);
gtHwCntl.c (user\switch\src\driver):    smiReg = QD_SMI_BUSY | (phyAddr << QD_SMI_DEV_ADDR_BIT) | (QD_SMI_WRITE << QD_SMI_OP_BIT)
gtMiiSmiIf.c (user\switch\src\platform):    if(smiReg & QD_SMI_BUSY) 
gtMiiSmiIf.c (user\switch\src\platform):        } while (smiReg & QD_SMI_BUSY);
gtMiiSmiIf.c (user\switch\src\platform):    smiReg =  QD_SMI_BUSY | (phyAddr << QD_SMI_DEV_ADDR_BIT) | (QD_SMI_READ_22 << QD_SMI_OP_BIT) | 
gtMiiSmiIf.c (user\switch\src\platform):    if(smiReg & QD_SMI_BUSY) 
gtMiiSmiIf.c (user\switch\src\platform):        } while (smiReg & QD_SMI_BUSY);
gtMiiSmiIf.c (user\switch\src\platform):    if(smiReg & QD_SMI_BUSY) 
gtMiiSmiIf.c (user\switch\src\platform):        } while (smiReg & QD_SMI_BUSY);
gtMiiSmiIf.c (user\switch\src\platform):    smiReg = QD_SMI_BUSY | (phyAddr << QD_SMI_DEV_ADDR_BIT) | (QD_SMI_WRITE << QD_SMI_OP_BIT) | 
gtMiiSmiIf.c (user\switch\src\platform):  smiReg =  QD_SMI_BUSY | (phyAddr << QD_SMI_DEV_ADDR_BIT) | (QD_SMI_READ_22 << QD_SMI_OP_BIT) | (regAddr << QD_SMI_REG_ADDR_BIT) | (QD_SMI_CLAUSE22 << QD_SMI_MODE_BIT);
gtMiiSmiIf.c (user\switch\src\platform):  smiReg = QD_SMI_BUSY | (phyAddr << QD_SMI_DEV_ADDR_BIT) | (QD_SMI_WRITE << QD_SMI_OP_BIT) | (regAddr << QD_SMI_REG_ADDR_BIT) | (QD_SMI_CLAUSE22 << QD_SMI_MODE_BIT);
Main.c (user):	smiReg =  QD_SMI_BUSY | (SmiAddr << QD_SMI_DEV_ADDR_BIT) | (QD_SMI_READ_22 << QD_SMI_OP_BIT) | (PHYRegAddr << QD_SMI_REG_ADDR_BIT) | (QD_SMI_CLAUSE22 << QD_SMI_MODE_BIT);
Main.c (user):		if( (ETH_ReadPHYRegister(SmiAddr,QD_REG_SMI_PHY_CMD) & QD_SMI_BUSY)== 0 )
Main.c (user):	smiReg =  QD_SMI_BUSY | (SmiAddr << QD_SMI_DEV_ADDR_BIT) | (QD_SMI_WRITE << QD_SMI_OP_BIT) | (PHYRegAddr << QD_SMI_REG_ADDR_BIT) | (QD_SMI_CLAUSE22 << QD_SMI_MODE_BIT);
---- hwSetPhyRegField Matches (15 in 4 files) ----
gtDrvConfig.c (user\switch\src\driver):                if((status= hwSetPhyRegField(dev,hwPort,27,9,1,data)) != GT_OK)
gtDrvConfig.c (user\switch\src\driver):                if((status= hwSetPhyRegField(dev,hwPort,22,15,1,data)) != GT_OK)
gtDrvConfig.c (user\switch\src\driver):                if((status= hwSetPhyRegField(dev,hwPort,27,9,1,data)) != GT_OK)
gtDrvConfig.c (user\switch\src\driver):                if((status= hwSetPhyRegField(dev,hwPort,22,15,1,data)) != GT_OK)
gtDrvConfig.c (user\switch\src\driver):    if((status= hwSetPhyRegField(dev,hwPort,22,0,8,pageReg)) != GT_OK)
gtHwCntl.c (user\switch\src\driver):* hwSetPhyRegField
gtHwCntl.c (user\switch\src\driver):GT_STATUS hwSetPhyRegField
gtHwCntl.h (user\switch\include\h\driver):* hwSetPhyRegField
gtHwCntl.h (user\switch\include\h\driver):GT_STATUS hwSetPhyRegField
gtPhyCtrl.c (user\switch\src\msapi):    retVal = hwSetPhyRegField(dev,hwPort,QD_PHY_CONTROL_REG,14,1,u16Data);
gtPhyCtrl.c (user\switch\src\msapi):    if((retVal=hwSetPhyRegField(dev,hwPort,QD_PHY_CONTROL_REG,11,1,u16Data)) != GT_OK)
gtPhyCtrl.c (user\switch\src\msapi):    if((retVal=hwSetPhyRegField(dev,hwPort,QD_PHY_AUTONEGO_AD_REG,(GT_U8)regStart,2,u16Data)) != GT_OK)
gtPhyCtrl.c (user\switch\src\msapi):    if((retVal=hwSetPhyRegField(dev,hwPort,QD_PHY_CONTROL_REG,9,1,1)) != GT_OK)
gtPhyCtrl.c (user\switch\src\msapi):        if((retVal = hwSetPhyRegField(dev,hwPort,0x10,14,1,u16Data)) != GT_OK)
gtPhyCtrl.c (user\switch\src\msapi):    if((retVal=hwSetPhyRegField(dev,hwPort,QD_PHY_CONTROL_REG,9,1,1)) != GT_OK)
---- MARVELL_OUI_MSb Matches (2 in 2 files) ----
gtDrvConfig.c (user\switch\src\driver):    if(ouiMsb != MARVELL_OUI_MSb)
gtVct.h (user\switch\include\h\msapi):#define MARVELL_OUI_MSb        0x0141
---- driverFindPhyID Matches (4 in 1 files) ----
gtDrvConfig.c (user\switch\src\driver):* driverFindPhyID
gtDrvConfig.c (user\switch\src\driver):static GT_STATUS driverFindPhyID
gtDrvConfig.c (user\switch\src\driver):    if(driverFindPhyID(dev,hwPort,&phyId) != GT_OK)
gtDrvConfig.c (user\switch\src\driver):    if(driverFindPhyID(dev,hwPort,&phyId) != GT_OK)
---- driverGetPhyID Matches (5 in 3 files) ----
gtDrvConfig.c (user\switch\src\driver):* driverGetPhyID
gtDrvConfig.c (user\switch\src\driver):GT_U32 driverGetPhyID
gtDrvConfig.h (user\switch\include\h\driver):* driverGetPhyID
gtDrvConfig.h (user\switch\include\h\driver):GT_U32 driverGetPhyID
msApiInternal.h (user\switch\include\h\msapi):#define GT_GET_PHY_ID(dev,_hwPort)            driverGetPhyID(dev,_hwPort)
---- G1_DEV_NO_RELOAD_EEPROM Matches (1 in 1 files) ----
msApiInternal.h (user\switch\include\h\msapi):#define G1_DEV_NO_RELOAD_EEPROM	(G1_DEV_88E6321_FAMILY | G1_DEV_88E6999_FAMILY | G1_DEV_88E6390_FAMILY)
---- MARVELL_OUI_LSb Matches (1 in 1 files) ----
gtVct.h (user\switch\include\h\msapi):#define MARVELL_OUI_LSb        0x0C00
---- PHY_MODEL_MASK Matches (3 in 3 files) ----
gtAdvVct.c (user\switch\src\msapi):            if ((phyInfo->phyId & PHY_MODEL_MASK) == DEV_G65G)
gtDrvConfig.c (user\switch\src\driver):    switch (phyId & PHY_MODEL_MASK)
gtVct.h (user\switch\include\h\msapi):#define PHY_MODEL_MASK        0x03F0
---- 6321 Matches (0 in 0 files) ----
---- 88E632 Matches (0 in 0 files) ----
---- 88E632 Matches (0 in 0 files) ----
---- 88E632 Matches (0 in 0 files) ----
---- HAL_ETH_ReadPHYRegister Matches (0 in 0 files) ----
---- HAL_ETH_ReadPHYRegister Matches (0 in 0 files) ----
---- HAL_ETH_ReadPHYRegister Matches (0 in 0 files) ----
---- PHY_BCR Matches (9 in 2 files) ----
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):  if(!(ETH_WritePHYRegister(PHYAddress, PHY_BCR, PHY_Reset)))
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):    if(!(ETH_WritePHYRegister(PHYAddress, PHY_BCR, PHY_AutoNegotiation)))
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):    if(!ETH_WritePHYRegister(PHYAddress, PHY_BCR, ((uint16_t)(ETH_InitStruct->ETH_Mode >> 3) |
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):  *     @arg PHY_BCR: Transceiver Basic Control Register 
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):  *     @arg PHY_BCR    : Transceiver Control Register  
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):  tmpreg = ETH_ReadPHYRegister(PHYAddress, PHY_BCR); 
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):  if(ETH_WritePHYRegister(PHYAddress, PHY_BCR, tmpreg) != (uint32_t)RESET)
Stm32f4x7_eth.h (fwlib\stm32f4x7_eth_driver\inc):#define PHY_BCR                          0          /*!< Transceiver Basic Control Register */
Stm32f4x7_eth.h (fwlib\stm32f4x7_eth_driver\inc):#define IS_ETH_PHY_REG(REG) (((REG) == PHY_BCR) || \
---- PHY_Isolate Matches (1 in 1 files) ----
Stm32f4x7_eth.h (fwlib\stm32f4x7_eth_driver\inc):#define PHY_Isolate                     ((uint16_t)0x0400)      /*!< Isolate PHY from MII */
---- PHY_SR Matches (5 in 3 files) ----
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):    RegValue = ETH_ReadPHYRegister(PHYAddress, PHY_SR);
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):  *     @arg PHY_SR : Transceiver Status Register    
Stm32f4x7_eth.h (fwlib\stm32f4x7_eth_driver\inc):                             ((REG) == PHY_SR))
Stm32f4x7_eth_conf.h (fwlib\stm32f4x7_eth_driver\inc):#define PHY_SR                 ((uint16_t)0x10) /* PHY status register Offset */
Stm32f4x7_eth_conf.h (fwlib\stm32f4x7_eth_driver\inc):#define PHY_SR                 ((uint16_t)0x01) /* PHY status register Offset */
---- PHY_SPEED_STATUS Matches (3 in 2 files) ----
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):    if(RegValue & PHY_SPEED_STATUS)
Stm32f4x7_eth_conf.h (fwlib\stm32f4x7_eth_driver\inc):#define PHY_SPEED_STATUS       ((uint16_t)0x0002) /* PHY Speed mask */
Stm32f4x7_eth_conf.h (fwlib\stm32f4x7_eth_driver\inc):#define PHY_SPEED_STATUS       ((uint16_t)0x0002) /* PHY Speed mask */
---- PHY_Reset Matches (2 in 2 files) ----
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):  if(!(ETH_WritePHYRegister(PHYAddress, PHY_BCR, PHY_Reset)))
Stm32f4x7_eth.h (fwlib\stm32f4x7_eth_driver\inc):#define PHY_Reset                       ((uint16_t)0x8000)      /*!< PHY Reset */
---- PHYAddress Matches (34 in 3 files) ----
Main.c (user):u16 Read_ETH_PHY(u16 PHYAddress,u16 PHYRegAddr)
Main.c (user):	PHYRegData = ETH_ReadPHYRegister(PHYAddress,PHYRegAddr);
Main.c (user):	printf("\n\rETH_ReadPHYRegister(%02x,%02x):0x%X\n",PHYAddress,PHYRegAddr, PHYRegData); 
Main.c (user):u16 Write_ETH_PHY(u16 PHYAddress,u16 PHYRegAddr,u16 PHYRegData)
Main.c (user):	ret = ETH_WritePHYRegister(PHYAddress,PHYRegAddr,PHYRegData);
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):  * @param PHYAddress: external PHY address
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):uint32_t ETH_Init(ETH_InitTypeDef* ETH_InitStruct, uint16_t PHYAddress)
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):  if(!(ETH_WritePHYRegister(PHYAddress, PHY_BCR, PHY_Reset)))
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):	 printf("\n\rETH_ReadPHYRegister %d:0x%X", 0, ETH_ReadPHYRegister(PHYAddress, 0));
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):     printf("\n\rETH_ReadPHYRegister %d:0x%X", 16, ETH_ReadPHYRegister(PHYAddress, 16));
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):    } while (!(ETH_ReadPHYRegister(PHYAddress, PHY_BSR) & PHY_Linked_Status) && (timeout < PHY_READ_TO));
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):     printf("\n\rETH_ReadPHYRegister %d:0x%X", PHY_BSR, ETH_ReadPHYRegister(PHYAddress, PHY_BSR));
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):    if(!(ETH_WritePHYRegister(PHYAddress, PHY_BCR, PHY_AutoNegotiation)))
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):    } while (!(ETH_ReadPHYRegister(PHYAddress, PHY_BSR) & PHY_AutoNego_Complete) && (timeout < (uint32_t)PHY_READ_TO));
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):	printf("\n\rETH_ReadPHYRegister %d:0x%X", PHY_BSR, ETH_ReadPHYRegister(PHYAddress, PHY_BSR));
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):    RegValue = ETH_ReadPHYRegister(PHYAddress, PHY_SR);
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):    if(!ETH_WritePHYRegister(PHYAddress, PHY_BCR, ((uint16_t)(ETH_InitStruct->ETH_Mode >> 3) |
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):  * @param PHYAddress: PHY device address, is the index of one of supported 32 PHY devices. 
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):uint16_t ETH_ReadPHYRegister(uint16_t PHYAddress, uint16_t PHYReg)
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):  assert_param(IS_ETH_PHY_ADDRESS(PHYAddress));
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):  tmpreg |=(((uint32_t)PHYAddress<<11) & ETH_MACMIIAR_PA);/* Set the PHY device address */
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):  * @param PHYAddress: PHY device address, is the index of one of supported 32 PHY devices. 
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):uint32_t ETH_WritePHYRegister(uint16_t PHYAddress, uint16_t PHYReg, uint16_t PHYValue)
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):  assert_param(IS_ETH_PHY_ADDRESS(PHYAddress));
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):  tmpreg |=(((uint32_t)PHYAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):  * @param  PHYAddress: PHY device address, is the index of one of supported 32 PHY devices.
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):uint32_t ETH_PHYLoopBackCmd(uint16_t PHYAddress, FunctionalState NewState)
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):  assert_param(IS_ETH_PHY_ADDRESS(PHYAddress));
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):  tmpreg = ETH_ReadPHYRegister(PHYAddress, PHY_BCR); 
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):  if(ETH_WritePHYRegister(PHYAddress, PHY_BCR, tmpreg) != (uint32_t)RESET)
Stm32f4x7_eth.h (fwlib\stm32f4x7_eth_driver\inc):uint32_t ETH_Init(ETH_InitTypeDef* ETH_InitStruct, uint16_t PHYAddress);
Stm32f4x7_eth.h (fwlib\stm32f4x7_eth_driver\inc):uint16_t ETH_ReadPHYRegister(uint16_t PHYAddress, uint16_t PHYReg);
Stm32f4x7_eth.h (fwlib\stm32f4x7_eth_driver\inc):uint32_t ETH_WritePHYRegister(uint16_t PHYAddress, uint16_t PHYReg, uint16_t PHYValue);
Stm32f4x7_eth.h (fwlib\stm32f4x7_eth_driver\inc):uint32_t ETH_PHYLoopBackCmd(uint16_t PHYAddress, FunctionalState NewState);
---- PHY_MICR_INT_EN Matches (2 in 1 files) ----
Stm32f4x7_eth_conf.h (fwlib\stm32f4x7_eth_driver\inc):#define PHY_MICR_INT_EN        ((uint16_t)0x0002) /* PHY Enable interrupts */
Stm32f4x7_eth_conf.h (fwlib\stm32f4x7_eth_driver\inc):#define PHY_MICR_INT_EN        ((uint16_t)0x0002) /* PHY Enable interrupts */
---- OK ETH_ReadPHYRegister ETH->MACMIIDR Matches (1 in 1 files) ----
Stm32f4x7_eth.c (fwlib\stm32f4x7_eth_driver\src):  printf("\r\n OK ETH_ReadPHYRegister ETH->MACMIIDR= %x\r\n",ETH->MACMIIDR);
